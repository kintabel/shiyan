{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'HospitalDetail',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      hospital: {\n        name: '',\n        address: '',\n        phone: '',\n        level: '',\n        introduction: '',\n        departments: [],\n        isAppointment: this.$route.query.isAppointment\n      },\n      isLoading: true\n    };\n  },\n  created() {\n    this.fetchHospitalDetail();\n  },\n  methods: {\n    fetchHospitalDetail() {\n      const hospitalId = this.$route.params.id; // 从路由参数中获取医院 ID\n      this.$request.get(`/hospital/selectAllData?id=${hospitalId}`).then(response => {\n        if (response.data) {\n          this.hospital = response.data;\n        } else {\n          console.error('获取医院详情数据格式错误:', response.data);\n          this.$message.error('获取医院详情失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医院详情失败:', error);\n        this.$message.error('获取医院详情失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    // 根据 level 值返回对应的等级名称\n    getHospitalLevel(level) {\n      const levelMap = {\n        1: '1级丙等',\n        2: '1级乙等',\n        3: '1级甲等',\n        4: '2级丙等',\n        5: '2级乙等',\n        6: '2级甲等',\n        7: '3级丙等',\n        8: '3级乙等',\n        9: '3级甲等'\n      };\n      return levelMap[level] || '未知等级'; // 如果 level 不在映射表中，返回 '未知等级'\n    },\n\n    // 生成跳转到医生页面的路由\n    getDoctorRoute(departmentId) {\n      const hospitalId = this.$route.params.id; // 获取当前医院 ID\n      const isAppointment = this.$route.query.isAppointment;\n      return {\n        name: 'Doctor',\n        // 路由名称\n        params: {\n          hospitalId: hospitalId,\n          // 传递医院 ID\n          departmentId: departmentId,\n          // 传递科室 ID\n          isAppointment: isAppointment\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","user","JSON","parse","localStorage","getItem","hospital","address","phone","level","introduction","departments","isAppointment","$route","query","isLoading","created","fetchHospitalDetail","methods","hospitalId","params","id","$request","get","then","response","console","error","$message","catch","finally","getHospitalLevel","levelMap","getDoctorRoute","departmentId"],"sources":["src/views/user/HospitalDetail.vue"],"sourcesContent":["<template>\r\n  <div class=\"hospital-detail-form\">\r\n    <!-- 数据加载中提示 -->\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-form label-width=\"120px\">\r\n        <el-form-item label=\"医院名称\">\r\n          <span>{{ hospital.name }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"医院地址\">\r\n          <span>{{ hospital.address }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"联系电话\">\r\n          <span>{{ hospital.phone }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"医院等级\">\r\n          <span>{{ getHospitalLevel(hospital.level) }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"医院简介\">\r\n          <span>{{ hospital.introduction }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"科室列表\">\r\n          <ul class=\"department-list\">\r\n            <li v-for=\"(department, index) in hospital.departments\" :key=\"index\">\r\n              <!-- 使用 router-link 跳转到医生页面 -->\r\n              <router-link :to=\"getDoctorRoute(department.id)\" class=\"department-link\">\r\n                {{ department.name}}\r\n              </router-link>\r\n            </li>\r\n          </ul>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'HospitalDetail',\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      hospital: {\r\n        name: '',\r\n        address: '',\r\n        phone: '',\r\n        level: '',\r\n        introduction: '',\r\n        departments: [],\r\n        isAppointment: this.$route.query.isAppointment,\r\n      },\r\n      isLoading: true\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchHospitalDetail();\r\n  },\r\n  methods: {\r\n    fetchHospitalDetail() {\r\n      const hospitalId = this.$route.params.id; // 从路由参数中获取医院 ID\r\n      this.$request.get(`/hospital/selectAllData?id=${hospitalId}`)\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.hospital = response.data;\r\n            } else {\r\n              console.error('获取医院详情数据格式错误:', response.data);\r\n              this.$message.error('获取医院详情失败，请稍后重试');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医院详情失败:', error);\r\n            this.$message.error('获取医院详情失败，请稍后重试');\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    // 根据 level 值返回对应的等级名称\r\n    getHospitalLevel(level) {\r\n      const levelMap = {\r\n        1: '1级丙等',\r\n        2: '1级乙等',\r\n        3: '1级甲等',\r\n        4: '2级丙等',\r\n        5: '2级乙等',\r\n        6: '2级甲等',\r\n        7: '3级丙等',\r\n        8: '3级乙等',\r\n        9: '3级甲等'\r\n      };\r\n      return levelMap[level] || '未知等级'; // 如果 level 不在映射表中，返回 '未知等级'\r\n    },\r\n    // 生成跳转到医生页面的路由\r\n    getDoctorRoute(departmentId) {\r\n      const hospitalId = this.$route.params.id; // 获取当前医院 ID\r\n      const isAppointment = this.$route.query.isAppointment;\r\n      return {\r\n        name: 'Doctor', // 路由名称\r\n        params: {\r\n          hospitalId: hospitalId, // 传递医院 ID\r\n          departmentId: departmentId, // 传递科室 ID\r\n          isAppointment: isAppointment\r\n        }\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.hospital-detail-form {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.department-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.department-link {\r\n  cursor: pointer;\r\n  color: #409eff;\r\n  text-decoration: none;\r\n}\r\n\r\n.department-link:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>"],"mappings":"AAwCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,QAAA;QACAP,IAAA;QACAQ,OAAA;QACAC,KAAA;QACAC,KAAA;QACAC,YAAA;QACAC,WAAA;QACAC,aAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF;MACA;MACAG,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,mBAAA;EACA;EACAC,OAAA;IACAD,oBAAA;MACA,MAAAE,UAAA,QAAAN,MAAA,CAAAO,MAAA,CAAAC,EAAA;MACA,KAAAC,QAAA,CAAAC,GAAA,+BAAAJ,UAAA,IACAK,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAzB,IAAA;UACA,KAAAM,QAAA,GAAAmB,QAAA,CAAAzB,IAAA;QACA;UACA0B,OAAA,CAAAC,KAAA,kBAAAF,QAAA,CAAAzB,IAAA;UACA,KAAA4B,QAAA,CAAAD,KAAA;QACA;MACA,GACAE,KAAA,CAAAF,KAAA;QACAD,OAAA,CAAAC,KAAA,cAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA,GACAG,OAAA;QACA,KAAAf,SAAA;MACA;IACA;IACA;IACAgB,iBAAAtB,KAAA;MACA,MAAAuB,QAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;MACA,OAAAA,QAAA,CAAAvB,KAAA;IACA;;IACA;IACAwB,eAAAC,YAAA;MACA,MAAAf,UAAA,QAAAN,MAAA,CAAAO,MAAA,CAAAC,EAAA;MACA,MAAAT,aAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,aAAA;MACA;QACAb,IAAA;QAAA;QACAqB,MAAA;UACAD,UAAA,EAAAA,UAAA;UAAA;UACAe,YAAA,EAAAA,YAAA;UAAA;UACAtB,aAAA,EAAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}