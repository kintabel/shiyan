{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Registration',\n  data() {\n    return {\n      doctor: null,\n      shiftType: this.$route.query.shiftType,\n      currentHour: new Date().getHours(),\n      selectedTimeSlot: '',\n      availableTimeSlots: [],\n      isLoading: true\n    };\n  },\n  computed: {\n    isValidTime() {\n      const isDayTime = this.currentHour >= 8 && this.currentHour < 18;\n      if (this.shiftType === 'DAY') {\n        return isDayTime;\n      } else {\n        return !isDayTime;\n      }\n    },\n    timeRangeHint() {\n      return this.shiftType == 'DAY' ? '白班时间段: 9:00-12:00, 14:00-18:00' : '夜班时间段: 18:00-23:00, 0:00-8:00';\n    },\n    invalidTimeMessage() {\n      const isDayTime = this.currentHour >= 8 && this.currentHour < 18;\n      return this.shiftType == 'DAY' ? isDayTime ? '' : '当前非白天时段(8:00-18:00)，无法预约白班医生' : !isDayTime ? '' : '当前非夜间时段(18:00-次日8:00)，无法预约夜班医生';\n    }\n  },\n  created() {\n    const doctorId = this.$route.params.doctorId;\n    if (doctorId) {\n      this.fetchDoctorInfo(doctorId).then(() => {\n        this.generateTimeSlots();\n      });\n    }\n  },\n  methods: {\n    generateTimeSlots() {\n      if (this.shiftType === 1) {\n        this.availableTimeSlots = [{\n          time: '09:00-10:00',\n          price: this.getPrice(true)\n        }, {\n          time: '10:00-11:00',\n          price: this.getPrice(true)\n        }, {\n          time: '11:00-12:00',\n          price: this.getPrice(true)\n        }, {\n          time: '14:00-15:00',\n          price: this.getPrice(true)\n        }, {\n          time: '15:00-16:00',\n          price: this.getPrice(true)\n        }, {\n          time: '16:00-17:00',\n          price: this.getPrice(true)\n        }, {\n          time: '17:00-18:00',\n          price: this.getPrice(true)\n        }];\n      } else {\n        this.availableTimeSlots = [{\n          time: '18:00-19:00',\n          price: this.getPrice(false)\n        }, {\n          time: '19:00-20:00',\n          price: this.getPrice(false)\n        }, {\n          time: '20:00-21:00',\n          price: this.getPrice(false)\n        }, {\n          time: '21:00-22:00',\n          price: this.getPrice(false)\n        }, {\n          time: '22:00-23:00',\n          price: this.getPrice(false)\n        }, {\n          time: '23:00-00:00',\n          price: this.getPrice(false)\n        }, {\n          time: '00:00-01:00',\n          price: this.getPrice(false)\n        }];\n      }\n      this.isLoading = false;\n    },\n    isTimeSlotAvailable(slot) {\n      const now = new Date();\n      const currentHours = now.getHours();\n      const currentMinutes = now.getMinutes();\n      const slotStart = parseInt(slot.time.split(':')[0]);\n      const slotEnd = parseInt(slot.time.split('-')[1].split(':')[0]);\n      if (currentHours > slotEnd) return false;\n      if (currentHours === slotEnd && currentMinutes > 0) return false;\n      if (currentHours < slotStart) return false;\n      if (currentHours === slotStart && currentMinutes > 0) return false;\n      return true;\n    },\n    submitRegistration() {\n      if (!this.selectedTimeSlot) {\n        this.$message.warning('请选择预约时间段');\n        return;\n      }\n      this.$router.push({\n        name: 'SubmitRegistration',\n        query: {\n          doctorId: this.doctor.id,\n          timeSlot: this.selectedTimeSlot,\n          price: this.availableTimeSlots.find(s => s.time === this.selectedTimeSlot).price,\n          shiftType: this.shiftType,\n          status: this.$route.query.status\n        }\n      });\n    },\n    fetchDoctorInfo(doctorId) {\n      return this.$request.get('/doctor/selectDoctorById', {\n        params: {\n          doctorId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctor = response.data;\n        } else {\n          console.error('获取医生详细信息失败:', response.data);\n          this.$message.error('获取医生详细信息失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生详细信息失败:', error);\n        this.$message.error('获取医生详细信息失败，请稍后重试');\n      });\n    },\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    },\n    getPrice(isMorning) {\n      if (!this.doctor) return 0;\n      switch (this.doctor.status) {\n        case 1:\n          return isMorning ? 50 : 60;\n        case 2:\n          return isMorning ? 80 : 90;\n        case 3:\n          return isMorning ? 100 : 110;\n        case 4:\n          return isMorning ? 150 : 160;\n        case 5:\n          return isMorning ? 60 : 70;\n        default:\n          return 0;\n      }\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","doctor","shiftType","$route","query","currentHour","Date","getHours","selectedTimeSlot","availableTimeSlots","isLoading","computed","isValidTime","isDayTime","timeRangeHint","invalidTimeMessage","created","doctorId","params","fetchDoctorInfo","then","generateTimeSlots","methods","time","price","getPrice","isTimeSlotAvailable","slot","now","currentHours","currentMinutes","getMinutes","slotStart","parseInt","split","slotEnd","submitRegistration","$message","warning","$router","push","id","timeSlot","find","s","status","$request","get","response","console","error","catch","getDoctorTitle","isMorning"],"sources":["src/views/user/Registration.vue"],"sourcesContent":["<template>\r\n  <div class=\"registration-page\">\r\n    <div class=\"doctor-info\" v-if=\"doctor\">\r\n      <h2>{{ doctor.name }} - {{ getDoctorTitle(doctor.status) }}</h2>\r\n      <p>{{ doctor.introduction }}</p>\r\n      <el-tag :type=\"shiftType === 1? 'success' : 'warning'\">\r\n        {{ shiftType === 1? '白班医生' : '夜班医生' }}\r\n      </el-tag>\r\n    </div>\r\n    <div class=\"time-slot-selection\" v-if=\"doctor\">\r\n      <h2>选择预约时间段</h2>\r\n      <div v-if=\"isValidTime\">\r\n        <el-alert\r\n            :title=\"timeRangeHint\"\r\n            type=\"info\"\r\n            show-icon\r\n            class=\"time-hint\"\r\n        />\r\n        <el-radio-group v-model=\"selectedTimeSlot\">\r\n          <el-radio-button\r\n              v-for=\"(slot, index) in availableTimeSlots\"\r\n              :key=\"index\"\r\n              :label=\"slot.time\"\r\n              :disabled=\"!isTimeSlotAvailable(slot)\"\r\n          >\r\n            {{ slot.time }} ({{ slot.price }}元)\r\n          </el-radio-button>\r\n        </el-radio-group>\r\n        <el-button\r\n            type=\"primary\"\r\n            @click=\"submitRegistration\"\r\n            :disabled=\"!selectedTimeSlot\"\r\n            class=\"submit-btn\"\r\n        >\r\n          确认预约\r\n        </el-button>\r\n      </div>\r\n      <div v-else class=\"invalid-time\">\r\n        <el-alert\r\n            :title=\"invalidTimeMessage\"\r\n            type=\"error\"\r\n            show-icon\r\n        />\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>未获取到医生信息，请稍后重试。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Registration',\r\n  data() {\r\n    return {\r\n      doctor: null,\r\n      shiftType: this.$route.query.shiftType,\r\n      currentHour: new Date().getHours(),\r\n      selectedTimeSlot: '',\r\n      availableTimeSlots: [],\r\n      isLoading: true\r\n    }\r\n  },\r\n  computed: {\r\n    isValidTime() {\r\n      const isDayTime = this.currentHour >= 8 && this.currentHour < 18\r\n      if (this.shiftType === 'DAY') {\r\n        return isDayTime\r\n      } else {\r\n        return!isDayTime\r\n      }\r\n    },\r\n    timeRangeHint() {\r\n      return this.shiftType == 'DAY'\r\n          ? '白班时间段: 9:00-12:00, 14:00-18:00'\r\n          : '夜班时间段: 18:00-23:00, 0:00-8:00'\r\n    },\r\n    invalidTimeMessage() {\r\n      const isDayTime = this.currentHour >= 8 && this.currentHour < 18\r\n      return this.shiftType == 'DAY'\r\n          ? (isDayTime? '' : '当前非白天时段(8:00-18:00)，无法预约白班医生')\r\n          : (!isDayTime? '' : '当前非夜间时段(18:00-次日8:00)，无法预约夜班医生')\r\n    }\r\n  },\r\n  created() {\r\n    const doctorId = this.$route.params.doctorId\r\n    if (doctorId) {\r\n      this.fetchDoctorInfo(doctorId).then(() => {\r\n        this.generateTimeSlots()\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    generateTimeSlots() {\r\n      if (this.shiftType === 1) {\r\n        this.availableTimeSlots = [\r\n          { time: '09:00-10:00', price: this.getPrice(true) },\r\n          { time: '10:00-11:00', price: this.getPrice(true) },\r\n          { time: '11:00-12:00', price: this.getPrice(true) },\r\n          { time: '14:00-15:00', price: this.getPrice(true) },\r\n          { time: '15:00-16:00', price: this.getPrice(true) },\r\n          { time: '16:00-17:00', price: this.getPrice(true) },\r\n          { time: '17:00-18:00', price: this.getPrice(true) }\r\n        ]\r\n      } else {\r\n        this.availableTimeSlots = [\r\n          { time: '18:00-19:00', price: this.getPrice(false) },\r\n          { time: '19:00-20:00', price: this.getPrice(false) },\r\n          { time: '20:00-21:00', price: this.getPrice(false) },\r\n          { time: '21:00-22:00', price: this.getPrice(false) },\r\n          { time: '22:00-23:00', price: this.getPrice(false) },\r\n          { time: '23:00-00:00', price: this.getPrice(false) },\r\n          { time: '00:00-01:00', price: this.getPrice(false) }\r\n        ]\r\n      }\r\n      this.isLoading = false\r\n    },\r\n    isTimeSlotAvailable(slot) {\r\n      const now = new Date()\r\n      const currentHours = now.getHours()\r\n      const currentMinutes = now.getMinutes()\r\n      const slotStart = parseInt(slot.time.split(':')[0])\r\n      const slotEnd = parseInt(slot.time.split('-')[1].split(':')[0])\r\n      if (currentHours > slotEnd) return false\r\n      if (currentHours === slotEnd && currentMinutes > 0) return false\r\n      if (currentHours < slotStart) return false\r\n      if (currentHours === slotStart && currentMinutes > 0) return false\r\n      return true\r\n    },\r\n    submitRegistration() {\r\n      if (!this.selectedTimeSlot) {\r\n        this.$message.warning('请选择预约时间段')\r\n        return\r\n      }\r\n      this.$router.push({\r\n        name: 'SubmitRegistration',\r\n        query: {\r\n          doctorId: this.doctor.id,\r\n          timeSlot: this.selectedTimeSlot,\r\n          price: this.availableTimeSlots.find(s => s.time === this.selectedTimeSlot).price,\r\n          shiftType: this.shiftType,\r\n          status: this.$route.query.status\r\n        }\r\n      })\r\n    },\r\n    fetchDoctorInfo(doctorId) {\r\n      return this.$request.get('/doctor/selectDoctorById', {\r\n        params: { doctorId }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data\r\n            } else {\r\n              console.error('获取医生详细信息失败:', response.data)\r\n              this.$message.error('获取医生详细信息失败，请稍后重试')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生详细信息失败:', error)\r\n            this.$message.error('获取医生详细信息失败，请稍后重试')\r\n          })\r\n    },\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    },\r\n    getPrice(isMorning) {\r\n      if (!this.doctor) return 0\r\n      switch (this.doctor.status) {\r\n        case 1: return isMorning? 50 : 60\r\n        case 2: return isMorning? 80 : 90\r\n        case 3: return isMorning? 100 : 110\r\n        case 4: return isMorning? 150 : 160\r\n        case 5: return isMorning? 60 : 70\r\n        default: return 0\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.time-hint,\r\n.invalid-time {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.submit-btn {\r\n  margin-top: 20px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}