{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport dayjs from 'dayjs';\nimport { getSchedulesByDepartment, addSchedule, updateSchedule, deleteSchedule } from '@/api/scheduleApi';\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Schedule',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\n      loading: false,\n      hospitalId: null,\n      departments: [],\n      selectedDepartment: null,\n      doctors: [],\n      currentWeek: this.getNextWeekStartDate(),\n      weekDays: [],\n      scheduleData: [],\n      leaveInfo: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      // 新增的请假详情相关数据\n      leaveDetailVisible: false,\n      currentLeave: null,\n      currentDoctorName: ''\n    };\n  },\n  created() {\n    this.fetchDepartments();\n    this.generateWeekDays();\n  },\n  methods: {\n    // 原有方法保持不变...\n    getNextWeekStartDate() {\n      const today = new Date();\n      const nextMonday = new Date(today);\n      nextMonday.setDate(today.getDate() + ((1 + 7 - today.getDay()) % 7 || 7));\n      return nextMonday;\n    },\n    generateWeekDays() {\n      const startDate = new Date(this.currentWeek);\n      this.weekDays = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(startDate);\n        date.setDate(startDate.getDate() + i);\n        this.weekDays.push({\n          date: parseTime(date, '{y}-{m}-{d}'),\n          label: parseTime(date, '{m}-{d} 周') + ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\n        });\n      }\n    },\n    fetchDepartments() {\n      this.$request.get('/hospital/departmentList', {\n        params: {\n          userId: this.user.id\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.departments = response.data;\n        } else {\n          this.$message.error(response.data.message || '获取科室列表失败');\n        }\n      });\n    },\n    async handleDepartmentClick(data) {\n      this.selectedDepartment = data;\n      await this.fetchDoctors(data.id);\n      await this.fetchSchedules();\n      await this.fetchLeaveInfo();\n    },\n    fetchDoctors(departmentId) {\n      this.$request.get('/doctor/selectDocByAdminIdAndDepId', {\n        params: {\n          userId: this.user.id,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.doctors = response.data;\n          this.prepareScheduleData();\n        } else {\n          this.$message.error(response.data.message || '获取医生列表失败');\n        }\n      });\n    },\n    prepareScheduleData() {\n      this.scheduleData = this.doctors.map(doctor => {\n        const schedules = {};\n        this.weekDays.forEach(day => {\n          schedules[day.date] = null;\n        });\n        return {\n          doctorId: doctor.id,\n          doctorName: doctor.name,\n          schedules: schedules\n        };\n      });\n    },\n    async fetchSchedules() {\n      if (!this.selectedDepartment) return;\n      this.loading = true;\n      this.generateWeekDays();\n      this.prepareScheduleData();\n      this.fetchLeaveInfo();\n      try {\n        const startDate = new Date(this.currentWeek);\n        const endDate = new Date(startDate);\n        endDate.setDate(startDate.getDate() + 6);\n        const response = await getSchedulesByDepartment(this.user.id, this.selectedDepartment.id, startDate, endDate);\n        response.data.forEach(schedule => {\n          const scheduleDate = parseTime(schedule.scheduleDate, '{y}-{m}-{d}');\n          const doctorSchedule = this.scheduleData.find(item => item.doctorId === schedule.doctorId);\n          if (doctorSchedule) {\n            doctorSchedule.schedules[scheduleDate] = schedule.shift_type;\n          }\n        });\n      } catch (error) {\n        console.error('获取排班信息失败:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchLeaveInfo() {\n      if (!this.selectedDepartment) return;\n      try {\n        const startDate = new Date(this.currentWeek);\n        const endDate = new Date(startDate);\n        endDate.setDate(startDate.getDate() + 6);\n        const response = await this.$request.get('/api/schedule/leave/list', {\n          params: {\n            hospitalAdminId: this.user.id,\n            departmentId: this.selectedDepartment.id,\n            startDate: startDate.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0]\n          }\n        });\n        if (response.code == 200) {\n          this.leaveInfo = response.data || [];\n        } else {\n          this.$message.error(response.message || '获取请假信息失败');\n        }\n      } catch (error) {\n        console.error('获取请假信息失败:', error);\n        this.$message.error('获取请假信息失败');\n      }\n    },\n    hasLeaveInfo(doctorId) {\n      return this.leaveInfo.some(leave => leave.doctorId === doctorId);\n    },\n    getLeaveInfo(doctorId) {\n      return this.leaveInfo.filter(leave => leave.doctorId === doctorId);\n    },\n    formatLeaveDate(date) {\n      return dayjs(date).format('MM-DD');\n    },\n    formatDateTime(date) {\n      return dayjs(date).format('YYYY-MM-DD HH:mm:ss');\n    },\n    getLeaveTypeName(type) {\n      const map = {\n        personal: '事假',\n        sick: '病假',\n        annual: '年假',\n        other: '其他'\n      };\n      return map[type] || type;\n    },\n    getLeaveTagType(status) {\n      const map = {\n        PENDING: 'warning',\n        APPROVED: 'success',\n        REJECTED: 'danger',\n        CANCELLED: 'info'\n      };\n      return map[status] || '';\n    },\n    getLeaveStatusName(status) {\n      const map = {\n        PENDING: '待审批',\n        APPROVED: '已通过',\n        REJECTED: '已拒绝',\n        CANCELLED: '已取消'\n      };\n      return map[status] || status;\n    },\n    async handleShiftChange(doctorId, date, shiftType) {\n      try {\n        const existingSchedule = await this.findExistingSchedule(doctorId, date);\n        if (shiftType) {\n          if (existingSchedule) {\n            await updateSchedule({\n              id: existingSchedule.id,\n              shift_type: shiftType\n            });\n          } else {\n            await addSchedule({\n              hospitalId: this.user.id,\n              departmentId: this.selectedDepartment.id,\n              doctorId: doctorId,\n              scheduleDate: date,\n              shiftType: shiftType,\n              fatigueScore: 0\n            });\n          }\n        } else {\n          if (existingSchedule) {\n            await deleteSchedule(existingSchedule.id);\n          }\n        }\n        this.$message.success('排班更新成功');\n      } catch (error) {\n        console.error('更新排班失败:', error);\n        this.$message.error('排班更新失败');\n      }\n    },\n    async findExistingSchedule(doctorId, date) {\n      try {\n        const response = await getSchedulesByDepartment(this.user.id, this.selectedDepartment.id, new Date(date));\n        return response.data.find(item => item.doctorId === doctorId && parseTime(item.scheduleDate, '{y}-{m}-{d}') === date);\n      } catch (error) {\n        console.error('查找排班记录失败:', error);\n        return null;\n      }\n    },\n    showNextWeek() {\n      const nextWeek = new Date(this.currentWeek);\n      nextWeek.setDate(nextWeek.getDate() + 7);\n      this.currentWeek = nextWeek;\n      this.fetchSchedules();\n      this.fetchLeaveInfo();\n    },\n    // 新增方法：显示请假详情\n    showLeaveDetail(leave, doctorName) {\n      this.currentLeave = leave;\n      this.currentDoctorName = doctorName;\n      this.leaveDetailVisible = true;\n    },\n    // 新增方法：处理请假审批\n    async handleLeaveAction(action) {\n      try {\n        this.loading = true;\n        const response = await this.$request.post('/api/schedule/leave/approve', {\n          id: this.currentLeave.id,\n          status: action\n        });\n        if (response.code === 200) {\n          this.$message.success(`请假${action === 'APPROVED' ? '通过' : '拒绝'}成功`);\n          await this.fetchLeaveInfo(); // 重新加载请假信息\n          this.leaveDetailVisible = false; // 关闭对话框\n        } else {\n          this.$message.error(response.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('处理请假失败:', error);\n        this.$message.error('操作失败');\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["dayjs","getSchedulesByDepartment","addSchedule","updateSchedule","deleteSchedule","parseTime","name","data","user","JSON","parse","localStorage","getItem","loading","hospitalId","departments","selectedDepartment","doctors","currentWeek","getNextWeekStartDate","weekDays","scheduleData","leaveInfo","defaultProps","children","label","leaveDetailVisible","currentLeave","currentDoctorName","created","fetchDepartments","generateWeekDays","methods","today","Date","nextMonday","setDate","getDate","getDay","startDate","i","date","push","$request","get","params","userId","id","then","response","code","$message","error","message","handleDepartmentClick","fetchDoctors","fetchSchedules","fetchLeaveInfo","departmentId","prepareScheduleData","map","doctor","schedules","forEach","day","doctorId","doctorName","endDate","schedule","scheduleDate","doctorSchedule","find","item","shift_type","console","hospitalAdminId","toISOString","split","hasLeaveInfo","some","leave","getLeaveInfo","filter","formatLeaveDate","format","formatDateTime","getLeaveTypeName","type","personal","sick","annual","other","getLeaveTagType","status","PENDING","APPROVED","REJECTED","CANCELLED","getLeaveStatusName","handleShiftChange","shiftType","existingSchedule","findExistingSchedule","fatigueScore","success","showNextWeek","nextWeek","showLeaveDetail","handleLeaveAction","action","post"],"sources":["src/views/hospitalAdmin/Scheduling.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-card>\r\n      <!-- 原有头部代码保持不变 -->\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>医生排班管理</span>\r\n        <el-button\r\n            style=\"float: right; padding: 3px 0\"\r\n            type=\"text\"\r\n            @click=\"showNextWeek\"\r\n        >\r\n          排下一周班次\r\n        </el-button>\r\n      </div>\r\n\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"6\">\r\n          <el-card>\r\n            <div slot=\"header\" class=\"clearfix\">\r\n              <span>科室列表</span>\r\n            </div>\r\n            <el-tree\r\n                :data=\"departments\"\r\n                :props=\"defaultProps\"\r\n                @node-click=\"handleDepartmentClick\"\r\n            ></el-tree>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :span=\"18\">\r\n          <el-card>\r\n            <div slot=\"header\" class=\"clearfix\">\r\n              <span>排班表 - {{ selectedDepartment ? selectedDepartment.name : '请选择科室' }}</span>\r\n              <div style=\"float: right\">\r\n                <el-date-picker\r\n                    v-model=\"currentWeek\"\r\n                    type=\"week\"\r\n                    format=\"yyyy 第 WW 周\"\r\n                    placeholder=\"选择周\"\r\n                    @change=\"fetchSchedules\"\r\n                >\r\n                </el-date-picker>\r\n              </div>\r\n            </div>\r\n\r\n            <el-table\r\n                v-loading=\"loading\"\r\n                :data=\"scheduleData\"\r\n                border\r\n                style=\"width: 100%\"\r\n            >\r\n              <!-- 原有表格列保持不变 -->\r\n              <el-table-column prop=\"doctorName\" label=\"医生\" width=\"150\" fixed>\r\n                <template slot-scope=\"scope\">\r\n                  {{ scope.row.doctorName }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column\r\n                  v-for=\"day in weekDays\"\r\n                  :key=\"day.date\"\r\n                  :label=\"day.label\"\r\n                  width=\"150\"\r\n              >\r\n                <template slot-scope=\"scope\">\r\n                  <el-select\r\n                      v-model=\"scope.row.schedules[day.date]\"\r\n                      placeholder=\"班次\"\r\n                      size=\"mini\"\r\n                      @change=\"handleShiftChange(scope.row.doctorId, day.date, $event)\"\r\n                  >\r\n                    <el-option label=\"白班\" value=\"DAY\"></el-option>\r\n                    <el-option label=\"夜班\" value=\"NIGHT\"></el-option>\r\n                    <el-option label=\"休息\" :value=\"null\"></el-option>\r\n                  </el-select>\r\n                </template>\r\n              </el-table-column>\r\n\r\n              <!-- 修改后的请假信息列 -->\r\n              <el-table-column label=\"请假信息\" width=\"180\" fixed=\"right\">\r\n                <template slot-scope=\"scope\">\r\n                  <div v-if=\"hasLeaveInfo(scope.row.doctorId)\" class=\"leave-info\">\r\n                    <el-tag\r\n                        v-for=\"leave in getLeaveInfo(scope.row.doctorId)\"\r\n                        :key=\"leave.id\"\r\n                        :type=\"getLeaveTagType(leave.status)\"\r\n                        size=\"mini\"\r\n                        style=\"margin-right: 5px; margin-bottom: 5px; cursor: pointer;\"\r\n                        @click=\"showLeaveDetail(leave, scope.row.doctorName)\"\r\n                    >\r\n                      {{ formatLeaveDate(leave.leaveDate) }}: {{ getLeaveTypeName(leave.type) }}\r\n                    </el-tag>\r\n                  </div>\r\n                  <div v-else class=\"no-leave\">\r\n                    无请假\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </el-card>\r\n\r\n    <!-- 请假详情对话框 -->\r\n    <el-dialog\r\n        title=\"请假详情\"\r\n        :visible.sync=\"leaveDetailVisible\"\r\n        width=\"500px\"\r\n        :close-on-click-modal=\"false\"\r\n    >\r\n      <div v-if=\"currentLeave\" class=\"leave-detail\">\r\n        <el-descriptions :column=\"1\" border>\r\n          <el-descriptions-item label=\"医生姓名\">{{ currentDoctorName }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"请假日期\">{{ formatLeaveDate(currentLeave.leaveDate) }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"请假类型\">{{ getLeaveTypeName(currentLeave.leaveType) }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"请假原因\">{{ currentLeave.reason }}</el-descriptions-item>\r\n          <el-descriptions-item label=\"当前状态\">\r\n            <el-tag :type=\"getLeaveTagType(currentLeave.status)\" size=\"small\">\r\n              {{ getLeaveStatusName(currentLeave.status) }}\r\n            </el-tag>\r\n          </el-descriptions-item>\r\n          <el-descriptions-item label=\"申请时间\">{{ formatDateTime(currentLeave.createTime) }}</el-descriptions-item>\r\n        </el-descriptions>\r\n\r\n        <div v-if=\"currentLeave.status === 'PENDING'\" class=\"leave-actions\">\r\n          <el-button type=\"success\" @click=\"handleLeaveAction('APPROVED')\">通过申请</el-button>\r\n          <el-button type=\"danger\" @click=\"handleLeaveAction('REJECTED')\">拒绝申请</el-button>\r\n        </div>\r\n      </div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"leaveDetailVisible = false\">关 闭</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport dayjs from 'dayjs'\r\nimport {\r\n  getSchedulesByDepartment,\r\n  addSchedule,\r\n  updateSchedule,\r\n  deleteSchedule\r\n} from '@/api/scheduleApi'\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Schedule',\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\r\n      loading: false,\r\n      hospitalId: null,\r\n      departments: [],\r\n      selectedDepartment: null,\r\n      doctors: [],\r\n      currentWeek: this.getNextWeekStartDate(),\r\n      weekDays: [],\r\n      scheduleData: [],\r\n      leaveInfo: [],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'name'\r\n      },\r\n      // 新增的请假详情相关数据\r\n      leaveDetailVisible: false,\r\n      currentLeave: null,\r\n      currentDoctorName: ''\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDepartments()\r\n    this.generateWeekDays()\r\n  },\r\n  methods: {\r\n    // 原有方法保持不变...\r\n    getNextWeekStartDate() {\r\n      const today = new Date()\r\n      const nextMonday = new Date(today)\r\n      nextMonday.setDate(today.getDate() + ((1 + 7 - today.getDay()) % 7 || 7))\r\n      return nextMonday\r\n    },\r\n    generateWeekDays() {\r\n      const startDate = new Date(this.currentWeek)\r\n      this.weekDays = []\r\n      for (let i = 0; i < 7; i++) {\r\n        const date = new Date(startDate)\r\n        date.setDate(startDate.getDate() + i)\r\n        this.weekDays.push({\r\n          date: parseTime(date, '{y}-{m}-{d}'),\r\n          label: parseTime(date, '{m}-{d} 周') + ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\r\n        })\r\n      }\r\n    },\r\n    fetchDepartments() {\r\n      this.$request.get('/hospital/departmentList', {\r\n        params: {\r\n          userId: this.user.id\r\n        }\r\n      }).then(response => {\r\n        if (response.code == 200) {\r\n          this.departments = response.data\r\n        } else {\r\n          this.$message.error(response.data.message || '获取科室列表失败')\r\n        }\r\n      })\r\n    },\r\n    async handleDepartmentClick(data) {\r\n      this.selectedDepartment = data\r\n      await this.fetchDoctors(data.id)\r\n      await this.fetchSchedules()\r\n      await this.fetchLeaveInfo()\r\n    },\r\n    fetchDoctors(departmentId) {\r\n      this.$request.get('/doctor/selectDocByAdminIdAndDepId', {\r\n        params: {\r\n          userId: this.user.id,\r\n          departmentId: departmentId\r\n        }\r\n      }).then(response => {\r\n        if (response.code == 200) {\r\n          this.doctors = response.data\r\n          this.prepareScheduleData()\r\n        } else {\r\n          this.$message.error(response.data.message || '获取医生列表失败')\r\n        }\r\n      })\r\n    },\r\n    prepareScheduleData() {\r\n      this.scheduleData = this.doctors.map(doctor => {\r\n        const schedules = {}\r\n        this.weekDays.forEach(day => {\r\n          schedules[day.date] = null\r\n        })\r\n        return {\r\n          doctorId: doctor.id,\r\n          doctorName: doctor.name,\r\n          schedules: schedules\r\n        }\r\n      })\r\n    },\r\n    async fetchSchedules() {\r\n      if (!this.selectedDepartment) return\r\n\r\n      this.loading = true\r\n      this.generateWeekDays()\r\n      this.prepareScheduleData()\r\n      this.fetchLeaveInfo()\r\n      try {\r\n        const startDate = new Date(this.currentWeek)\r\n        const endDate = new Date(startDate)\r\n        endDate.setDate(startDate.getDate() + 6)\r\n\r\n        const response = await getSchedulesByDepartment(\r\n            this.user.id,\r\n            this.selectedDepartment.id,\r\n            startDate,\r\n            endDate\r\n        )\r\n\r\n        response.data.forEach(schedule => {\r\n          const scheduleDate = parseTime(schedule.scheduleDate, '{y}-{m}-{d}')\r\n          const doctorSchedule = this.scheduleData.find(\r\n              item => item.doctorId === schedule.doctorId\r\n          )\r\n          if (doctorSchedule) {\r\n            doctorSchedule.schedules[scheduleDate] = schedule.shift_type\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.error('获取排班信息失败:', error)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    async fetchLeaveInfo() {\r\n      if (!this.selectedDepartment) return;\r\n\r\n      try {\r\n        const startDate = new Date(this.currentWeek)\r\n        const endDate = new Date(startDate)\r\n        endDate.setDate(startDate.getDate() + 6)\r\n\r\n        const response = await this.$request.get('/api/schedule/leave/list', {\r\n          params: {\r\n            hospitalAdminId: this.user.id,\r\n            departmentId: this.selectedDepartment.id,\r\n            startDate: startDate.toISOString().split('T')[0],\r\n            endDate: endDate.toISOString().split('T')[0]\r\n          }\r\n        });\r\n\r\n        if (response.code == 200) {\r\n          this.leaveInfo = response.data || [];\r\n        } else {\r\n          this.$message.error(response.message || '获取请假信息失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取请假信息失败:', error);\r\n        this.$message.error('获取请假信息失败');\r\n      }\r\n    },\r\n    hasLeaveInfo(doctorId) {\r\n      return this.leaveInfo.some(leave => leave.doctorId === doctorId);\r\n    },\r\n    getLeaveInfo(doctorId) {\r\n      return this.leaveInfo.filter(leave => leave.doctorId === doctorId);\r\n    },\r\n    formatLeaveDate(date) {\r\n      return dayjs(date).format('MM-DD');\r\n    },\r\n    formatDateTime(date) {\r\n      return dayjs(date).format('YYYY-MM-DD HH:mm:ss');\r\n    },\r\n    getLeaveTypeName(type) {\r\n      const map = {\r\n        personal: '事假',\r\n        sick: '病假',\r\n        annual: '年假',\r\n        other: '其他'\r\n      };\r\n      return map[type] || type;\r\n    },\r\n    getLeaveTagType(status) {\r\n      const map = {\r\n        PENDING: 'warning',\r\n        APPROVED: 'success',\r\n        REJECTED: 'danger',\r\n        CANCELLED: 'info'\r\n      };\r\n      return map[status] || '';\r\n    },\r\n    getLeaveStatusName(status) {\r\n      const map = {\r\n        PENDING: '待审批',\r\n        APPROVED: '已通过',\r\n        REJECTED: '已拒绝',\r\n        CANCELLED: '已取消'\r\n      };\r\n      return map[status] || status;\r\n    },\r\n    async handleShiftChange(doctorId, date, shiftType) {\r\n      try {\r\n        const existingSchedule = await this.findExistingSchedule(doctorId, date)\r\n\r\n        if (shiftType) {\r\n          if (existingSchedule) {\r\n            await updateSchedule({\r\n              id: existingSchedule.id,\r\n              shift_type: shiftType\r\n            })\r\n          } else {\r\n            await addSchedule({\r\n              hospitalId: this.user.id,\r\n              departmentId: this.selectedDepartment.id,\r\n              doctorId: doctorId,\r\n              scheduleDate: date,\r\n              shiftType: shiftType,\r\n              fatigueScore: 0\r\n            })\r\n          }\r\n        } else {\r\n          if (existingSchedule) {\r\n            await deleteSchedule(existingSchedule.id)\r\n          }\r\n        }\r\n\r\n        this.$message.success('排班更新成功')\r\n      } catch (error) {\r\n        console.error('更新排班失败:', error)\r\n        this.$message.error('排班更新失败')\r\n      }\r\n    },\r\n    async findExistingSchedule(doctorId, date) {\r\n      try {\r\n        const response = await getSchedulesByDepartment(\r\n            this.user.id,\r\n            this.selectedDepartment.id,\r\n            new Date(date))\r\n        return response.data.find(\r\n            item => item.doctorId === doctorId &&\r\n                parseTime(item.scheduleDate, '{y}-{m}-{d}') === date\r\n        )\r\n      } catch (error) {\r\n        console.error('查找排班记录失败:', error)\r\n        return null\r\n      }\r\n    },\r\n    showNextWeek() {\r\n      const nextWeek = new Date(this.currentWeek)\r\n      nextWeek.setDate(nextWeek.getDate() + 7)\r\n      this.currentWeek = nextWeek\r\n      this.fetchSchedules()\r\n      this.fetchLeaveInfo()\r\n    },\r\n\r\n    // 新增方法：显示请假详情\r\n    showLeaveDetail(leave, doctorName) {\r\n      this.currentLeave = leave;\r\n      this.currentDoctorName = doctorName;\r\n      this.leaveDetailVisible = true;\r\n    },\r\n\r\n    // 新增方法：处理请假审批\r\n    async handleLeaveAction(action) {\r\n      try {\r\n        this.loading = true;\r\n        const response = await this.$request.post('/api/schedule/leave/approve', {\r\n          id: this.currentLeave.id,\r\n          status: action\r\n        });\r\n\r\n        if (response.code === 200) {\r\n          this.$message.success(`请假${action === 'APPROVED' ? '通过' : '拒绝'}成功`);\r\n          await this.fetchLeaveInfo(); // 重新加载请假信息\r\n          this.leaveDetailVisible = false; // 关闭对话框\r\n        } else {\r\n          this.$message.error(response.message || '操作失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('处理请假失败:', error);\r\n        this.$message.error('操作失败');\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.clearfix:before,\r\n.clearfix:after {\r\n  display: table;\r\n  content: \"\";\r\n}\r\n.clearfix:after {\r\n  clear: both;\r\n}\r\n\r\n.leave-info {\r\n  min-height: 40px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  padding: 5px 0;\r\n}\r\n\r\n.no-leave {\r\n  color: #999;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n.app-container {\r\n  padding: 20px;\r\n}\r\n\r\n/* 新增样式 */\r\n.leave-detail {\r\n  padding: 10px;\r\n}\r\n\r\n.leave-actions {\r\n  margin-top: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.leave-actions .el-button {\r\n  margin: 0 10px;\r\n}\r\n</style>"],"mappings":";AAyIA,OAAAA,KAAA;AACA,SACAC,wBAAA,EACAC,WAAA,EACAC,cAAA,EACAC,cAAA,QACA;AACA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,OAAA;MACAC,UAAA;MACAC,WAAA;MACAC,kBAAA;MACAC,OAAA;MACAC,WAAA,OAAAC,oBAAA;MACAC,QAAA;MACAC,YAAA;MACAC,SAAA;MACAC,YAAA;QACAC,QAAA;QACAC,KAAA;MACA;MACA;MACAC,kBAAA;MACAC,YAAA;MACAC,iBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACA;IACAb,qBAAA;MACA,MAAAc,KAAA,OAAAC,IAAA;MACA,MAAAC,UAAA,OAAAD,IAAA,CAAAD,KAAA;MACAE,UAAA,CAAAC,OAAA,CAAAH,KAAA,CAAAI,OAAA,eAAAJ,KAAA,CAAAK,MAAA;MACA,OAAAH,UAAA;IACA;IACAJ,iBAAA;MACA,MAAAQ,SAAA,OAAAL,IAAA,MAAAhB,WAAA;MACA,KAAAE,QAAA;MACA,SAAAoB,CAAA,MAAAA,CAAA,MAAAA,CAAA;QACA,MAAAC,IAAA,OAAAP,IAAA,CAAAK,SAAA;QACAE,IAAA,CAAAL,OAAA,CAAAG,SAAA,CAAAF,OAAA,KAAAG,CAAA;QACA,KAAApB,QAAA,CAAAsB,IAAA;UACAD,IAAA,EAAApC,SAAA,CAAAoC,IAAA;UACAhB,KAAA,EAAApB,SAAA,CAAAoC,IAAA,qDAAAA,IAAA,CAAAH,MAAA;QACA;MACA;IACA;IACAR,iBAAA;MACA,KAAAa,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAC,MAAA,OAAAtC,IAAA,CAAAuC;QACA;MACA,GAAAC,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,IAAA;UACA,KAAAnC,WAAA,GAAAkC,QAAA,CAAA1C,IAAA;QACA;UACA,KAAA4C,QAAA,CAAAC,KAAA,CAAAH,QAAA,CAAA1C,IAAA,CAAA8C,OAAA;QACA;MACA;IACA;IACA,MAAAC,sBAAA/C,IAAA;MACA,KAAAS,kBAAA,GAAAT,IAAA;MACA,WAAAgD,YAAA,CAAAhD,IAAA,CAAAwC,EAAA;MACA,WAAAS,cAAA;MACA,WAAAC,cAAA;IACA;IACAF,aAAAG,YAAA;MACA,KAAAf,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAC,MAAA,OAAAtC,IAAA,CAAAuC,EAAA;UACAW,YAAA,EAAAA;QACA;MACA,GAAAV,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,IAAA;UACA,KAAAjC,OAAA,GAAAgC,QAAA,CAAA1C,IAAA;UACA,KAAAoD,mBAAA;QACA;UACA,KAAAR,QAAA,CAAAC,KAAA,CAAAH,QAAA,CAAA1C,IAAA,CAAA8C,OAAA;QACA;MACA;IACA;IACAM,oBAAA;MACA,KAAAtC,YAAA,QAAAJ,OAAA,CAAA2C,GAAA,CAAAC,MAAA;QACA,MAAAC,SAAA;QACA,KAAA1C,QAAA,CAAA2C,OAAA,CAAAC,GAAA;UACAF,SAAA,CAAAE,GAAA,CAAAvB,IAAA;QACA;QACA;UACAwB,QAAA,EAAAJ,MAAA,CAAAd,EAAA;UACAmB,UAAA,EAAAL,MAAA,CAAAvD,IAAA;UACAwD,SAAA,EAAAA;QACA;MACA;IACA;IACA,MAAAN,eAAA;MACA,UAAAxC,kBAAA;MAEA,KAAAH,OAAA;MACA,KAAAkB,gBAAA;MACA,KAAA4B,mBAAA;MACA,KAAAF,cAAA;MACA;QACA,MAAAlB,SAAA,OAAAL,IAAA,MAAAhB,WAAA;QACA,MAAAiD,OAAA,OAAAjC,IAAA,CAAAK,SAAA;QACA4B,OAAA,CAAA/B,OAAA,CAAAG,SAAA,CAAAF,OAAA;QAEA,MAAAY,QAAA,SAAAhD,wBAAA,CACA,KAAAO,IAAA,CAAAuC,EAAA,EACA,KAAA/B,kBAAA,CAAA+B,EAAA,EACAR,SAAA,EACA4B,OACA;QAEAlB,QAAA,CAAA1C,IAAA,CAAAwD,OAAA,CAAAK,QAAA;UACA,MAAAC,YAAA,GAAAhE,SAAA,CAAA+D,QAAA,CAAAC,YAAA;UACA,MAAAC,cAAA,QAAAjD,YAAA,CAAAkD,IAAA,CACAC,IAAA,IAAAA,IAAA,CAAAP,QAAA,KAAAG,QAAA,CAAAH,QACA;UACA,IAAAK,cAAA;YACAA,cAAA,CAAAR,SAAA,CAAAO,YAAA,IAAAD,QAAA,CAAAK,UAAA;UACA;QACA;MACA,SAAArB,KAAA;QACAsB,OAAA,CAAAtB,KAAA,cAAAA,KAAA;MACA;QACA,KAAAvC,OAAA;MACA;IACA;IACA,MAAA4C,eAAA;MACA,UAAAzC,kBAAA;MAEA;QACA,MAAAuB,SAAA,OAAAL,IAAA,MAAAhB,WAAA;QACA,MAAAiD,OAAA,OAAAjC,IAAA,CAAAK,SAAA;QACA4B,OAAA,CAAA/B,OAAA,CAAAG,SAAA,CAAAF,OAAA;QAEA,MAAAY,QAAA,cAAAN,QAAA,CAAAC,GAAA;UACAC,MAAA;YACA8B,eAAA,OAAAnE,IAAA,CAAAuC,EAAA;YACAW,YAAA,OAAA1C,kBAAA,CAAA+B,EAAA;YACAR,SAAA,EAAAA,SAAA,CAAAqC,WAAA,GAAAC,KAAA;YACAV,OAAA,EAAAA,OAAA,CAAAS,WAAA,GAAAC,KAAA;UACA;QACA;QAEA,IAAA5B,QAAA,CAAAC,IAAA;UACA,KAAA5B,SAAA,GAAA2B,QAAA,CAAA1C,IAAA;QACA;UACA,KAAA4C,QAAA,CAAAC,KAAA,CAAAH,QAAA,CAAAI,OAAA;QACA;MACA,SAAAD,KAAA;QACAsB,OAAA,CAAAtB,KAAA,cAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACA0B,aAAAb,QAAA;MACA,YAAA3C,SAAA,CAAAyD,IAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAf,QAAA,KAAAA,QAAA;IACA;IACAgB,aAAAhB,QAAA;MACA,YAAA3C,SAAA,CAAA4D,MAAA,CAAAF,KAAA,IAAAA,KAAA,CAAAf,QAAA,KAAAA,QAAA;IACA;IACAkB,gBAAA1C,IAAA;MACA,OAAAzC,KAAA,CAAAyC,IAAA,EAAA2C,MAAA;IACA;IACAC,eAAA5C,IAAA;MACA,OAAAzC,KAAA,CAAAyC,IAAA,EAAA2C,MAAA;IACA;IACAE,iBAAAC,IAAA;MACA,MAAA3B,GAAA;QACA4B,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,KAAA;MACA;MACA,OAAA/B,GAAA,CAAA2B,IAAA,KAAAA,IAAA;IACA;IACAK,gBAAAC,MAAA;MACA,MAAAjC,GAAA;QACAkC,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;MACA;MACA,OAAArC,GAAA,CAAAiC,MAAA;IACA;IACAK,mBAAAL,MAAA;MACA,MAAAjC,GAAA;QACAkC,OAAA;QACAC,QAAA;QACAC,QAAA;QACAC,SAAA;MACA;MACA,OAAArC,GAAA,CAAAiC,MAAA,KAAAA,MAAA;IACA;IACA,MAAAM,kBAAAlC,QAAA,EAAAxB,IAAA,EAAA2D,SAAA;MACA;QACA,MAAAC,gBAAA,cAAAC,oBAAA,CAAArC,QAAA,EAAAxB,IAAA;QAEA,IAAA2D,SAAA;UACA,IAAAC,gBAAA;YACA,MAAAlG,cAAA;cACA4C,EAAA,EAAAsD,gBAAA,CAAAtD,EAAA;cACA0B,UAAA,EAAA2B;YACA;UACA;YACA,MAAAlG,WAAA;cACAY,UAAA,OAAAN,IAAA,CAAAuC,EAAA;cACAW,YAAA,OAAA1C,kBAAA,CAAA+B,EAAA;cACAkB,QAAA,EAAAA,QAAA;cACAI,YAAA,EAAA5B,IAAA;cACA2D,SAAA,EAAAA,SAAA;cACAG,YAAA;YACA;UACA;QACA;UACA,IAAAF,gBAAA;YACA,MAAAjG,cAAA,CAAAiG,gBAAA,CAAAtD,EAAA;UACA;QACA;QAEA,KAAAI,QAAA,CAAAqD,OAAA;MACA,SAAApD,KAAA;QACAsB,OAAA,CAAAtB,KAAA,YAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACA,MAAAkD,qBAAArC,QAAA,EAAAxB,IAAA;MACA;QACA,MAAAQ,QAAA,SAAAhD,wBAAA,CACA,KAAAO,IAAA,CAAAuC,EAAA,EACA,KAAA/B,kBAAA,CAAA+B,EAAA,EACA,IAAAb,IAAA,CAAAO,IAAA;QACA,OAAAQ,QAAA,CAAA1C,IAAA,CAAAgE,IAAA,CACAC,IAAA,IAAAA,IAAA,CAAAP,QAAA,KAAAA,QAAA,IACA5D,SAAA,CAAAmE,IAAA,CAAAH,YAAA,qBAAA5B,IACA;MACA,SAAAW,KAAA;QACAsB,OAAA,CAAAtB,KAAA,cAAAA,KAAA;QACA;MACA;IACA;IACAqD,aAAA;MACA,MAAAC,QAAA,OAAAxE,IAAA,MAAAhB,WAAA;MACAwF,QAAA,CAAAtE,OAAA,CAAAsE,QAAA,CAAArE,OAAA;MACA,KAAAnB,WAAA,GAAAwF,QAAA;MACA,KAAAlD,cAAA;MACA,KAAAC,cAAA;IACA;IAEA;IACAkD,gBAAA3B,KAAA,EAAAd,UAAA;MACA,KAAAvC,YAAA,GAAAqD,KAAA;MACA,KAAApD,iBAAA,GAAAsC,UAAA;MACA,KAAAxC,kBAAA;IACA;IAEA;IACA,MAAAkF,kBAAAC,MAAA;MACA;QACA,KAAAhG,OAAA;QACA,MAAAoC,QAAA,cAAAN,QAAA,CAAAmE,IAAA;UACA/D,EAAA,OAAApB,YAAA,CAAAoB,EAAA;UACA8C,MAAA,EAAAgB;QACA;QAEA,IAAA5D,QAAA,CAAAC,IAAA;UACA,KAAAC,QAAA,CAAAqD,OAAA,MAAAK,MAAA;UACA,WAAApD,cAAA;UACA,KAAA/B,kBAAA;QACA;UACA,KAAAyB,QAAA,CAAAC,KAAA,CAAAH,QAAA,CAAAI,OAAA;QACA;MACA,SAAAD,KAAA;QACAsB,OAAA,CAAAtB,KAAA,YAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;QACA,KAAAvC,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}