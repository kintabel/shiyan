{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Doctor',\n  data() {\n    return {\n      selectedDate: new Date(),\n      // 默认今天\n      schedules: [],\n      // 排班列表（含医生信息）\n      isLoading: true\n    };\n  },\n  created() {\n    this.fetchSchedules();\n  },\n  methods: {\n    // 禁用过去的日期\n    disabledDate(time) {\n      return time.getTime() < Date.now() - 24 * 60 * 60 * 1000;\n    },\n    // 获取排班数据\n    async fetchSchedules() {\n      this.isLoading = true;\n      const departmentId = this.$route.params.departmentId;\n      const startDate = parseTime(this.selectedDate, '{y}-{m}-{d}');\n      const endDate = startDate; // 同一天\n\n      try {\n        const response = await this.$request.get(`/api/schedule/department/${departmentId}/with-doctors`, {\n          params: {\n            startDate: startDate,\n            endDate: endDate\n          }\n        });\n        if (response.code === 200) {\n          this.schedules = response.data;\n        } else {\n          this.$message.error(response.msg || '获取排班信息失败');\n        }\n      } catch (error) {\n        console.error('获取排班失败:', error);\n        this.$message.error('获取排班信息失败');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // 跳转挂号页面\n    goToRegistration(schedule) {\n      this.$router.push({\n        name: 'Registration',\n        params: {\n          doctorId: schedule.doctorId,\n          scheduleId: schedule.id\n        },\n        query: {\n          date: parseTime(this.selectedDate, '{y}-{m}-{d}'),\n          shiftType: schedule.shiftType\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","selectedDate","Date","schedules","isLoading","created","fetchSchedules","methods","disabledDate","time","getTime","now","departmentId","$route","params","startDate","endDate","response","$request","get","code","$message","error","msg","console","goToRegistration","schedule","$router","push","doctorId","scheduleId","id","query","date","shiftType"],"sources":["src/views/user/Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <!-- 日期选择器 -->\r\n      <div class=\"date-selector\">\r\n        <el-date-picker\r\n            v-model=\"selectedDate\"\r\n            type=\"date\"\r\n            placeholder=\"选择日期\"\r\n            :disabled-date=\"disabledDate\"\r\n            @change=\"fetchSchedules\"\r\n        />\r\n      </div>\r\n\r\n      <el-table :data=\"schedules\" stripe>\r\n        <el-table-column prop=\"doctorName\" label=\"医生姓名\">\r\n          <template slot-scope=\"scope\">\r\n            <div class=\"doctor-info\">\r\n              <el-avatar :src=\"scope.row.doctorAvatar\" />\r\n              <span>{{ scope.row.doctorName }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"doctorTitle\" label=\"职称\"></el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"scope.row.shiftType === 'DAY' ? 'success' : 'warning'\">\r\n              {{ scope.row.shiftType === 'DAY' ? '白班' : '夜班' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row)\"\r\n                type=\"primary\"\r\n            >\r\n              预约挂号\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      selectedDate: new Date(), // 默认今天\r\n      schedules: [], // 排班列表（含医生信息）\r\n      isLoading: true,\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchSchedules()\r\n  },\r\n  methods: {\r\n    // 禁用过去的日期\r\n    disabledDate(time) {\r\n      return time.getTime() < Date.now() - 24 * 60 * 60 * 1000\r\n    },\r\n\r\n    // 获取排班数据\r\n    async fetchSchedules() {\r\n      this.isLoading = true\r\n      const departmentId = this.$route.params.departmentId\r\n      const startDate = parseTime(this.selectedDate, '{y}-{m}-{d}')\r\n      const endDate = startDate // 同一天\r\n\r\n      try {\r\n        const response = await this.$request.get(\r\n            `/api/schedule/department/${departmentId}/with-doctors`, {\r\n              params: {\r\n                startDate: startDate,\r\n                endDate: endDate\r\n              }\r\n            })\r\n\r\n        if (response.code === 200) {\r\n          this.schedules = response.data\r\n        } else {\r\n          this.$message.error(response.msg || '获取排班信息失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取排班失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 跳转挂号页面\r\n    goToRegistration(schedule) {\r\n      this.$router.push({\r\n        name: 'Registration',\r\n        params: {\r\n          doctorId: schedule.doctorId,\r\n          scheduleId: schedule.id\r\n        },\r\n        query: {\r\n          date: parseTime(this.selectedDate, '{y}-{m}-{d}'),\r\n          shiftType: schedule.shiftType\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.date-selector {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.doctor-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n</style>"],"mappings":";AAmDA,SAAAA,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA,MAAAC,IAAA;MAAA;MACAC,SAAA;MAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IACA;IACAC,aAAAC,IAAA;MACA,OAAAA,IAAA,CAAAC,OAAA,KAAAR,IAAA,CAAAS,GAAA;IACA;IAEA;IACA,MAAAL,eAAA;MACA,KAAAF,SAAA;MACA,MAAAQ,YAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,YAAA;MACA,MAAAG,SAAA,GAAAjB,SAAA,MAAAG,YAAA;MACA,MAAAe,OAAA,GAAAD,SAAA;;MAEA;QACA,MAAAE,QAAA,cAAAC,QAAA,CAAAC,GAAA,CACA,4BAAAP,YAAA;UACAE,MAAA;YACAC,SAAA,EAAAA,SAAA;YACAC,OAAA,EAAAA;UACA;QACA;QAEA,IAAAC,QAAA,CAAAG,IAAA;UACA,KAAAjB,SAAA,GAAAc,QAAA,CAAAjB,IAAA;QACA;UACA,KAAAqB,QAAA,CAAAC,KAAA,CAAAL,QAAA,CAAAM,GAAA;QACA;MACA,SAAAD,KAAA;QACAE,OAAA,CAAAF,KAAA,YAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;QACA,KAAAlB,SAAA;MACA;IACA;IAEA;IACAqB,iBAAAC,QAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QACA7B,IAAA;QACAe,MAAA;UACAe,QAAA,EAAAH,QAAA,CAAAG,QAAA;UACAC,UAAA,EAAAJ,QAAA,CAAAK;QACA;QACAC,KAAA;UACAC,IAAA,EAAAnC,SAAA,MAAAG,YAAA;UACAiC,SAAA,EAAAR,QAAA,CAAAQ;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}