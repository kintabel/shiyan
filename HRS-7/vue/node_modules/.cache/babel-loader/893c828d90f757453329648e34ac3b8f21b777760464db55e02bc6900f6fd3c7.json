{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AppointmentRegister',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      doctor: null,\n      isLoading: true,\n      morningTimeSlots: ['上午 9-10点', '上午 10-11点', '上午 11-12点'],\n      // 上午时间段\n      afternoonTimeSlots: ['下午 2-3点', '下午 3-4点', '下午 4-5点', '下午 5-6点'],\n      // 下午时间段\n      status: this.$route.query.status,\n      dates: [],\n      selectedDate: null\n    };\n  },\n  created() {\n    const doctorId = this.$route.params.doctorId;\n    const doctorName = this.$route.query.doctorName;\n    const isRevisit = this.$route.query.isRevisit;\n    if (isRevisit) {\n      // 复诊\n      if (doctorName) {\n        this.fetchDoctorInfoName(doctorName);\n      } else {\n        this.isLoading = false;\n      }\n    } else {\n      if (doctorId) {\n        this.fetchDoctorInfo(doctorId);\n      } else {\n        this.isLoading = false;\n      }\n    }\n    this.generateDates();\n  },\n  methods: {\n    fetchDoctorInfo(doctorId) {\n      this.$request.get('/doctor/selectDoctorById', {\n        params: {\n          doctorId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctor = response.data;\n        } else {\n          console.error('获取医生详细信息失败:', response.data);\n          this.$message.error('获取医生详细信息失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生详细信息失败:', error);\n        this.$message.error('获取医生详细信息失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    fetchDoctorInfoName(doctorName) {\n      this.$request.get('/doctor/selectDoctorByName', {\n        params: {\n          doctorName\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctor = response.data;\n        } else {\n          console.error('获取医生详细信息失败:', response.data);\n          this.$message.error('获取医生详细信息失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生详细信息失败:', error);\n        this.$message.error('获取医生详细信息失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    getRegistrationRoute(date, timeSlot) {\n      const status = this.$route.query.status;\n      return {\n        name: 'SubmitRegistration',\n        // 提交挂号界面的路由名称\n        query: {\n          doctorId: this.doctor.id,\n          // 医生 ID\n          date: date,\n          // 挂号日期\n          timeSlot: timeSlot,\n          // 具体时间段（如 \"上午 9-10点\"）\n          price: this.getPrice(this.doctor.status, timeSlot),\n          // 挂号价格\n          status: status\n        }\n      };\n    },\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    },\n    generateDates() {\n      const today = new Date();\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        this.dates.push({\n          date: `${year}-${month}-${day}`\n        });\n      }\n    },\n    selectDate(date) {\n      this.selectedDate = date;\n    },\n    getPrice(status, timeSlot) {\n      // 这里可以根据职称和时间段设置不同的价格\n      const isMorning = timeSlot.includes('上午');\n      switch (status) {\n        case 1:\n          return isMorning ? 50 : 40;\n        case 2:\n          return isMorning ? 80 : 70;\n        case 3:\n          return isMorning ? 100 : 90;\n        case 4:\n          return isMorning ? 150 : 120;\n        case 5:\n          return isMorning ? 60 : 50;\n        default:\n          return 0;\n      }\n    },\n    getTimeSlots() {\n      return [...this.morningTimeSlots.map(slot => ({\n        timeSlot: slot\n      })), ...this.afternoonTimeSlots.map(slot => ({\n        timeSlot: slot\n      }))];\n    },\n    goToSubmitRegistration(date, timeSlot) {\n      const route = this.getRegistrationRoute(date, timeSlot);\n      this.$router.push(route);\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","doctor","isLoading","morningTimeSlots","afternoonTimeSlots","status","$route","query","dates","selectedDate","created","doctorId","params","doctorName","isRevisit","fetchDoctorInfoName","fetchDoctorInfo","generateDates","methods","$request","get","then","response","console","error","$message","catch","finally","getRegistrationRoute","date","timeSlot","id","price","getPrice","getDoctorTitle","today","Date","i","setDate","getDate","year","getFullYear","month","String","getMonth","padStart","day","push","selectDate","isMorning","includes","getTimeSlots","map","slot","goToSubmitRegistration","route","$router"],"sources":["src/views/user/AppointmentRegister.vue"],"sourcesContent":["<template>\r\n  <div class=\"registration-page\">\r\n    <!-- 数据加载中提示 -->\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <div v-if=\"doctor\">\r\n        <el-table :data=\"[doctor]\" stripe>\r\n          <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n          <el-table-column label=\"医生职称\">\r\n            <template slot-scope=\"scope\">\r\n              {{ getDoctorTitle(scope.row.status) }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"introduction\" label=\"医生简介\"></el-table-column>\r\n        </el-table>\r\n        <h2>选择挂号日期</h2>\r\n        <el-table :data=\"dates\" stripe>\r\n          <el-table-column prop=\"date\" label=\"日期\">\r\n            <template slot-scope=\"scope\">\r\n              <span @click=\"selectDate(scope.row.date)\">{{ scope.row.date }}</span>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        <div v-if=\"selectedDate\">\r\n          <h2>{{ selectedDate }} 挂号时段</h2>\r\n          <el-table :data=\"getTimeSlots()\" stripe>\r\n            <el-table-column label=\"日期\">\r\n              <template slot-scope=\"scope\">\r\n                {{ selectedDate }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"timeSlot\" label=\"时间段\"></el-table-column>\r\n            <el-table-column label=\"价格\">\r\n              <template slot-scope=\"scope\">\r\n                {{ getPrice(doctor.status, scope.row.timeSlot) }} 元\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button\r\n                    @click=\"goToSubmitRegistration(selectedDate, scope.row.timeSlot)\"\r\n                    type=\"primary\"\r\n                >\r\n                  挂号\r\n                </el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n        </div>\r\n      </div>\r\n      <div v-else>\r\n        <p>未获取到医生信息，请稍后重试。</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'AppointmentRegister',\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      doctor: null,\r\n      isLoading: true,\r\n      morningTimeSlots: ['上午 9-10点', '上午 10-11点', '上午 11-12点'], // 上午时间段\r\n      afternoonTimeSlots: ['下午 2-3点', '下午 3-4点', '下午 4-5点', '下午 5-6点'],// 下午时间段\r\n      status: this.$route.query.status,\r\n      dates: [],\r\n      selectedDate: null\r\n    };\r\n  },\r\n  created() {\r\n    const doctorId = this.$route.params.doctorId;\r\n    const doctorName = this.$route.query.doctorName;\r\n    const isRevisit = this.$route.query.isRevisit;\r\n    if (isRevisit) {\r\n      // 复诊\r\n      if (doctorName) {\r\n        this.fetchDoctorInfoName(doctorName);\r\n      } else {\r\n        this.isLoading = false;\r\n      }\r\n    } else {\r\n      if (doctorId) {\r\n        this.fetchDoctorInfo(doctorId);\r\n      } else {\r\n        this.isLoading = false;\r\n      }\r\n    }\r\n    this.generateDates();\r\n  },\r\n  methods: {\r\n    fetchDoctorInfo(doctorId) {\r\n      this.$request.get('/doctor/selectDoctorById', {\r\n        params: { doctorId }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data;\r\n            } else {\r\n              console.error('获取医生详细信息失败:', response.data);\r\n              this.$message.error('获取医生详细信息失败，请稍后重试');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生详细信息失败:', error);\r\n            this.$message.error('获取医生详细信息失败，请稍后重试');\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    fetchDoctorInfoName(doctorName) {\r\n      this.$request.get('/doctor/selectDoctorByName', {\r\n        params: { doctorName }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data;\r\n            } else {\r\n              console.error('获取医生详细信息失败:', response.data);\r\n              this.$message.error('获取医生详细信息失败，请稍后重试');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生详细信息失败:', error);\r\n            this.$message.error('获取医生详细信息失败，请稍后重试');\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    getRegistrationRoute(date, timeSlot) {\r\n      const status = this.$route.query.status;\r\n      return {\r\n        name: 'SubmitRegistration', // 提交挂号界面的路由名称\r\n        query: {\r\n          doctorId: this.doctor.id, // 医生 ID\r\n          date: date, // 挂号日期\r\n          timeSlot: timeSlot, // 具体时间段（如 \"上午 9-10点\"）\r\n          price: this.getPrice(this.doctor.status, timeSlot), // 挂号价格\r\n          status: status,\r\n        }\r\n      };\r\n    },\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1:\r\n          return '医师';\r\n        case 2:\r\n          return '副主治医师';\r\n        case 3:\r\n          return '主治医师';\r\n        case 4:\r\n          return '专家';\r\n        case 5:\r\n          return '急诊';\r\n        default:\r\n          return '未知职称';\r\n      }\r\n    },\r\n    generateDates() {\r\n      const today = new Date();\r\n      for (let i = 0; i < 7; i++) {\r\n        const date = new Date(today);\r\n        date.setDate(date.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        this.dates.push({ date: `${year}-${month}-${day}` });\r\n      }\r\n    },\r\n    selectDate(date) {\r\n      this.selectedDate = date;\r\n    },\r\n    getPrice(status, timeSlot) {\r\n      // 这里可以根据职称和时间段设置不同的价格\r\n      const isMorning = timeSlot.includes('上午');\r\n      switch (status) {\r\n        case 1:\r\n          return isMorning ? 50 : 40;\r\n        case 2:\r\n          return isMorning ? 80 : 70;\r\n        case 3:\r\n          return isMorning ? 100 : 90;\r\n        case 4:\r\n          return isMorning ? 150 : 120;\r\n        case 5:\r\n          return isMorning ? 60 : 50;\r\n        default:\r\n          return 0;\r\n      }\r\n    },\r\n    getTimeSlots() {\r\n      return [\r\n        ...this.morningTimeSlots.map((slot) => ({ timeSlot: slot })),\r\n        ...this.afternoonTimeSlots.map((slot) => ({ timeSlot: slot })),\r\n      ];\r\n    },\r\n    goToSubmitRegistration(date, timeSlot) {\r\n      const route = this.getRegistrationRoute(date, timeSlot);\r\n      this.$router.push(route);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.registration-page {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n</style>"],"mappings":";AA6DA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,MAAA;MACAC,SAAA;MACAC,gBAAA;MAAA;MACAC,kBAAA;MAAA;MACAC,MAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,MAAA;MACAG,KAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,QAAA,QAAAL,MAAA,CAAAM,MAAA,CAAAD,QAAA;IACA,MAAAE,UAAA,QAAAP,MAAA,CAAAC,KAAA,CAAAM,UAAA;IACA,MAAAC,SAAA,QAAAR,MAAA,CAAAC,KAAA,CAAAO,SAAA;IACA,IAAAA,SAAA;MACA;MACA,IAAAD,UAAA;QACA,KAAAE,mBAAA,CAAAF,UAAA;MACA;QACA,KAAAX,SAAA;MACA;IACA;MACA,IAAAS,QAAA;QACA,KAAAK,eAAA,CAAAL,QAAA;MACA;QACA,KAAAT,SAAA;MACA;IACA;IACA,KAAAe,aAAA;EACA;EACAC,OAAA;IACAF,gBAAAL,QAAA;MACA,KAAAQ,QAAA,CAAAC,GAAA;QACAR,MAAA;UAAAD;QAAA;MACA,GACAU,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAA3B,IAAA;UACA,KAAAM,MAAA,GAAAqB,QAAA,CAAA3B,IAAA;QACA;UACA4B,OAAA,CAAAC,KAAA,gBAAAF,QAAA,CAAA3B,IAAA;UACA,KAAA8B,QAAA,CAAAD,KAAA;QACA;MACA,GACAE,KAAA,CAAAF,KAAA;QACAD,OAAA,CAAAC,KAAA,gBAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA,GACAG,OAAA;QACA,KAAAzB,SAAA;MACA;IACA;IACAa,oBAAAF,UAAA;MACA,KAAAM,QAAA,CAAAC,GAAA;QACAR,MAAA;UAAAC;QAAA;MACA,GACAQ,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAA3B,IAAA;UACA,KAAAM,MAAA,GAAAqB,QAAA,CAAA3B,IAAA;QACA;UACA4B,OAAA,CAAAC,KAAA,gBAAAF,QAAA,CAAA3B,IAAA;UACA,KAAA8B,QAAA,CAAAD,KAAA;QACA;MACA,GACAE,KAAA,CAAAF,KAAA;QACAD,OAAA,CAAAC,KAAA,gBAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA,GACAG,OAAA;QACA,KAAAzB,SAAA;MACA;IACA;IACA0B,qBAAAC,IAAA,EAAAC,QAAA;MACA,MAAAzB,MAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,MAAA;MACA;QACAX,IAAA;QAAA;QACAa,KAAA;UACAI,QAAA,OAAAV,MAAA,CAAA8B,EAAA;UAAA;UACAF,IAAA,EAAAA,IAAA;UAAA;UACAC,QAAA,EAAAA,QAAA;UAAA;UACAE,KAAA,OAAAC,QAAA,MAAAhC,MAAA,CAAAI,MAAA,EAAAyB,QAAA;UAAA;UACAzB,MAAA,EAAAA;QACA;MACA;IACA;IACA6B,eAAA7B,MAAA;MACA,QAAAA,MAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IACAY,cAAA;MACA,MAAAkB,KAAA,OAAAC,IAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,MAAAA,CAAA;QACA,MAAAR,IAAA,OAAAO,IAAA,CAAAD,KAAA;QACAN,IAAA,CAAAS,OAAA,CAAAT,IAAA,CAAAU,OAAA,KAAAF,CAAA;QACA,MAAAG,IAAA,GAAAX,IAAA,CAAAY,WAAA;QACA,MAAAC,KAAA,GAAAC,MAAA,CAAAd,IAAA,CAAAe,QAAA,QAAAC,QAAA;QACA,MAAAC,GAAA,GAAAH,MAAA,CAAAd,IAAA,CAAAU,OAAA,IAAAM,QAAA;QACA,KAAArC,KAAA,CAAAuC,IAAA;UAAAlB,IAAA,KAAAW,IAAA,IAAAE,KAAA,IAAAI,GAAA;QAAA;MACA;IACA;IACAE,WAAAnB,IAAA;MACA,KAAApB,YAAA,GAAAoB,IAAA;IACA;IACAI,SAAA5B,MAAA,EAAAyB,QAAA;MACA;MACA,MAAAmB,SAAA,GAAAnB,QAAA,CAAAoB,QAAA;MACA,QAAA7C,MAAA;QACA;UACA,OAAA4C,SAAA;QACA;UACA,OAAAA,SAAA;QACA;UACA,OAAAA,SAAA;QACA;UACA,OAAAA,SAAA;QACA;UACA,OAAAA,SAAA;QACA;UACA;MACA;IACA;IACAE,aAAA;MACA,QACA,QAAAhD,gBAAA,CAAAiD,GAAA,CAAAC,IAAA;QAAAvB,QAAA,EAAAuB;MAAA,KACA,QAAAjD,kBAAA,CAAAgD,GAAA,CAAAC,IAAA;QAAAvB,QAAA,EAAAuB;MAAA,IACA;IACA;IACAC,uBAAAzB,IAAA,EAAAC,QAAA;MACA,MAAAyB,KAAA,QAAA3B,oBAAA,CAAAC,IAAA,EAAAC,QAAA;MACA,KAAA0B,OAAA,CAAAT,IAAA,CAAAQ,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}