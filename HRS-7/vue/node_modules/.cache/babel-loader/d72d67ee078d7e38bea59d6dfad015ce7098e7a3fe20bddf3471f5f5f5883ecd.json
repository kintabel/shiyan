{"ast":null,"code":"import { getCurrentWeekDates } from '@/utils/date.js';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'ScheduleManagement',\n  data() {\n    return {\n      doctorInfo: null,\n      isLoading: true,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      weeklySchedules: [],\n      currentWeekDates: []\n    };\n  },\n  created() {\n    this.fetchDoctor(this.user.id);\n    this.currentWeekDates = getCurrentWeekDates();\n  },\n  methods: {\n    async fetchDoctor(userId) {\n      try {\n        const res = await this.$request.get('/doctor/selectDoctorByUserId', {\n          params: {\n            userId\n          }\n        });\n        this.doctorInfo = res.data;\n        this.fetchWeeklySchedules(res.data);\n      } catch (error) {\n        this.$message.error('获取医生信息失败');\n        console.error(error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async fetchWeeklySchedules(doctorInfo) {\n      try {\n        const res = await this.$request.get(`/api/schedule/doctor/${doctorInfo.id}`, {\n          params: {\n            startDate: this.currentWeekDates[0],\n            endDate: this.currentWeekDates[6]\n          }\n        });\n        this.weeklySchedules = res.data || [];\n      } catch (error) {\n        this.$message.error('获取排班信息失败');\n        console.error(error);\n      }\n    },\n    // 打开请假提示框\n    openLeavePrompt(schedule) {\n      // 第一步：选择请假类型\n      this.$prompt('请输入请假类型（事假/病假/年假/其他）', `请假申请 - ${this.formatDate(schedule.scheduleDate)}`, {\n        confirmButtonText: '下一步',\n        cancelButtonText: '取消',\n        inputPattern: /^(事假|病假|年假|其他)$/,\n        inputErrorMessage: '请输入有效的请假类型（事假/病假/年假/其他）'\n      }).then(({\n        value\n      }) => {\n        const leaveTypeMap = {\n          '事假': 'personal',\n          '病假': 'sick',\n          '年假': 'annual',\n          '其他': 'other'\n        };\n        const leaveType = leaveTypeMap[value];\n\n        // 第二步：输入原因\n        this.$prompt('请输入请假原因', `请假申请 - ${value}`, {\n          confirmButtonText: '提交',\n          cancelButtonText: '上一步',\n          inputType: 'textarea',\n          inputPlaceholder: '请详细说明原因（至少10个字）',\n          inputValidator: value => {\n            if (!value) return '原因不能为空';\n            if (value.length < 10) return '至少需要10个字符';\n          }\n        }).then(({\n          value: reason\n        }) => {\n          this.submitLeaveApplication({\n            doctorId: this.doctorInfo.id,\n            scheduleDate: schedule.scheduleDate,\n            shiftType: schedule.shiftType,\n            leaveType,\n            reason\n          });\n        }).catch(action => {\n          if (action === 'cancel') {\n            this.openLeavePrompt(schedule); // 点击\"上一步\"重新打开\n          }\n        });\n      }).catch(() => {\n        this.$message.info('已取消申请');\n      });\n    },\n    // 新增方法：获取请假类型名称\n    getLeaveTypeName(type) {\n      const map = {\n        personal: '事假',\n        sick: '病假',\n        annual: '年假',\n        other: '其他'\n      };\n      return map[type] || type;\n    },\n    async submitLeaveApplication(data) {\n      try {\n        console.log('提交的请假申请数据：', data);\n        /*await this.$request.post('/api/schedule/leaveApplication', data)\r\n        this.$message.success(`${this.getLeaveTypeName(data.leaveType)}申请提交成功`)\r\n        this.fetchWeeklySchedules(this.doctorInfo)*/\n      } catch (error) {\n        this.$message.error(`提交失败：${error.response?.data?.message || error.message}`);\n      }\n    },\n    // 辅助方法\n    formatDate(date) {\n      return dayjs(date).format('YYYY-MM-DD dddd');\n    },\n    getShiftTagType(shiftType) {\n      return shiftType === 'DAY' ? 'success' : 'warning';\n    },\n    getShiftType(shiftType) {\n      return shiftType === 'DAY' ? '白班' : shiftType === 'NIGHT' ? '夜班' : '无排班';\n    }\n  }\n};","map":{"version":3,"names":["getCurrentWeekDates","dayjs","name","data","doctorInfo","isLoading","user","JSON","parse","localStorage","getItem","weeklySchedules","currentWeekDates","created","fetchDoctor","id","methods","userId","res","$request","get","params","fetchWeeklySchedules","error","$message","console","startDate","endDate","openLeavePrompt","schedule","$prompt","formatDate","scheduleDate","confirmButtonText","cancelButtonText","inputPattern","inputErrorMessage","then","value","leaveTypeMap","leaveType","inputType","inputPlaceholder","inputValidator","length","reason","submitLeaveApplication","doctorId","shiftType","catch","action","info","getLeaveTypeName","type","map","personal","sick","annual","other","log","response","message","date","format","getShiftTagType","getShiftType"],"sources":["src/views/doctor/ScheduleManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"[doctorInfo]\" stripe>\r\n        <el-table-column label=\"姓名\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.name }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"联系方式\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.phone }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"性别\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.gender }}</span>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <h4>当前周排班信息</h4>\r\n      <el-table :data=\"weeklySchedules\" stripe>\r\n        <el-table-column label=\"日期\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ formatDate(scope.row.scheduleDate) }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.shiftType)\">\r\n              {{ getShiftType(scope.row.shiftType) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"openLeavePrompt(scope.row)\"\r\n                type=\"danger\"\r\n                :disabled=\"!scope.row.shiftType\"\r\n            >\r\n              请假\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getCurrentWeekDates } from '@/utils/date.js'\r\nimport dayjs from 'dayjs'\r\n\r\nexport default {\r\n  name: 'ScheduleManagement',\r\n  data() {\r\n    return {\r\n      doctorInfo: null,\r\n      isLoading: true,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      weeklySchedules: [],\r\n      currentWeekDates: []\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDoctor(this.user.id)\r\n    this.currentWeekDates = getCurrentWeekDates()\r\n  },\r\n  methods: {\r\n    async fetchDoctor(userId) {\r\n      try {\r\n        const res = await this.$request.get('/doctor/selectDoctorByUserId', {\r\n          params: { userId }\r\n        })\r\n        this.doctorInfo = res.data\r\n        this.fetchWeeklySchedules(res.data)\r\n      } catch (error) {\r\n        this.$message.error('获取医生信息失败')\r\n        console.error(error)\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n    async fetchWeeklySchedules(doctorInfo) {\r\n      try {\r\n        const res = await this.$request.get(`/api/schedule/doctor/${doctorInfo.id}`, {\r\n          params: {\r\n            startDate: this.currentWeekDates[0],\r\n            endDate: this.currentWeekDates[6]\r\n          }\r\n        })\r\n        this.weeklySchedules = res.data || []\r\n      } catch (error) {\r\n        this.$message.error('获取排班信息失败')\r\n        console.error(error)\r\n      }\r\n    },\r\n    // 打开请假提示框\r\n    openLeavePrompt(schedule) {\r\n      // 第一步：选择请假类型\r\n      this.$prompt('请输入请假类型（事假/病假/年假/其他）', `请假申请 - ${this.formatDate(schedule.scheduleDate)}`, {\r\n        confirmButtonText: '下一步',\r\n        cancelButtonText: '取消',\r\n        inputPattern: /^(事假|病假|年假|其他)$/,\r\n        inputErrorMessage: '请输入有效的请假类型（事假/病假/年假/其他）'\r\n      }).then(({ value }) => {\r\n        const leaveTypeMap = {\r\n          '事假': 'personal',\r\n          '病假': 'sick',\r\n          '年假': 'annual',\r\n          '其他': 'other'\r\n        };\r\n        const leaveType = leaveTypeMap[value];\r\n\r\n        // 第二步：输入原因\r\n        this.$prompt('请输入请假原因', `请假申请 - ${value}`, {\r\n          confirmButtonText: '提交',\r\n          cancelButtonText: '上一步',\r\n          inputType: 'textarea',\r\n          inputPlaceholder: '请详细说明原因（至少10个字）',\r\n          inputValidator: (value) => {\r\n            if (!value) return '原因不能为空';\r\n            if (value.length < 10) return '至少需要10个字符';\r\n          }\r\n        }).then(({ value: reason }) => {\r\n          this.submitLeaveApplication({\r\n            doctorId: this.doctorInfo.id,\r\n            scheduleDate: schedule.scheduleDate,\r\n            shiftType: schedule.shiftType,\r\n            leaveType,\r\n            reason\r\n          });\r\n        }).catch((action) => {\r\n          if (action === 'cancel') {\r\n            this.openLeavePrompt(schedule); // 点击\"上一步\"重新打开\r\n          }\r\n        });\r\n      }).catch(() => {\r\n        this.$message.info('已取消申请');\r\n      });\r\n    },\r\n\r\n    // 新增方法：获取请假类型名称\r\n    getLeaveTypeName(type) {\r\n      const map = {\r\n        personal: '事假',\r\n        sick: '病假',\r\n        annual: '年假',\r\n        other: '其他'\r\n      }\r\n      return map[type] || type\r\n    },\r\n\r\n    async submitLeaveApplication(data) {\r\n      try {\r\n        console.log('提交的请假申请数据：', data)\r\n        /*await this.$request.post('/api/schedule/leaveApplication', data)\r\n        this.$message.success(`${this.getLeaveTypeName(data.leaveType)}申请提交成功`)\r\n        this.fetchWeeklySchedules(this.doctorInfo)*/\r\n      } catch (error) {\r\n        this.$message.error(`提交失败：${error.response?.data?.message || error.message}`)\r\n      }\r\n    },\r\n\r\n    // 辅助方法\r\n    formatDate(date) {\r\n      return dayjs(date).format('YYYY-MM-DD dddd')\r\n    },\r\n    getShiftTagType(shiftType) {\r\n      return shiftType === 'DAY' ? 'success' : 'warning'\r\n    },\r\n    getShiftType(shiftType) {\r\n      return shiftType === 'DAY' ? '白班' : shiftType === 'NIGHT' ? '夜班' : '无排班'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}