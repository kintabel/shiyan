{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nimport { getCurrentWeekDates } from '@/utils/date.js';\nexport default {\n  name: 'ScheduleManagement',\n  data() {\n    return {\n      doctorInfo: null,\n      isLoading: true,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      hospitalizationRecords: [],\n      currentWeekDates: [],\n      weeklySchedules: []\n    };\n  },\n  async created() {\n    const userId = this.user.id;\n    this.currentWeekDates = getCurrentWeekDates();\n    try {\n      await this.fetchDoctor(userId);\n      await this.fetchWeeklySchedules();\n    } catch (error) {\n      console.error('数据加载出错:', error);\n    }\n  },\n  methods: {\n    async fetchDoctor(userId) {\n      this.$request.get(`/doctor/selectDoctorByUserId`, {\n        params: {\n          userId: userId\n        }\n      }).then(response => {\n        console.log(response.data);\n        if (response.data) {\n          this.doctorInfo = response.data;\n        } else {\n          this.handleError('获取医生详细信息失败', response.data);\n        }\n      }).catch(error => {\n        this.handleError('获取医生详细信息失败', error);\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    async fetchWeeklySchedules() {\n      const startDate = this.currentWeekDates[0];\n      const endDate = this.currentWeekDates[6];\n      const doctorId = this.doctorInfo.id;\n      try {\n        const response = await this.$request.get('/api/schedule/departmentByDoc/' + doctorId, {\n          params: {\n            startDate: startDate,\n            endDate: endDate\n          }\n        });\n        if (response.data) {\n          this.weeklySchedules = response.data.map(schedule => ({\n            date: schedule.date,\n            shiftType: schedule.shiftType\n          }));\n          console.log('weeklySchedules', this.weeklySchedules);\n        }\n      } catch (error) {\n        console.error('获取本周排班信息失败:', error);\n        this.$message.error('获取本周排班信息失败');\n      }\n    },\n    handleError(message, error) {\n      console.error(message, error);\n      this.$message.error(message);\n    },\n    viewArchive(informationId) {\n      console.log('查看档案:', informationId);\n      this.$router.push({\n        path: '/archives-management/archives-view',\n        query: {\n          informationId: informationId\n        }\n      });\n    },\n    // 班次标签样式\n    getShiftTagType(shiftType) {\n      if (!shiftType) return 'info';\n      return shiftType === 'DAY' ? 'success' : 'warning';\n    },\n    // 获取班次类型文本\n    getShiftType(shiftType) {\n      if (!shiftType) return '无排班';\n      return shiftType === 'DAY' ? '白班' : '夜班';\n    }\n  }\n};","map":{"version":3,"names":["parseTime","getCurrentWeekDates","name","data","doctorInfo","isLoading","user","JSON","parse","localStorage","getItem","hospitalizationRecords","currentWeekDates","weeklySchedules","created","userId","id","fetchDoctor","fetchWeeklySchedules","error","console","methods","$request","get","params","then","response","log","handleError","catch","finally","startDate","endDate","doctorId","map","schedule","date","shiftType","$message","message","viewArchive","informationId","$router","push","path","query","getShiftTagType","getShiftType"],"sources":["src/views/doctor/ScheduleManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"[doctorInfo]\" stripe>\r\n        <el-table-column label=\"姓名\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.name }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"联系方式\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.phone }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"性别\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.gender }}</span>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n\r\n      <h4>当前周排班信息</h4>\r\n      <el-table :data=\"weeklySchedules\" stripe>\r\n        <el-table-column label=\"日期\">\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.date }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.shiftType)\">\r\n              {{ getShiftType(scope.row.shiftType) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\nimport { getCurrentWeekDates } from '@/utils/date.js'\r\n\r\nexport default {\r\n  name: 'ScheduleManagement',\r\n  data() {\r\n    return {\r\n      doctorInfo: null,\r\n      isLoading: true,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      hospitalizationRecords: [],\r\n      currentWeekDates: [],\r\n      weeklySchedules: []\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    const userId = this.user.id;\r\n    this.currentWeekDates = getCurrentWeekDates()\r\n    try {\r\n      await this.fetchDoctor(userId);\r\n      await this.fetchWeeklySchedules()\r\n    } catch (error) {\r\n      console.error('数据加载出错:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchDoctor(userId) {\r\n      this.$request.get(`/doctor/selectDoctorByUserId`, {\r\n        params: {\r\n          userId: userId\r\n        }\r\n      }).then(response => {\r\n        console.log(response.data);\r\n        if (response.data) {\r\n          this.doctorInfo = response.data;\r\n        } else {\r\n          this.handleError('获取医生详细信息失败', response.data);\r\n        }\r\n      }).catch(error => {\r\n        this.handleError('获取医生详细信息失败', error);\r\n      }).finally(() => {\r\n        this.isLoading = false;\r\n      });\r\n    },\r\n\r\n    async fetchWeeklySchedules() {\r\n      const startDate = this.currentWeekDates[0]\r\n      const endDate = this.currentWeekDates[6]\r\n      const doctorId = this.doctorInfo.id\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/departmentByDoc/' + doctorId, {\r\n          params: {\r\n            startDate: startDate,\r\n            endDate: endDate\r\n          }\r\n        })\r\n        if (response.data) {\r\n          this.weeklySchedules = response.data.map(schedule => ({\r\n            date: schedule.date,\r\n            shiftType: schedule.shiftType\r\n          }))\r\n          console.log('weeklySchedules', this.weeklySchedules)\r\n        }\r\n      } catch (error) {\r\n        console.error('获取本周排班信息失败:', error)\r\n        this.$message.error('获取本周排班信息失败')\r\n      }\r\n    },\r\n\r\n    handleError(message, error) {\r\n      console.error(message, error);\r\n      this.$message.error(message);\r\n    },\r\n\r\n    viewArchive(informationId) {\r\n      console.log('查看档案:', informationId);\r\n      this.$router.push({\r\n        path: '/archives-management/archives-view',\r\n        query: { informationId: informationId }\r\n      })\r\n    },\r\n\r\n    // 班次标签样式\r\n    getShiftTagType(shiftType) {\r\n      if (!shiftType) return 'info'\r\n      return shiftType === 'DAY' ? 'success' : 'warning'\r\n    },\r\n\r\n    // 获取班次类型文本\r\n    getShiftType(shiftType) {\r\n      if (!shiftType) return '无排班'\r\n      return shiftType === 'DAY' ? '白班' : '夜班'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":";AA8CA,SAAAA,SAAA;AACA,SAAAC,mBAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,SAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,sBAAA;MACAC,gBAAA;MACAC,eAAA;IACA;EACA;EAEA,MAAAC,QAAA;IACA,MAAAC,MAAA,QAAAT,IAAA,CAAAU,EAAA;IACA,KAAAJ,gBAAA,GAAAX,mBAAA;IACA;MACA,WAAAgB,WAAA,CAAAF,MAAA;MACA,WAAAG,oBAAA;IACA,SAAAC,KAAA;MACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;IACA;EACA;EACAE,OAAA;IACA,MAAAJ,YAAAF,MAAA;MACA,KAAAO,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAT,MAAA,EAAAA;QACA;MACA,GAAAU,IAAA,CAAAC,QAAA;QACAN,OAAA,CAAAO,GAAA,CAAAD,QAAA,CAAAvB,IAAA;QACA,IAAAuB,QAAA,CAAAvB,IAAA;UACA,KAAAC,UAAA,GAAAsB,QAAA,CAAAvB,IAAA;QACA;UACA,KAAAyB,WAAA,eAAAF,QAAA,CAAAvB,IAAA;QACA;MACA,GAAA0B,KAAA,CAAAV,KAAA;QACA,KAAAS,WAAA,eAAAT,KAAA;MACA,GAAAW,OAAA;QACA,KAAAzB,SAAA;MACA;IACA;IAEA,MAAAa,qBAAA;MACA,MAAAa,SAAA,QAAAnB,gBAAA;MACA,MAAAoB,OAAA,QAAApB,gBAAA;MACA,MAAAqB,QAAA,QAAA7B,UAAA,CAAAY,EAAA;MACA;QACA,MAAAU,QAAA,cAAAJ,QAAA,CAAAC,GAAA,oCAAAU,QAAA;UACAT,MAAA;YACAO,SAAA,EAAAA,SAAA;YACAC,OAAA,EAAAA;UACA;QACA;QACA,IAAAN,QAAA,CAAAvB,IAAA;UACA,KAAAU,eAAA,GAAAa,QAAA,CAAAvB,IAAA,CAAA+B,GAAA,CAAAC,QAAA;YACAC,IAAA,EAAAD,QAAA,CAAAC,IAAA;YACAC,SAAA,EAAAF,QAAA,CAAAE;UACA;UACAjB,OAAA,CAAAO,GAAA,yBAAAd,eAAA;QACA;MACA,SAAAM,KAAA;QACAC,OAAA,CAAAD,KAAA,gBAAAA,KAAA;QACA,KAAAmB,QAAA,CAAAnB,KAAA;MACA;IACA;IAEAS,YAAAW,OAAA,EAAApB,KAAA;MACAC,OAAA,CAAAD,KAAA,CAAAoB,OAAA,EAAApB,KAAA;MACA,KAAAmB,QAAA,CAAAnB,KAAA,CAAAoB,OAAA;IACA;IAEAC,YAAAC,aAAA;MACArB,OAAA,CAAAO,GAAA,UAAAc,aAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QACAC,IAAA;QACAC,KAAA;UAAAJ,aAAA,EAAAA;QAAA;MACA;IACA;IAEA;IACAK,gBAAAT,SAAA;MACA,KAAAA,SAAA;MACA,OAAAA,SAAA;IACA;IAEA;IACAU,aAAAV,SAAA;MACA,KAAAA,SAAA;MACA,OAAAA,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}