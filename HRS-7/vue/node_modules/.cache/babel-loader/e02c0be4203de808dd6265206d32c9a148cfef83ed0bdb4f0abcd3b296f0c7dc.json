{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { useWebSocket } from '../utils/websocket';\nimport axios from 'axios';\nexport default {\n  __name: 'UserChat',\n  setup(__props) {\n    const {\n      messages,\n      connect,\n      disconnect,\n      sendMessage,\n      connected\n    } = useWebSocket();\n    const newMessage = ref('');\n\n    // 从localStorage获取当前用户信息\n    const user = JSON.parse(localStorage.getItem('xm-user') || '{}');\n    const patientId = ref(user.id); // 当前登录用户ID\n    const patientName = ref(user.name || '患者'); // 当前登录用户名\n\n    // 选择相关数据\n    const hospitals = ref([]);\n    const selectedHospital = ref('');\n    const departments = ref([]);\n    const selectedDepartment = ref('');\n    const doctors = ref([]);\n    const selectedDoctor = ref('');\n\n    // 聊天状态\n    const chatStarted = ref(false);\n    const currentDoctorName = ref('');\n\n    // 加载医院列表\n    const loadHospitals = async () => {\n      try {\n        const response = await axios.get('/hospitals/selectPage');\n        hospitals.value = response.data;\n      } catch (error) {\n        console.error('加载医院列表失败:', error);\n      }\n    };\n\n    // 加载科室列表\n    const loadDepartments = async () => {\n      if (!selectedHospital.value) return;\n      try {\n        const response = await axios.get(`/departments?hospitalId=${selectedHospital.value}`);\n        departments.value = response.data;\n        selectedDepartment.value = '';\n        doctors.value = [];\n      } catch (error) {\n        console.error('加载科室列表失败:', error);\n      }\n    };\n\n    // 加载医生列表\n    const loadDoctors = async () => {\n      if (!selectedDepartment.value) return;\n      try {\n        const response = await axios.get(`/doctors?departmentId=${selectedDepartment.value}`);\n        doctors.value = response.data;\n        selectedDoctor.value = '';\n      } catch (error) {\n        console.error('加载医生列表失败:', error);\n      }\n    };\n\n    // 开始聊天\n    const startChat = () => {\n      if (!selectedDoctor.value) {\n        ElMessage.warning('请选择医生');\n        return;\n      }\n      const doctor = doctors.value.find(d => d.id === selectedDoctor.value);\n      if (!doctor) return;\n      currentDoctorName.value = doctor.name;\n      chatStarted.value = true;\n\n      // 加载历史消息\n      loadHistory();\n\n      // 连接WebSocket\n      connect(message => {\n        if (message.senderId === selectedDoctor.value && message.receiverId === patientId.value || message.senderId === patientId.value && message.receiverId === selectedDoctor.value) {\n          messages.value.push(message);\n        }\n      });\n    };\n\n    // 加载历史消息\n    const loadHistory = async () => {\n      try {\n        const response = await axios.get(`/chat/messages/${patientId.value}/${selectedDoctor.value}`);\n        messages.value = response.data;\n      } catch (error) {\n        console.error('加载历史消息失败:', error);\n      }\n    };\n\n    // 发送消息\n    const send = () => {\n      if (!newMessage.value.trim()) {\n        ElMessage.warning('消息不能为空');\n        return;\n      }\n      if (!chatStarted.value) {\n        ElMessage.warning('请先选择医生开始对话');\n        return;\n      }\n      const message = {\n        content: newMessage.value,\n        senderType: 'patient',\n        senderId: patientId.value,\n        senderName: patientName.value,\n        receiverId: selectedDoctor.value,\n        receiverName: currentDoctorName.value\n      };\n      sendMessage(message);\n      newMessage.value = '';\n    };\n    onMounted(() => {\n      loadHospitals();\n    });\n    onUnmounted(() => {\n      disconnect();\n    });\n    return {\n      __sfc: true,\n      messages,\n      connect,\n      disconnect,\n      sendMessage,\n      connected,\n      newMessage,\n      user,\n      patientId,\n      patientName,\n      hospitals,\n      selectedHospital,\n      departments,\n      selectedDepartment,\n      doctors,\n      selectedDoctor,\n      chatStarted,\n      currentDoctorName,\n      loadHospitals,\n      loadDepartments,\n      loadDoctors,\n      startChat,\n      loadHistory,\n      send\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","useWebSocket","axios","messages","connect","disconnect","sendMessage","connected","newMessage","user","JSON","parse","localStorage","getItem","patientId","id","patientName","name","hospitals","selectedHospital","departments","selectedDepartment","doctors","selectedDoctor","chatStarted","currentDoctorName","loadHospitals","response","get","value","data","error","console","loadDepartments","loadDoctors","startChat","ElMessage","warning","doctor","find","d","loadHistory","message","senderId","receiverId","push","send","trim","content","senderType","senderName","receiverName"],"sources":["UserChat.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-container\">\r\n    <!-- 医院和科室选择 -->\r\n    <div class=\"selection-area\">\r\n      <el-select v-model=\"selectedHospital\" placeholder=\"选择医院\" @change=\"loadDepartments\">\r\n        <el-option\r\n            v-for=\"hospital in hospitals\"\r\n            :key=\"hospital.id\"\r\n            :label=\"hospital.name\"\r\n            :value=\"hospital.id\">\r\n        </el-option>\r\n      </el-select>\r\n\r\n      <el-select v-model=\"selectedDepartment\" placeholder=\"选择科室\" @change=\"loadDoctors\">\r\n        <el-option\r\n            v-for=\"dept in departments\"\r\n            :key=\"dept.id\"\r\n            :label=\"dept.name\"\r\n            :value=\"dept.id\">\r\n        </el-option>\r\n      </el-select>\r\n\r\n      <el-select v-model=\"selectedDoctor\" placeholder=\"选择医生\">\r\n        <el-option\r\n            v-for=\"doctor in doctors\"\r\n            :key=\"doctor.id\"\r\n            :label=\"doctor.name\"\r\n            :value=\"doctor.id\">\r\n        </el-option>\r\n      </el-select>\r\n\r\n      <el-button type=\"primary\" @click=\"startChat\">开始对话</el-button>\r\n    </div>\r\n\r\n    <!-- 聊天区域 -->\r\n    <div v-if=\"chatStarted\" class=\"chat-area\">\r\n      <h3>正在与 {{ currentDoctorName }} 医生对话</h3>\r\n      <div class=\"message-list\">\r\n        <div v-for=\"(msg, index) in messages\" :key=\"index\"\r\n             :class=\"['message', msg.senderType === 'patient' ? 'sent' : 'received']\">\r\n          {{ msg.content }}\r\n        </div>\r\n      </div>\r\n      <div class=\"input-area\">\r\n        <el-input v-model=\"newMessage\" @keyup.enter=\"send\" placeholder=\"输入消息...\"></el-input>\r\n        <el-button type=\"primary\" @click=\"send\">发送</el-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport { useWebSocket } from '../utils/websocket'\r\nimport axios from 'axios'\r\n\r\nconst { messages, connect, disconnect, sendMessage, connected } = useWebSocket()\r\nconst newMessage = ref('')\r\n\r\n// 从localStorage获取当前用户信息\r\nconst user = JSON.parse(localStorage.getItem('xm-user') || '{}')\r\nconst patientId = ref(user.id) // 当前登录用户ID\r\nconst patientName = ref(user.name || '患者') // 当前登录用户名\r\n\r\n// 选择相关数据\r\nconst hospitals = ref([])\r\nconst selectedHospital = ref('')\r\nconst departments = ref([])\r\nconst selectedDepartment = ref('')\r\nconst doctors = ref([])\r\nconst selectedDoctor = ref('')\r\n\r\n// 聊天状态\r\nconst chatStarted = ref(false)\r\nconst currentDoctorName = ref('')\r\n\r\n// 加载医院列表\r\nconst loadHospitals = async () => {\r\n  try {\r\n    const response = await axios.get('/hospitals/selectPage')\r\n    hospitals.value = response.data\r\n  } catch (error) {\r\n    console.error('加载医院列表失败:', error)\r\n  }\r\n}\r\n\r\n// 加载科室列表\r\nconst loadDepartments = async () => {\r\n  if (!selectedHospital.value) return\r\n\r\n  try {\r\n    const response = await axios.get(`/departments?hospitalId=${selectedHospital.value}`)\r\n    departments.value = response.data\r\n    selectedDepartment.value = ''\r\n    doctors.value = []\r\n  } catch (error) {\r\n    console.error('加载科室列表失败:', error)\r\n  }\r\n}\r\n\r\n// 加载医生列表\r\nconst loadDoctors = async () => {\r\n  if (!selectedDepartment.value) return\r\n\r\n  try {\r\n    const response = await axios.get(`/doctors?departmentId=${selectedDepartment.value}`)\r\n    doctors.value = response.data\r\n    selectedDoctor.value = ''\r\n  } catch (error) {\r\n    console.error('加载医生列表失败:', error)\r\n  }\r\n}\r\n\r\n// 开始聊天\r\nconst startChat = () => {\r\n  if (!selectedDoctor.value) {\r\n    ElMessage.warning('请选择医生')\r\n    return\r\n  }\r\n\r\n  const doctor = doctors.value.find(d => d.id === selectedDoctor.value)\r\n  if (!doctor) return\r\n\r\n  currentDoctorName.value = doctor.name\r\n  chatStarted.value = true\r\n\r\n  // 加载历史消息\r\n  loadHistory()\r\n\r\n  // 连接WebSocket\r\n  connect((message) => {\r\n    if ((message.senderId === selectedDoctor.value && message.receiverId === patientId.value) ||\r\n        (message.senderId === patientId.value && message.receiverId === selectedDoctor.value)) {\r\n      messages.value.push(message)\r\n    }\r\n  })\r\n}\r\n\r\n// 加载历史消息\r\nconst loadHistory = async () => {\r\n  try {\r\n    const response = await axios.get(`/chat/messages/${patientId.value}/${selectedDoctor.value}`)\r\n    messages.value = response.data\r\n  } catch (error) {\r\n    console.error('加载历史消息失败:', error)\r\n  }\r\n}\r\n\r\n// 发送消息\r\nconst send = () => {\r\n  if (!newMessage.value.trim()) {\r\n    ElMessage.warning('消息不能为空')\r\n    return\r\n  }\r\n\r\n  if (!chatStarted.value) {\r\n    ElMessage.warning('请先选择医生开始对话')\r\n    return\r\n  }\r\n\r\n  const message = {\r\n    content: newMessage.value,\r\n    senderType: 'patient',\r\n    senderId: patientId.value,\r\n    senderName: patientName.value,\r\n    receiverId: selectedDoctor.value,\r\n    receiverName: currentDoctorName.value\r\n  }\r\n\r\n  sendMessage(message)\r\n  newMessage.value = ''\r\n}\r\n\r\nonMounted(() => {\r\n  loadHospitals()\r\n})\r\n\r\nonUnmounted(() => {\r\n  disconnect()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.selection-area {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.chat-area {\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.message-list {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  margin: 20px 0;\r\n  padding: 10px;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n}\r\n\r\n.message {\r\n  margin: 10px 0;\r\n  padding: 10px 15px;\r\n  border-radius: 4px;\r\n  max-width: 70%;\r\n  word-break: break-word;\r\n}\r\n\r\n.sent {\r\n  background-color: #e1f3d8;\r\n  margin-left: auto;\r\n  text-align: right;\r\n}\r\n\r\n.received {\r\n  background-color: #f2f6fc;\r\n  margin-right: auto;\r\n}\r\n\r\n.input-area {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.input-area .el-input {\r\n  flex-grow: 1;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}