{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { format } from 'date-fns';\nexport default {\n  name: 'SubmitRegistration',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      doctor: null,\n      nowUser: null,\n      registrationDate: '',\n      registrationTime: '',\n      registrationPrice: this.$route.query.price,\n      isLoading: true\n    };\n  },\n  created() {\n    const doctorId = this.$route.query.doctorId;\n    const userId = this.user.id;\n    const rawDate = this.$route.query.date;\n    const rawTime = this.$route.query.time;\n\n    // 检查日期和时间是否有效\n    if (rawDate && rawTime) {\n      try {\n        // 尝试格式化日期\n        const dateObj = new Date(rawDate);\n        if (!isNaN(dateObj.getTime())) {\n          this.registrationDate = format(dateObj, 'yyyy-MM-dd');\n        } else {\n          console.error('无效的日期参数:', rawDate);\n          this.$message.error('无效的日期参数，请检查后重试');\n          return; // 如果日期无效，直接返回\n        }\n\n        // 尝试格式化时间\n        const combinedDateTime = `${rawDate}T${rawTime}:00`; // 添加 'T' 和秒部分以符合 ISO 8601 格式\n        const timeObj = new Date(combinedDateTime);\n        if (!isNaN(timeObj.getTime())) {\n          this.registrationTime = format(timeObj, 'HH:mm:ss');\n        } else {\n          console.error('无效的时间参数:', combinedDateTime);\n          this.$message.error('无效的时间参数，请检查后重试');\n          return; // 如果时间无效，直接返回\n        }\n      } catch (error) {\n        console.error('日期或时间格式化出错:', error);\n        this.$message.error('日期或时间格式化出错，请检查后重试');\n        return; // 如果出错，直接返回\n      }\n    } else {\n      console.error('日期或时间参数为空');\n      this.$message.error('日期或时间参数为空，请检查后重试');\n      return; // 如果日期或时间为空，直接返回\n    }\n\n    if (doctorId) {\n      this.fetchDoctorInfo(doctorId);\n    } else {\n      this.isLoading = false;\n    }\n    this.fetchUserInfo(userId);\n    console.log('当前用户信息:', this.user);\n  },\n  methods: {\n    fetchDoctorInfo(doctorId) {\n      this.isLoading = true;\n      this.$request.get('/doctor/selectDoctorById', {\n        params: {\n          doctorId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctor = response.data;\n        } else {\n          this.handleError('获取医生详细信息失败', response.data);\n        }\n      }).catch(error => {\n        this.handleError('获取医生详细信息失败', error);\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    fetchUserInfo(userId) {\n      this.isLoading = true;\n      const errorMessage = '获取用户详细信息失败，请稍后重试';\n      this.$request.get(`/user/selectById/${userId}`).then(response => {\n        if (response.data) {\n          this.nowUser = response.data;\n        } else {\n          this.handleError(errorMessage, response.data);\n        }\n      }).catch(error => {\n        this.handleError(errorMessage, error);\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    submitRegistration() {\n      console.log('提交挂号信息:', {\n        doctorId: this.doctor.id,\n        userId: this.nowUser.id,\n        registrationDate: this.registrationDate,\n        registrationTime: this.registrationTime,\n        registrationPrice: this.registrationPrice\n      });\n      this.$request.post('/registration/insert', {\n        doctorId: this.doctor.id,\n        userId: this.nowUser.id,\n        registrationDate: this.registrationDate,\n        registrationTime: this.registrationTime,\n        registrationPrice: this.registrationPrice\n      }).then(() => {\n        this.$message.success('挂号信息提交成功');\n        // 跳转到成功页面并传递相关数据\n        this.$router.push({\n          name: 'RegistrationSuccess',\n          params: {\n            doctorId: this.doctor.id,\n            userId: this.nowUser.id,\n            registrationDate: this.registrationDate,\n            registrationTime: this.registrationTime,\n            registrationPrice: this.registrationPrice\n          }\n        });\n      }).catch(error => {\n        this.handleError('提交挂号信息失败', error);\n      });\n    },\n    handleError(message, error) {\n      console.error(message, error);\n      this.$message.error(`${message}，请稍后重试`);\n    }\n  }\n};","map":{"version":3,"names":["format","name","data","user","JSON","parse","localStorage","getItem","doctor","nowUser","registrationDate","registrationTime","registrationPrice","$route","query","price","isLoading","created","doctorId","userId","id","rawDate","date","rawTime","time","dateObj","Date","isNaN","getTime","console","error","$message","combinedDateTime","timeObj","fetchDoctorInfo","fetchUserInfo","log","methods","$request","get","params","then","response","handleError","catch","finally","errorMessage","submitRegistration","post","success","$router","push","message"],"sources":["src/views/manager/SubmitRegistration.vue"],"sourcesContent":["<template>\r\n  <div class=\"submit-registration-page\">\r\n    <h2>提交挂号信息</h2>\r\n    <div v-if=\"doctor\">\r\n      <p>医生姓名：{{ doctor.name }}</p>\r\n      <p>挂号日期：{{ registrationDate }}</p>\r\n      <p>时间段：{{ registrationTime }}</p>\r\n      <p>价格：{{ registrationPrice }} 元</p>\r\n      <p>用户：{{ nowUser.name }}</p>\r\n      <p>用户联系方式：{{ nowUser.phone }}</p>\r\n      <!-- 添加确认提交按钮 -->\r\n      <button @click=\"submitRegistration\">确认提交</button>\r\n    </div>\r\n    <div v-else>\r\n      <p>未获取到医生信息，请稍后重试。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { format } from 'date-fns';\r\n\r\nexport default {\r\n  name: 'SubmitRegistration',\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      doctor: null,\r\n      nowUser: null,\r\n      registrationDate: '',\r\n      registrationTime: '',\r\n      registrationPrice: this.$route.query.price,\r\n      isLoading: true\r\n    };\r\n  },\r\n  created() {\r\n    const doctorId = this.$route.query.doctorId;\r\n    const userId = this.user.id;\r\n    const rawDate = this.$route.query.date;\r\n    const rawTime = this.$route.query.time;\r\n\r\n    // 检查日期和时间是否有效\r\n    if (rawDate && rawTime) {\r\n      try {\r\n        // 尝试格式化日期\r\n        const dateObj = new Date(rawDate);\r\n        if (!isNaN(dateObj.getTime())) {\r\n          this.registrationDate = format(dateObj, 'yyyy-MM-dd');\r\n        } else {\r\n          console.error('无效的日期参数:', rawDate);\r\n          this.$message.error('无效的日期参数，请检查后重试');\r\n          return; // 如果日期无效，直接返回\r\n        }\r\n\r\n        // 尝试格式化时间\r\n        const combinedDateTime = `${rawDate}T${rawTime}:00`; // 添加 'T' 和秒部分以符合 ISO 8601 格式\r\n        const timeObj = new Date(combinedDateTime);\r\n        if (!isNaN(timeObj.getTime())) {\r\n          this.registrationTime = format(timeObj, 'HH:mm:ss');\r\n        } else {\r\n          console.error('无效的时间参数:', combinedDateTime);\r\n          this.$message.error('无效的时间参数，请检查后重试');\r\n          return; // 如果时间无效，直接返回\r\n        }\r\n      } catch (error) {\r\n        console.error('日期或时间格式化出错:', error);\r\n        this.$message.error('日期或时间格式化出错，请检查后重试');\r\n        return; // 如果出错，直接返回\r\n      }\r\n    } else {\r\n      console.error('日期或时间参数为空');\r\n      this.$message.error('日期或时间参数为空，请检查后重试');\r\n      return; // 如果日期或时间为空，直接返回\r\n    }\r\n\r\n    if (doctorId) {\r\n      this.fetchDoctorInfo(doctorId);\r\n    } else {\r\n      this.isLoading = false;\r\n    }\r\n    this.fetchUserInfo(userId);\r\n    console.log('当前用户信息:', this.user);\r\n  },\r\n  methods: {\r\n    fetchDoctorInfo(doctorId) {\r\n      this.isLoading = true;\r\n      this.$request.get('/doctor/selectDoctorById', {\r\n        params: { doctorId }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data;\r\n            } else {\r\n              this.handleError('获取医生详细信息失败', response.data);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.handleError('获取医生详细信息失败', error);\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    fetchUserInfo(userId) {\r\n      this.isLoading = true;\r\n      const errorMessage = '获取用户详细信息失败，请稍后重试';\r\n      this.$request.get(`/user/selectById/${userId}`)\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.nowUser = response.data;\r\n            } else {\r\n              this.handleError(errorMessage, response.data);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            this.handleError(errorMessage, error);\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    submitRegistration() {\r\n      console.log('提交挂号信息:', {\r\n        doctorId: this.doctor.id,\r\n        userId: this.nowUser.id,\r\n        registrationDate: this.registrationDate,\r\n        registrationTime: this.registrationTime,\r\n        registrationPrice: this.registrationPrice\r\n      });\r\n      this.$request.post('/registration/insert', {\r\n        doctorId: this.doctor.id,\r\n        userId: this.nowUser.id,\r\n        registrationDate: this.registrationDate,\r\n        registrationTime: this.registrationTime,\r\n        registrationPrice: this.registrationPrice\r\n      })\r\n          .then(() => {\r\n            this.$message.success('挂号信息提交成功');\r\n            // 跳转到成功页面并传递相关数据\r\n            this.$router.push({\r\n              name: 'RegistrationSuccess',\r\n              params: {\r\n                doctorId: this.doctor.id,\r\n                userId: this.nowUser.id,\r\n                registrationDate: this.registrationDate,\r\n                registrationTime: this.registrationTime,\r\n                registrationPrice: this.registrationPrice\r\n              }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            this.handleError('提交挂号信息失败', error);\r\n          });\r\n    },\r\n    handleError(message, error) {\r\n      console.error(message, error);\r\n      this.$message.error(`${message}，请稍后重试`);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.submit-registration-page {\r\n  padding: 20px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}