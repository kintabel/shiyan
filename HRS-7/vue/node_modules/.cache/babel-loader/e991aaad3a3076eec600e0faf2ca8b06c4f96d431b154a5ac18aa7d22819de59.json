{"ast":null,"code":"import { ref } from 'vue';\nimport Stomp from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nexport function useWebSocket() {\n  const messages = ref([]);\n  const stompClient = ref(null);\n  const connected = ref(false);\n  const connect = onMessageReceived => {\n    const socket = new SockJS('http://localhost:8080/ws');\n    stompClient.value = Stomp.over(socket);\n    stompClient.value.connect({}, () => {\n      connected.value = true;\n      stompClient.value.subscribe('/topic/messages', message => {\n        onMessageReceived(JSON.parse(message.body));\n      });\n    }, error => {\n      console.error('WebSocket连接失败:', error);\n    });\n  };\n  const disconnect = () => {\n    if (stompClient.value) {\n      stompClient.value.disconnect();\n    }\n    connected.value = false;\n  };\n  const sendMessage = message => {\n    if (stompClient.value && connected.value) {\n      stompClient.value.send(\"/app/chat\", {}, JSON.stringify(message));\n    }\n  };\n  return {\n    messages,\n    connect,\n    disconnect,\n    sendMessage,\n    connected\n  };\n}","map":{"version":3,"names":["ref","Stomp","SockJS","useWebSocket","messages","stompClient","connected","connect","onMessageReceived","socket","value","over","subscribe","message","JSON","parse","body","error","console","disconnect","sendMessage","send","stringify"],"sources":["E:/专业设计项目/HRS/HRS-7/vue/src/utils/websocket.js"],"sourcesContent":["import { ref } from 'vue';\r\n\r\nimport Stomp from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nexport function useWebSocket() {\r\n    const messages = ref([]);\r\n    const stompClient = ref(null);\r\n    const connected = ref(false);\r\n\r\n    const connect = (onMessageReceived) => {\r\n        const socket = new SockJS('http://localhost:8080/ws');\r\n        stompClient.value = Stomp.over(socket);\r\n        stompClient.value.connect({}, () => {\r\n            connected.value = true;\r\n            stompClient.value.subscribe('/topic/messages', (message) => {\r\n                onMessageReceived(JSON.parse(message.body));\r\n            });\r\n        }, (error) => {\r\n            console.error('WebSocket连接失败:', error);\r\n        });\r\n    };\r\n\r\n    const disconnect = () => {\r\n        if (stompClient.value) {\r\n            stompClient.value.disconnect();\r\n        }\r\n        connected.value = false;\r\n    };\r\n\r\n    const sendMessage = (message) => {\r\n        if (stompClient.value && connected.value) {\r\n            stompClient.value.send(\"/app/chat\", {}, JSON.stringify(message));\r\n        }\r\n    };\r\n\r\n    return {\r\n        messages,\r\n        connect,\r\n        disconnect,\r\n        sendMessage,\r\n        connected\r\n    };\r\n}"],"mappings":"AAAA,SAASA,GAAG,QAAQ,KAAK;AAEzB,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,MAAM,MAAM,eAAe;AAElC,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAGJ,GAAG,CAAC,EAAE,CAAC;EACxB,MAAMK,WAAW,GAAGL,GAAG,CAAC,IAAI,CAAC;EAC7B,MAAMM,SAAS,GAAGN,GAAG,CAAC,KAAK,CAAC;EAE5B,MAAMO,OAAO,GAAIC,iBAAiB,IAAK;IACnC,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAAC,0BAA0B,CAAC;IACrDG,WAAW,CAACK,KAAK,GAAGT,KAAK,CAACU,IAAI,CAACF,MAAM,CAAC;IACtCJ,WAAW,CAACK,KAAK,CAACH,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;MAChCD,SAAS,CAACI,KAAK,GAAG,IAAI;MACtBL,WAAW,CAACK,KAAK,CAACE,SAAS,CAAC,iBAAiB,EAAGC,OAAO,IAAK;QACxDL,iBAAiB,CAACM,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;MAC/C,CAAC,CAAC;IACN,CAAC,EAAGC,KAAK,IAAK;MACVC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACrB,IAAId,WAAW,CAACK,KAAK,EAAE;MACnBL,WAAW,CAACK,KAAK,CAACS,UAAU,CAAC,CAAC;IAClC;IACAb,SAAS,CAACI,KAAK,GAAG,KAAK;EAC3B,CAAC;EAED,MAAMU,WAAW,GAAIP,OAAO,IAAK;IAC7B,IAAIR,WAAW,CAACK,KAAK,IAAIJ,SAAS,CAACI,KAAK,EAAE;MACtCL,WAAW,CAACK,KAAK,CAACW,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEP,IAAI,CAACQ,SAAS,CAACT,OAAO,CAAC,CAAC;IACpE;EACJ,CAAC;EAED,OAAO;IACHT,QAAQ;IACRG,OAAO;IACPY,UAAU;IACVC,WAAW;IACXd;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}