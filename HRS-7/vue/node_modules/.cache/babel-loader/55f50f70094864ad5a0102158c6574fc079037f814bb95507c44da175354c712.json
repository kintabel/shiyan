{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Doctor',\n  data() {\n    return {\n      doctors: [],\n      schedules: {},\n      // 存储医生排班信息 {doctorId: schedule}\n      isLoading: true,\n      currentHour: new Date().getHours(),\n      isAppointment: this.$route.query.isAppointment === 'true'\n    };\n  },\n  computed: {\n    isDayTime() {\n      return this.currentHour >= 8 && this.currentHour < 18;\n    }\n  },\n  created() {\n    this.fetchDoctors().then(() => {\n      this.fetchAllSchedules();\n    });\n  },\n  methods: {\n    // 获取单个医生的排班信息\n    getDoctorSchedule(doctorId) {\n      return this.schedules[doctorId] || null;\n      console.log(this.schedules);\n    },\n    // 获取所有医生的排班信息\n    async fetchAllSchedules() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      const today = parseTime(new Date(), '{y}-{m}-{d}');\n      try {\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\n          params: {\n            hospitalId: hospitalId,\n            startDate: today,\n            endDate: today\n          }\n        });\n        if (response.data) {\n          // 将排班信息按doctorId存入schedules对象\n          console.log(response.data);\n          response.data.forEach(schedule => {\n            this.$set(this.schedules, schedule.doctorId, schedule);\n          });\n        }\n      } catch (error) {\n        console.error('获取排班信息失败:', error);\n        this.$message.error('获取排班信息失败');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // 获取医生列表\n    async fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      try {\n        const response = await this.$request.get('/doctor/selectDoc', {\n          params: {\n            hospitalId: hospitalId,\n            departmentId: departmentId\n          }\n        });\n        if (response.data) {\n          this.doctors = response.data;\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }\n    },\n    // 判断医生是否可预约\n    isAvailable(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      if (!schedule) return false;\n\n      // 白天可以预约所有医生，晚上只能预约夜班医生\n      return this.isDayTime || schedule.shiftType === 'NIGHT';\n    },\n    // 按钮文本\n    getButtonText(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      if (!schedule) return '今日无排班';\n      if (!this.isDayTime && schedule.shiftType === 'DAY') {\n        return '非夜间时段';\n      }\n      return '预约挂号';\n    },\n    // 班次标签样式\n    getShiftTagType(doctorId) {\n      const schedule = this.getDoctorSchedule(doctorId);\n      if (!schedule) return 'info';\n      return schedule.shiftType === 'DAY' ? 'success' : 'warning';\n    },\n    // 获取班次类型文本\n    getShiftType(doctorId) {\n      const schedule = this.getDoctorSchedule(doctorId);\n      if (!schedule) return '无排班';\n      return schedule.shiftType === 'DAY' ? '白班' : '夜班';\n    },\n    // 跳转到挂号页面\n    goToRegistration(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      const shiftType = schedule?.shiftType === 'DAY' ? 1 : 2;\n      this.$router.push({\n        name: 'Registration',\n        params: {\n          doctorId: doctor.id\n        },\n        query: {\n          status: 0,\n          shiftType: shiftType\n        }\n      });\n    },\n    // 获取医生职称\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","doctors","schedules","isLoading","currentHour","Date","getHours","isAppointment","$route","query","computed","isDayTime","created","fetchDoctors","then","fetchAllSchedules","methods","getDoctorSchedule","doctorId","console","log","hospitalId","params","departmentId","today","response","$request","get","startDate","endDate","forEach","schedule","$set","error","$message","isAvailable","doctor","id","shiftType","getButtonText","getShiftTagType","getShiftType","goToRegistration","$router","push","status","getDoctorTitle"],"sources":["src/views/user/Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"doctors\" stripe>\r\n        <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n        <el-table-column label=\"医生职称\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getDoctorTitle(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.id)\">\r\n              {{ getShiftType(scope.row.id) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row)\"\r\n                type=\"primary\"\r\n                :disabled=\"!isAvailable(scope.row)\"\r\n            >\r\n              {{ getButtonText(scope.row) }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [],\r\n      schedules: {}, // 存储医生排班信息 {doctorId: schedule}\r\n      isLoading: true,\r\n      currentHour: new Date().getHours(),\r\n      isAppointment: this.$route.query.isAppointment === 'true'\r\n    }\r\n  },\r\n  computed: {\r\n    isDayTime() {\r\n      return this.currentHour >= 8 && this.currentHour < 18\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDoctors().then(() => {\r\n      this.fetchAllSchedules()\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取单个医生的排班信息\r\n    getDoctorSchedule(doctorId) {\r\n      return this.schedules[doctorId] || null\r\n      console.log(this.schedules)\r\n    },\r\n\r\n    // 获取所有医生的排班信息\r\n    async fetchAllSchedules() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n      const today = parseTime(new Date(), '{y}-{m}-{d}')\r\n\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            startDate: today,\r\n            endDate: today\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          // 将排班信息按doctorId存入schedules对象\r\n          console.log(response.data)\r\n          response.data.forEach(schedule => {\r\n            this.$set(this.schedules, schedule.doctorId, schedule)\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.error('获取排班信息失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 获取医生列表\r\n    async fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n\r\n      try {\r\n        const response = await this.$request.get('/doctor/selectDoc', {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            departmentId: departmentId\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          this.doctors = response.data\r\n        } else {\r\n          console.error('获取医生列表数据格式错误:', response.data)\r\n          this.$message.error('获取医生列表失败，请稍后重试')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取医生列表失败:', error)\r\n        this.$message.error('获取医生列表失败，请稍后重试')\r\n      }\r\n    },\r\n\r\n    // 判断医生是否可预约\r\n    isAvailable(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return false\r\n\r\n      // 白天可以预约所有医生，晚上只能预约夜班医生\r\n      return this.isDayTime || schedule.shiftType === 'NIGHT'\r\n    },\r\n\r\n    // 按钮文本\r\n    getButtonText(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return '今日无排班'\r\n\r\n      if (!this.isDayTime && schedule.shiftType === 'DAY') {\r\n        return '非夜间时段'\r\n      }\r\n      return '预约挂号'\r\n    },\r\n\r\n    // 班次标签样式\r\n    getShiftTagType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return 'info'\r\n      return schedule.shiftType === 'DAY' ? 'success' : 'warning'\r\n    },\r\n\r\n    // 获取班次类型文本\r\n    getShiftType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return '无排班'\r\n      return schedule.shiftType === 'DAY' ? '白班' : '夜班'\r\n    },\r\n\r\n    // 跳转到挂号页面\r\n    goToRegistration(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      const shiftType = schedule?.shiftType === 'DAY' ? 1 : 2\r\n\r\n        this.$router.push({\r\n          name: 'Registration',\r\n          params: { doctorId: doctor.id },\r\n          query: {\r\n            status: 0,\r\n            shiftType: shiftType\r\n          }\r\n        })\r\n    },\r\n\r\n    // 获取医生职称\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}