{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'DoctorChat',\n  data() {\n    return {\n      newMessage: '',\n      // 当前医生信息\n      doctor: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      // 患者相关\n      patients: [],\n      selectedPatientId: null,\n      currentPatientName: '',\n      patientLoading: false,\n      // 消息相关\n      messages: [],\n      refreshInterval: null,\n      // 控制聊天框显示的标志位\n      isChatStarted: false\n    };\n  },\n  computed: {\n    doctorId() {\n      return this.doctor.id || '';\n    },\n    doctorName() {\n      return this.doctor.name || '医生';\n    }\n  },\n  methods: {\n    // 加载患者列表\n    loadPatients() {\n      this.patientLoading = true;\n      this.$request.get('/chat/selectPatients', {\n        params: {\n          doctorId: this.doctorId\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.patients = response.data || [];\n          // 自动选择第一个患者（可选）\n          if (this.patients.length > 0 && !this.selectedPatientId) {\n            this.selectedPatientId = this.patients[0].id;\n            this.currentPatientName = this.patients[0].name;\n          }\n        }\n      }).catch(error => {\n        console.error('加载患者列表失败:', error);\n        this.$message.error('加载患者列表失败');\n      }).finally(() => {\n        this.patientLoading = false;\n      });\n    },\n    startChat() {\n      const patient = this.patients.find(p => p.id === this.selectedPatientId);\n      if (!patient) {\n        this.$message.warning('请先选择患者');\n        return;\n      }\n      this.currentPatientName = patient.name;\n      this.loadHistory();\n      // 设置聊天框显示标志位为 true\n      this.isChatStarted = true;\n      // 设置定时刷新\n      this.setupRefresh();\n    },\n    // 设置消息刷新\n    setupRefresh() {\n      // 先清除已有定时器\n      if (this.refreshInterval) {\n        clearInterval(this.refreshInterval);\n      }\n      // 每5秒刷新一次消息\n      this.refreshInterval = setInterval(() => {\n        this.loadHistory();\n      }, 5000);\n    },\n    // 手动刷新消息\n    refreshMessages() {\n      this.loadHistory();\n      this.$message.success('消息已刷新');\n    },\n    // 加载历史消息\n    loadHistory() {\n      if (!this.selectedPatientId) return;\n      const role = 'doctor';\n      console.log(`加载历史消息: 医生 ${this.doctorId} 与患者 ${this.selectedPatientId} 的消息`);\n      this.$request.get(`/chat/messages/${this.selectedPatientId}/${this.doctorId}/${role}`).then(response => {\n        if (response.code == 200) {\n          this.messages = response.data || [];\n          // 滚动到底部\n          this.$nextTick(() => {\n            const container = this.$el.querySelector('.message-list');\n            if (container) {\n              container.scrollTop = container.scrollHeight;\n            }\n          });\n        }\n      }).catch(error => {\n        console.error('加载历史消息失败:', error);\n      });\n    },\n    // 发送消息\n    sendMessage() {\n      if (!this.newMessage.trim()) {\n        this.$message.warning('消息不能为空');\n        return;\n      }\n      if (!this.selectedPatientId) {\n        this.$message.warning('请先选择患者');\n        return;\n      }\n      const message = {\n        content: this.newMessage,\n        senderType: 'doctor',\n        senderId: this.doctorId,\n        receiverId: this.selectedPatientId\n      };\n      this.$request.post('/chat/send', message).then(response => {\n        if (1) {\n          // 直接将新消息添加到消息列表\n          this.messages.push(message);\n          this.newMessage = '';\n          // 滚动到底部\n          this.$nextTick(() => {\n            const container = this.$el.querySelector('.message-list');\n            if (container) {\n              container.scrollTop = container.scrollHeight;\n            }\n          });\n        }\n      }).catch(error => {\n        console.error('发送消息失败:', error);\n        this.$message.error('发送消息失败');\n      });\n    },\n    // 格式化时间\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\n    }\n  },\n  mounted() {\n    this.loadPatients();\n  },\n  beforeDestroy() {\n    // 清除定时器\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n};","map":{"version":3,"names":["name","data","newMessage","doctor","JSON","parse","localStorage","getItem","patients","selectedPatientId","currentPatientName","patientLoading","messages","refreshInterval","isChatStarted","computed","doctorId","id","doctorName","methods","loadPatients","$request","get","params","then","response","code","length","catch","error","console","$message","finally","startChat","patient","find","p","warning","loadHistory","setupRefresh","clearInterval","setInterval","refreshMessages","success","role","log","$nextTick","container","$el","querySelector","scrollTop","scrollHeight","sendMessage","trim","message","content","senderType","senderId","receiverId","post","push","formatTime","timestamp","date","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","mounted","beforeDestroy"],"sources":["src/views/doctor/DoctorChat.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-card>\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>医患在线沟通（医生端）</span>\r\n      </div>\r\n\r\n      <!-- 患者选择区域 -->\r\n      <el-row :gutter=\"20\" class=\"selection-area\">\r\n        <el-col :span=\"24\">\r\n          <el-card shadow=\"hover\">\r\n            <div slot=\"header\">\r\n              <span>选择患者</span>\r\n              <el-button\r\n                  type=\"text\"\r\n                  @click=\"loadPatients\"\r\n                  style=\"float: right; padding: 3px 0\"\r\n              >\r\n                <i class=\"el-icon-refresh\"></i> 刷新患者列表\r\n              </el-button>\r\n            </div>\r\n            <div>\r\n              <el-select\r\n                  v-model=\"selectedPatientId\"\r\n                  placeholder=\"请选择患者\"\r\n                  style=\"width: 100%\"\r\n                  :loading=\"patientLoading\"\r\n                  filterable\r\n              >\r\n                <el-option\r\n                    v-for=\"patient in patients\"\r\n                    :key=\"patient.id\"\r\n                    :label=\"patient.name\"\r\n                    :value=\"patient.id\"\r\n                />\r\n              </el-select>\r\n              <el-button\r\n                  type=\"primary\"\r\n                  @click=\"startChat\"\r\n                  style=\"margin-left: 10px\"\r\n              >\r\n                开始对话\r\n              </el-button>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 聊天区域，添加 v-if 判断 -->\r\n      <el-card v-if=\"isChatStarted\" shadow=\"hover\" style=\"margin-top: 20px\">\r\n        <div slot=\"header\">\r\n          <span>与 {{ currentPatientName }} 的对话</span>\r\n          <el-button\r\n              type=\"text\"\r\n              @click=\"refreshMessages\"\r\n              style=\"float: right; padding: 3px 0\"\r\n          >\r\n            <i class=\"el-icon-refresh\"></i> 刷新消息\r\n          </el-button>\r\n        </div>\r\n\r\n        <div class=\"chat-area\">\r\n          <div class=\"message-list\">\r\n            <div\r\n                v-for=\"(msg, index) in messages\"\r\n                :key=\"index\"\r\n                :class=\"['message', msg.senderType === 'doctor'? 'Sent' : 'Received']\"\r\n            >\r\n              <div class=\"message-content\">{{ msg.content }}</div>\r\n              <div class=\"message-meta\">\r\n                <span class=\"message-sender\">{{ msg.senderName }}</span>\r\n                <span class=\"message-time\">{{ formatTime(msg.timestamp) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"input-area\">\r\n            <el-input\r\n                type=\"textarea\"\r\n                :rows=\"3\"\r\n                v-model=\"newMessage\"\r\n                placeholder=\"输入消息...\"\r\n                resize=\"none\"\r\n                @keyup.enter.native=\"sendMessage\"\r\n            />\r\n            <el-button\r\n                type=\"primary\"\r\n                @click=\"sendMessage\"\r\n                :disabled=\"!newMessage.trim()\"\r\n                style=\"margin-top: 10px; float: right\"\r\n            >\r\n              发送\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n      </el-card>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'DoctorChat',\r\n  data() {\r\n    return {\r\n      newMessage: '',\r\n      // 当前医生信息\r\n      doctor: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      // 患者相关\r\n      patients: [],\r\n      selectedPatientId: null,\r\n      currentPatientName: '',\r\n      patientLoading: false,\r\n      // 消息相关\r\n      messages: [],\r\n      refreshInterval: null,\r\n      // 控制聊天框显示的标志位\r\n      isChatStarted: false\r\n    };\r\n  },\r\n  computed: {\r\n    doctorId() {\r\n      return this.doctor.id || '';\r\n    },\r\n    doctorName() {\r\n      return this.doctor.name || '医生';\r\n    }\r\n  },\r\n  methods: {\r\n    // 加载患者列表\r\n    loadPatients() {\r\n      this.patientLoading = true;\r\n      this.$request.get('/chat/selectPatients', { params: { doctorId: this.doctorId } })\r\n          .then(response => {\r\n            if (response.code == 200) {\r\n              this.patients = response.data || [];\r\n              // 自动选择第一个患者（可选）\r\n              if (this.patients.length > 0 &&!this.selectedPatientId) {\r\n                this.selectedPatientId = this.patients[0].id;\r\n                this.currentPatientName = this.patients[0].name;\r\n              }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('加载患者列表失败:', error);\r\n            this.$message.error('加载患者列表失败');\r\n          })\r\n          .finally(() => {\r\n            this.patientLoading = false;\r\n          });\r\n    },\r\n\r\n    startChat() {\r\n      const patient = this.patients.find(p => p.id === this.selectedPatientId);\r\n      if (!patient) {\r\n        this.$message.warning('请先选择患者');\r\n        return;\r\n      }\r\n      this.currentPatientName = patient.name;\r\n      this.loadHistory();\r\n      // 设置聊天框显示标志位为 true\r\n      this.isChatStarted = true;\r\n      // 设置定时刷新\r\n      this.setupRefresh();\r\n    },\r\n\r\n    // 设置消息刷新\r\n    setupRefresh() {\r\n      // 先清除已有定时器\r\n      if (this.refreshInterval) {\r\n        clearInterval(this.refreshInterval);\r\n      }\r\n      // 每5秒刷新一次消息\r\n      this.refreshInterval = setInterval(() => {\r\n        this.loadHistory();\r\n      }, 5000);\r\n    },\r\n\r\n    // 手动刷新消息\r\n    refreshMessages() {\r\n      this.loadHistory();\r\n      this.$message.success('消息已刷新');\r\n    },\r\n\r\n    // 加载历史消息\r\n    loadHistory() {\r\n      if (!this.selectedPatientId) return\r\n      const role = 'doctor'\r\n      console.log(`加载历史消息: 医生 ${this.doctorId} 与患者 ${this.selectedPatientId} 的消息`)\r\n      this.$request.get(`/chat/messages/${this.selectedPatientId}/${this.doctorId}/${role}`)\r\n          .then(response => {\r\n            if (response.code == 200) {\r\n              this.messages = response.data || []\r\n              // 滚动到底部\r\n              this.$nextTick(() => {\r\n                const container = this.$el.querySelector('.message-list')\r\n                if (container) {\r\n                  container.scrollTop = container.scrollHeight\r\n                }\r\n              })\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('加载历史消息失败:', error)\r\n          })\r\n    },\r\n\r\n    // 发送消息\r\n    sendMessage() {\r\n      if (!this.newMessage.trim()) {\r\n        this.$message.warning('消息不能为空');\r\n        return;\r\n      }\r\n\r\n      if (!this.selectedPatientId) {\r\n        this.$message.warning('请先选择患者');\r\n        return;\r\n      }\r\n\r\n      const message = {\r\n        content: this.newMessage,\r\n        senderType: 'doctor',\r\n        senderId: this.doctorId,\r\n        receiverId: this.selectedPatientId\r\n      };\r\n\r\n      this.$request.post('/chat/send', message)\r\n          .then(response => {\r\n            if (1) {\r\n              // 直接将新消息添加到消息列表\r\n              this.messages.push(message);\r\n              this.newMessage = '';\r\n              // 滚动到底部\r\n              this.$nextTick(() => {\r\n                const container = this.$el.querySelector('.message-list');\r\n                if (container) {\r\n                  container.scrollTop = container.scrollHeight;\r\n                }\r\n              });\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('发送消息失败:', error);\r\n            this.$message.error('发送消息失败');\r\n          });\r\n    },\r\n\r\n    // 格式化时间\r\n    formatTime(timestamp) {\r\n      if (!timestamp) return '';\r\n      const date = new Date(timestamp);\r\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadPatients();\r\n  },\r\n  beforeDestroy() {\r\n    // 清除定时器\r\n    if (this.refreshInterval) {\r\n      clearInterval(this.refreshInterval);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 保持与患者端完全一致的样式 */\r\n.app-container {\r\n  padding: 20px;\r\n}\r\n\r\n.selection-area {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chat-area {\r\n  padding: 10px;\r\n}\r\n\r\n.message-list {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n  background-color: #fafafa;\r\n}\r\n\r\n.message {\r\n  margin: 10px 0;\r\n  padding: 10px 15px;\r\n  border-radius: 8px;\r\n  max-width: 80%;\r\n  word-break: break-word;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 5px;\r\n  line-height: 1.5;\r\n}\r\n\r\n.message-meta {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 5px;\r\n}\r\n\r\n.sent {\r\n  background-color: #e1f3d8;\r\n  margin-left: auto;\r\n  border-bottom-right-radius: 0;\r\n}\r\n\r\n.received {\r\n  background-color: #f2f6fc;\r\n  margin-right: auto;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.input-area {\r\n  margin-top: 20px;\r\n}\r\n\r\n.el-icon-refresh {\r\n  margin-right: 5px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}