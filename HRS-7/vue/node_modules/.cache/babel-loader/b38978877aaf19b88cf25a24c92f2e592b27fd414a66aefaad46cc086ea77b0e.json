{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AppointmentDoctor',\n  data() {\n    return {\n      doctors: [],\n      // 医生列表\n      isLoading: true,\n      selectedDoctorId: null,\n      dates: [],\n      selectedDate: null,\n      selectedTime: null\n    };\n  },\n  created() {\n    this.fetchDoctors();\n    this.generateDates();\n  },\n  methods: {\n    // 获取医生列表\n    fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId; // 获取医院 ID\n      const departmentId = this.$route.params.departmentId; // 获取科室 ID\n      console.log('hospitalId:', hospitalId);\n      console.log('departmentId:', departmentId);\n\n      // 调用 doctor/selectdoc 接口\n      this.$request.get('/doctor/selectDoc', {\n        params: {\n          hospitalId: hospitalId,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctors = response.data; // 假设接口返回的数据是医生列表\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    // 获取医生职称\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    },\n    // 选择医生\n    selectDoctor(doctorId) {\n      this.selectedDoctorId = doctorId;\n      this.selectedDate = null;\n      this.selectedTime = null;\n    },\n    // 生成当天及以后七天的日期\n    generateDates() {\n      const today = new Date();\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(today);\n        date.setDate(date.getDate() + i);\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        this.dates.push(`${year}-${month}-${day}`);\n      }\n    },\n    // 选择日期\n    selectDate(date) {\n      this.selectedDate = date;\n      this.selectedTime = null;\n    },\n    // 选择时段\n    selectTime(time) {\n      this.selectedTime = time;\n    },\n    // 确认预约\n    confirmAppointment() {\n      // 这里可以调用后端接口进行预约操作\n      console.log('预约信息：', {\n        doctorId: this.selectedDoctorId,\n        date: this.selectedDate,\n        time: this.selectedTime\n      });\n      this.$message.success('预约成功');\n      // 重置选择\n      this.selectedDoctorId = null;\n      this.selectedDate = null;\n      this.selectedTime = null;\n    }\n  }\n};","map":{"version":3,"names":["name","data","doctors","isLoading","selectedDoctorId","dates","selectedDate","selectedTime","created","fetchDoctors","generateDates","methods","hospitalId","$route","params","departmentId","console","log","$request","get","then","response","error","$message","catch","finally","getDoctorTitle","status","selectDoctor","doctorId","today","Date","i","date","setDate","getDate","year","getFullYear","month","String","getMonth","padStart","day","push","selectDate","selectTime","time","confirmAppointment","success"],"sources":["src/views/user/AppointmentRegister.vue"],"sourcesContent":["<template>\r\n  <div class=\"appointment-page\">\r\n    <h1>预约挂号</h1>\r\n    <!-- 选择医生部分 -->\r\n    <div class=\"doctor-selection\">\r\n      <h2>选择医生</h2>\r\n      <div v-if=\"isLoading\" class=\"loading-text\">加载中，请稍候...</div>\r\n      <div v-else>\r\n        <ul>\r\n          <li v-for=\"(doctor, index) in doctors\" :key=\"index\" @click=\"selectDoctor(doctor.id)\">\r\n            {{ doctor.name }} - {{ getDoctorTitle(doctor.status) }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <!-- 选择日期部分 -->\r\n    <div v-if=\"selectedDoctorId\" class=\"date-selection\">\r\n      <h2>选择日期</h2>\r\n      <ul>\r\n        <li v-for=\"(date, index) in dates\" :key=\"index\" @click=\"selectDate(date)\">\r\n          {{ date }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <!-- 选择时段部分 -->\r\n    <div v-if=\"selectedDate\" class=\"time-selection\">\r\n      <h2>选择时段</h2>\r\n      <ul>\r\n        <li @click=\"selectTime('上午')\">上午</li>\r\n        <li @click=\"selectTime('下午')\">下午</li>\r\n      </ul>\r\n    </div>\r\n    <!-- 确认预约按钮 -->\r\n    <div v-if=\"selectedDoctorId && selectedDate && selectedTime\" class=\"confirm-button\">\r\n      <el-button type=\"primary\" @click=\"confirmAppointment\">确认预约</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'AppointmentDoctor',\r\n  data() {\r\n    return {\r\n      doctors: [], // 医生列表\r\n      isLoading: true,\r\n      selectedDoctorId: null,\r\n      dates: [],\r\n      selectedDate: null,\r\n      selectedTime: null\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchDoctors();\r\n    this.generateDates();\r\n  },\r\n  methods: {\r\n    // 获取医生列表\r\n    fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId; // 获取医院 ID\r\n      const departmentId = this.$route.params.departmentId; // 获取科室 ID\r\n      console.log('hospitalId:', hospitalId);\r\n      console.log('departmentId:', departmentId);\r\n\r\n      // 调用 doctor/selectdoc 接口\r\n      this.$request.get('/doctor/selectDoc', {\r\n        params: {\r\n          hospitalId: hospitalId,\r\n          departmentId: departmentId\r\n        }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctors = response.data; // 假设接口返回的数据是医生列表\r\n            } else {\r\n              console.error('获取医生列表数据格式错误:', response.data);\r\n              this.$message.error('获取医生列表失败，请稍后重试');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生列表失败:', error);\r\n            this.$message.error('获取医生列表失败，请稍后重试');\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    // 获取医生职称\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1:\r\n          return '医师';\r\n        case 2:\r\n          return '副主治医师';\r\n        case 3:\r\n          return '主治医师';\r\n        case 4:\r\n          return '专家';\r\n        case 5:\r\n          return '急诊';\r\n        default:\r\n          return '未知职称';\r\n      }\r\n    },\r\n    // 选择医生\r\n    selectDoctor(doctorId) {\r\n      this.selectedDoctorId = doctorId;\r\n      this.selectedDate = null;\r\n      this.selectedTime = null;\r\n    },\r\n    // 生成当天及以后七天的日期\r\n    generateDates() {\r\n      const today = new Date();\r\n      for (let i = 0; i < 7; i++) {\r\n        const date = new Date(today);\r\n        date.setDate(date.getDate() + i);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        this.dates.push(`${year}-${month}-${day}`);\r\n      }\r\n    },\r\n    // 选择日期\r\n    selectDate(date) {\r\n      this.selectedDate = date;\r\n      this.selectedTime = null;\r\n    },\r\n    // 选择时段\r\n    selectTime(time) {\r\n      this.selectedTime = time;\r\n    },\r\n    // 确认预约\r\n    confirmAppointment() {\r\n      // 这里可以调用后端接口进行预约操作\r\n      console.log('预约信息：', {\r\n        doctorId: this.selectedDoctorId,\r\n        date: this.selectedDate,\r\n        time: this.selectedTime\r\n      });\r\n      this.$message.success('预约成功');\r\n      // 重置选择\r\n      this.selectedDoctorId = null;\r\n      this.selectedDate = null;\r\n      this.selectedTime = null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.appointment-page {\r\n  padding: 20px;\r\n}\r\n\r\n.doctor-selection,\r\n.date-selection,\r\n.time-selection {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.loading-text {\r\n  text-align: center;\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n\r\nli {\r\n  cursor: pointer;\r\n}\r\n\r\n.confirm-button {\r\n  text-align: center;\r\n}\r\n</style>"],"mappings":";AAwCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,SAAA;MACAC,gBAAA;MACAC,KAAA;MACAC,YAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,YAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACA;IACAF,aAAA;MACA,MAAAG,UAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,UAAA;MACA,MAAAG,YAAA,QAAAF,MAAA,CAAAC,MAAA,CAAAC,YAAA;MACAC,OAAA,CAAAC,GAAA,gBAAAL,UAAA;MACAI,OAAA,CAAAC,GAAA,kBAAAF,YAAA;;MAEA;MACA,KAAAG,QAAA,CAAAC,GAAA;QACAL,MAAA;UACAF,UAAA,EAAAA,UAAA;UACAG,YAAA,EAAAA;QACA;MACA,GACAK,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAApB,IAAA;UACA,KAAAC,OAAA,GAAAmB,QAAA,CAAApB,IAAA;QACA;UACAe,OAAA,CAAAM,KAAA,kBAAAD,QAAA,CAAApB,IAAA;UACA,KAAAsB,QAAA,CAAAD,KAAA;QACA;MACA,GACAE,KAAA,CAAAF,KAAA;QACAN,OAAA,CAAAM,KAAA,cAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA,GACAG,OAAA;QACA,KAAAtB,SAAA;MACA;IACA;IACA;IACAuB,eAAAC,MAAA;MACA,QAAAA,MAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IACA;IACAC,aAAAC,QAAA;MACA,KAAAzB,gBAAA,GAAAyB,QAAA;MACA,KAAAvB,YAAA;MACA,KAAAC,YAAA;IACA;IACA;IACAG,cAAA;MACA,MAAAoB,KAAA,OAAAC,IAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,MAAAA,CAAA;QACA,MAAAC,IAAA,OAAAF,IAAA,CAAAD,KAAA;QACAG,IAAA,CAAAC,OAAA,CAAAD,IAAA,CAAAE,OAAA,KAAAH,CAAA;QACA,MAAAI,IAAA,GAAAH,IAAA,CAAAI,WAAA;QACA,MAAAC,KAAA,GAAAC,MAAA,CAAAN,IAAA,CAAAO,QAAA,QAAAC,QAAA;QACA,MAAAC,GAAA,GAAAH,MAAA,CAAAN,IAAA,CAAAE,OAAA,IAAAM,QAAA;QACA,KAAApC,KAAA,CAAAsC,IAAA,IAAAP,IAAA,IAAAE,KAAA,IAAAI,GAAA;MACA;IACA;IACA;IACAE,WAAAX,IAAA;MACA,KAAA3B,YAAA,GAAA2B,IAAA;MACA,KAAA1B,YAAA;IACA;IACA;IACAsC,WAAAC,IAAA;MACA,KAAAvC,YAAA,GAAAuC,IAAA;IACA;IACA;IACAC,mBAAA;MACA;MACA/B,OAAA,CAAAC,GAAA;QACAY,QAAA,OAAAzB,gBAAA;QACA6B,IAAA,OAAA3B,YAAA;QACAwC,IAAA,OAAAvC;MACA;MACA,KAAAgB,QAAA,CAAAyB,OAAA;MACA;MACA,KAAA5C,gBAAA;MACA,KAAAE,YAAA;MACA,KAAAC,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}