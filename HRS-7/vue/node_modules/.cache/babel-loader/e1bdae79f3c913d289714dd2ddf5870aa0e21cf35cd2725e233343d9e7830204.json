{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useWebSocket } from '@/utils/websocket';\nexport default {\n  name: 'DoctorChat',\n  setup() {\n    const {\n      messages,\n      connect,\n      disconnect,\n      sendMessage,\n      connected\n    } = useWebSocket();\n    return {\n      messages,\n      connect,\n      disconnect,\n      sendMessage,\n      connected\n    };\n  },\n  data() {\n    return {\n      newMessage: '',\n      // 当前医生信息\n      doctor: JSON.parse(localStorage.getItem('xm-user') || {}),\n      patients: [],\n      selectedPatientId: null,\n      patientLoading: false,\n      currentPatientName: ''\n    };\n  },\n  computed: {\n    doctorId() {\n      return this.doctor.id || '';\n    },\n    doctorName() {\n      return this.doctor.name || '医生';\n    }\n  },\n  methods: {\n    handleNewPatient(initMessage) {\n      // 检查是否已存在该患者\n      const exists = this.patients.some(p => p.id === initMessage.senderId);\n      if (!exists) {\n        this.patients.push({\n          id: initMessage.senderId,\n          name: initMessage.senderName || `患者${initMessage.senderId}`\n        });\n\n        // 自动选择第一个患者\n        if (this.patients.length === 1) {\n          this.selectedPatientId = initMessage.senderId;\n          this.currentPatientName = initMessage.senderName;\n          this.loadHistory();\n        }\n        this.$message.success(`新患者${initMessage.senderName}等待沟通`);\n      }\n    },\n    // 加载患者列表\n    loadPatients() {\n      this.patientLoading = true;\n      this.$request.get('/doctor/patients', {\n        params: {\n          doctorId: this.doctorId\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.patients = response.data || [];\n          if (this.patients.length > 0) {\n            this.selectedPatientId = this.patients[0].id;\n            this.currentPatientName = this.patients[0].name;\n          }\n        }\n      }).catch(error => {\n        console.error('加载患者列表失败:', error);\n        this.$message.error('加载患者列表失败');\n      }).finally(() => {\n        this.patientLoading = false;\n      });\n    },\n    // 加载历史消息\n    loadHistory() {\n      if (!this.selectedPatientId) return;\n      const patient = this.patients.find(p => p.id === this.selectedPatientId);\n      this.currentPatientName = patient?.name || '患者';\n      this.$request.get(`/chat/messages/${this.selectedPatientId}/${this.doctorId}`).then(response => {\n        this.messages = response.data || [];\n      }).catch(error => {\n        console.error('加载历史消息失败:', error);\n        this.$message.error('加载历史消息失败');\n      });\n    },\n    // 格式化时间\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\n    },\n    // 发送消息\n    send() {\n      if (!this.selectedPatientId || !this.newMessage.trim()) return;\n      const message = {\n        content: this.newMessage,\n        senderType: 'doctor',\n        senderId: this.doctor.id,\n        senderName: this.doctor.name,\n        receiverId: this.selectedPatientId,\n        receiverName: this.currentPatientName,\n        timestamp: new Date().getTime()\n      };\n      this.sendMessage(message);\n      this.newMessage = '';\n    }\n  },\n  mounted() {\n    this.connect(message => {\n      // 1. 处理初始化消息\n      if (message.type === 'init' && message.senderType === 'patient') {\n        this.handleNewPatient(message);\n      }\n      // 2. 处理普通聊天消息\n      else if (message.senderId === this.selectedPatientId || message.receiverId === this.doctor.id) {\n        this.messages.push(message);\n      }\n    });\n  },\n  beforeDestroy() {\n    this.disconnect();\n  }\n};","map":{"version":3,"names":["useWebSocket","name","setup","messages","connect","disconnect","sendMessage","connected","data","newMessage","doctor","JSON","parse","localStorage","getItem","patients","selectedPatientId","patientLoading","currentPatientName","computed","doctorId","id","doctorName","methods","handleNewPatient","initMessage","exists","some","p","senderId","push","senderName","length","loadHistory","$message","success","loadPatients","$request","get","params","then","response","code","catch","error","console","finally","patient","find","formatTime","timestamp","date","Date","getHours","getMinutes","toString","padStart","send","trim","message","content","senderType","receiverId","receiverName","getTime","mounted","type","beforeDestroy"],"sources":["src/views/doctor/DoctorChat.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-card>\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>医患在线沟通（医生端）</span>\r\n      </div>\r\n\r\n      <!-- 患者选择区域 -->\r\n      <el-row :gutter=\"20\" class=\"selection-area\">\r\n        <el-col :span=\"24\">\r\n          <el-card shadow=\"hover\">\r\n            <div slot=\"header\">\r\n              <span>选择患者</span>\r\n            </div>\r\n            <div style=\"display: flex\">\r\n              <el-select\r\n                  v-model=\"selectedPatientId\"\r\n                  placeholder=\"请选择患者\"\r\n                  style=\"flex: 1\"\r\n                  :loading=\"patientLoading\"\r\n                  @change=\"loadHistory\"\r\n              >\r\n                <el-option\r\n                    v-for=\"patient in patients\"\r\n                    :key=\"patient.id\"\r\n                    :label=\"patient.name\"\r\n                    :value=\"patient.id\"\r\n                />\r\n              </el-select>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n\r\n      <!-- 聊天区域 -->\r\n      <el-card v-if=\"selectedPatientId\" shadow=\"hover\" style=\"margin-top: 20px\">\r\n        <div slot=\"header\">\r\n          <span>与 {{ currentPatientName }} 的对话</span>\r\n        </div>\r\n\r\n        <div class=\"chat-area\">\r\n          <div class=\"message-list\">\r\n            <div\r\n                v-for=\"(msg, index) in messages\"\r\n                :key=\"index\"\r\n                :class=\"['message', msg.senderType === 'doctor' ? 'sent' : 'received']\"\r\n            >\r\n              <div class=\"message-content\">{{ msg.content }}</div>\r\n              <div class=\"message-time\">{{ formatTime(msg.timestamp) }}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"input-area\">\r\n            <el-input\r\n                type=\"textarea\"\r\n                :rows=\"2\"\r\n                v-model=\"newMessage\"\r\n                @keyup.enter.native=\"send\"\r\n                placeholder=\"输入消息...\"\r\n                :disabled=\"!connected\"\r\n            />\r\n            <el-button\r\n                type=\"primary\"\r\n                @click=\"send\"\r\n                :disabled=\"!newMessage.trim() || !connected\"\r\n                style=\"margin-top: 10px; float: right\"\r\n            >\r\n              发送\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n      </el-card>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useWebSocket } from '@/utils/websocket'\r\n\r\nexport default {\r\n  name: 'DoctorChat',\r\n  setup() {\r\n    const { messages, connect, disconnect, sendMessage, connected } = useWebSocket()\r\n    return { messages, connect, disconnect, sendMessage, connected }\r\n  },\r\n  data() {\r\n    return {\r\n      newMessage: '',\r\n      // 当前医生信息\r\n      doctor: JSON.parse(localStorage.getItem('xm-user') || {}),\r\n      patients: [],\r\n      selectedPatientId: null,\r\n      patientLoading: false,\r\n      currentPatientName: ''\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    doctorId() {\r\n      return this.doctor.id || ''\r\n    },\r\n    doctorName() {\r\n      return this.doctor.name || '医生'\r\n    }\r\n  },\r\n  methods: {\r\n    handleNewPatient(initMessage) {\r\n      // 检查是否已存在该患者\r\n      const exists = this.patients.some(p => p.id === initMessage.senderId)\r\n      if (!exists) {\r\n        this.patients.push({\r\n          id: initMessage.senderId,\r\n          name: initMessage.senderName || `患者${initMessage.senderId}`\r\n        })\r\n\r\n        // 自动选择第一个患者\r\n        if (this.patients.length === 1) {\r\n          this.selectedPatientId = initMessage.senderId\r\n          this.currentPatientName = initMessage.senderName\r\n          this.loadHistory()\r\n        }\r\n\r\n        this.$message.success(`新患者${initMessage.senderName}等待沟通`)\r\n      }\r\n    },\r\n    // 加载患者列表\r\n    loadPatients() {\r\n      this.patientLoading = true\r\n      this.$request.get('/doctor/patients', { params: { doctorId: this.doctorId } })\r\n          .then(response => {\r\n            if (response.code == 200) {\r\n              this.patients = response.data || []\r\n              if (this.patients.length > 0) {\r\n                this.selectedPatientId = this.patients[0].id\r\n                this.currentPatientName = this.patients[0].name\r\n              }\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('加载患者列表失败:', error)\r\n            this.$message.error('加载患者列表失败')\r\n          })\r\n          .finally(() => {\r\n            this.patientLoading = false\r\n          })\r\n    },\r\n\r\n    // 加载历史消息\r\n    loadHistory() {\r\n      if (!this.selectedPatientId) return\r\n\r\n      const patient = this.patients.find(p => p.id === this.selectedPatientId)\r\n      this.currentPatientName = patient?.name || '患者'\r\n\r\n      this.$request.get(`/chat/messages/${this.selectedPatientId}/${this.doctorId}`)\r\n          .then(response => {\r\n            this.messages = response.data || []\r\n          })\r\n          .catch(error => {\r\n            console.error('加载历史消息失败:', error)\r\n            this.$message.error('加载历史消息失败')\r\n          })\r\n    },\r\n\r\n    // 格式化时间\r\n    formatTime(timestamp) {\r\n      if (!timestamp) return ''\r\n      const date = new Date(timestamp)\r\n      return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`\r\n    },\r\n\r\n    // 发送消息\r\n    send() {\r\n      if (!this.selectedPatientId || !this.newMessage.trim()) return\r\n\r\n      const message = {\r\n        content: this.newMessage,\r\n        senderType: 'doctor',\r\n        senderId: this.doctor.id,\r\n        senderName: this.doctor.name,\r\n        receiverId: this.selectedPatientId,\r\n        receiverName: this.currentPatientName,\r\n        timestamp: new Date().getTime()\r\n      }\r\n\r\n      this.sendMessage(message)\r\n      this.newMessage = ''\r\n    }\r\n  },\r\n  mounted() {\r\n    this.connect((message) => {\r\n      // 1. 处理初始化消息\r\n      if (message.type === 'init' && message.senderType === 'patient') {\r\n        this.handleNewPatient(message)\r\n      }\r\n      // 2. 处理普通聊天消息\r\n      else if (message.senderId === this.selectedPatientId || message.receiverId === this.doctor.id) {\r\n        this.messages.push(message)\r\n      }\r\n    })\r\n  },\r\n  beforeDestroy() {\r\n    this.disconnect()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 复用患者端的样式，确保一致 */\r\n.app-container {\r\n  padding: 20px;\r\n}\r\n\r\n.selection-area {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chat-area {\r\n  padding: 10px;\r\n}\r\n\r\n.message-list {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  margin-bottom: 20px;\r\n  padding: 10px;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n}\r\n\r\n.message {\r\n  margin: 10px 0;\r\n  padding: 10px 15px;\r\n  border-radius: 4px;\r\n  max-width: 70%;\r\n  word-break: break-word;\r\n}\r\n\r\n.message-content {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 12px;\r\n  color: #999;\r\n  text-align: right;\r\n}\r\n\r\n.sent {\r\n  background-color: #e1f3d8;\r\n  margin-left: auto;\r\n}\r\n\r\n.received {\r\n  background-color: #f2f6fc;\r\n  margin-right: auto;\r\n}\r\n\r\n.input-area {\r\n  margin-top: 20px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}