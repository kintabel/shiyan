{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Doctor',\n  data() {\n    return {\n      doctors: [],\n      schedules: {},\n      // 存储医生排班信息 {doctorId: schedule}\n      isLoading: true,\n      currentHour: new Date().getHours(),\n      isAppointment: this.$route.params.isAppointment\n    };\n  },\n  computed: {\n    isDayTime() {\n      return this.currentHour >= 8 && this.currentHour < 18;\n    }\n  },\n  created() {\n    this.fetchDoctors().then(() => {\n      const isAppointment = this.$route.params.isAppointment;\n      if (isAppointment) {\n        this.fetchAllSchedules(1);\n      } else {\n        this.fetchAllSchedules(2);\n      }\n    });\n  },\n  methods: {\n    // 获取单个医生的排班信息\n    getDoctorSchedule(doctorId) {\n      return this.schedules[doctorId] || null;\n      console.log(this.schedules);\n    },\n    // 获取所有医生的排班信息\n    async fetchAllSchedules(isAppointment) {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      var today;\n      if (isAppointment === 1) {\n        today = this.$route.query.scheduleDate;\n        console.log(today);\n      } else if (isAppointment === 2) {\n        today = parseTime(new Date(), '{y}-{m}-{d}');\n      }\n      try {\n        const response = await this.$request.get('/api/schedule/departmentByDoc/' + departmentId, {\n          params: {\n            hospitalId: hospitalId,\n            startDate: today,\n            endDate: today\n          }\n        });\n        if (response.data) {\n          // 将排班信息按doctorId存入schedules对象\n          console.log(response.data);\n          response.data.forEach(schedule => {\n            this.$set(this.schedules, schedule.doctorId, schedule);\n          });\n        }\n      } catch (error) {\n        console.error('获取排班信息失败:', error);\n        this.$message.error('获取排班信息失败');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // 获取医生列表\n    async fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      try {\n        const response = await this.$request.get('/doctor/selectDoc', {\n          params: {\n            hospitalId: hospitalId,\n            departmentId: departmentId\n          }\n        });\n        if (response.data) {\n          this.doctors = response.data;\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      } catch (error) {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }\n    },\n    // 判断医生是否可预约\n    isAvailable(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      if (!schedule) return false;\n\n      // 白天可以预约所有医生，晚上只能预约夜班医生\n      return this.isDayTime || schedule.shiftType === 'NIGHT';\n    },\n    // 按钮文本\n    getButtonText(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      if (!schedule) return '今日无排班';\n      if (!this.isDayTime && schedule.shiftType === 'DAY') {\n        return '非夜间时段';\n      }\n      return '预约挂号';\n    },\n    // 班次标签样式\n    getShiftTagType(doctorId) {\n      const schedule = this.getDoctorSchedule(doctorId);\n      if (!schedule) return 'info';\n      return schedule.shiftType === 'DAY' ? 'success' : 'warning';\n    },\n    // 获取班次类型文本\n    getShiftType(doctorId) {\n      const schedule = this.getDoctorSchedule(doctorId);\n      if (!schedule) return '无排班';\n      return schedule.shiftType === 'DAY' ? '白班' : '夜班';\n    },\n    // 跳转到挂号页面\n    goToRegistration(doctor) {\n      const schedule = this.getDoctorSchedule(doctor.id);\n      const shiftType = schedule?.shiftType === 'DAY' ? 1 : 2;\n      this.$router.push({\n        name: 'Registration',\n        params: {\n          doctorId: doctor.id\n        },\n        query: {\n          status: 0,\n          shiftType: shiftType\n        }\n      });\n    },\n    // 获取医生职称\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","doctors","schedules","isLoading","currentHour","Date","getHours","isAppointment","$route","params","computed","isDayTime","created","fetchDoctors","then","fetchAllSchedules","methods","getDoctorSchedule","doctorId","console","log","hospitalId","departmentId","today","query","scheduleDate","response","$request","get","startDate","endDate","forEach","schedule","$set","error","$message","isAvailable","doctor","id","shiftType","getButtonText","getShiftTagType","getShiftType","goToRegistration","$router","push","status","getDoctorTitle"],"sources":["E:\\专业设计项目\\HRS\\HRS-7\\vue\\src\\views\\user\\Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"doctors\" stripe>\r\n        <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n        <el-table-column label=\"医生职称\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getDoctorTitle(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.id)\">\r\n              {{ getShiftType(scope.row.id) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row)\"\r\n                type=\"primary\"\r\n                :disabled=\"!isAvailable(scope.row)\"\r\n            >\r\n              {{ getButtonText(scope.row) }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [],\r\n      schedules: {}, // 存储医生排班信息 {doctorId: schedule}\r\n      isLoading: true,\r\n      currentHour: new Date().getHours(),\r\n      isAppointment: this.$route.params.isAppointment\r\n    }\r\n  },\r\n  computed: {\r\n    isDayTime() {\r\n      return this.currentHour >= 8 && this.currentHour < 18\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDoctors().then(() => {\r\n      const isAppointment = this.$route.params.isAppointment\r\n      if (isAppointment) {\r\n        this.fetchAllSchedules(1)\r\n      }else{\r\n        this.fetchAllSchedules(2)\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取单个医生的排班信息\r\n    getDoctorSchedule(doctorId) {\r\n      return this.schedules[doctorId] || null\r\n      console.log(this.schedules)\r\n    },\r\n\r\n    // 获取所有医生的排班信息\r\n    async fetchAllSchedules(isAppointment) {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n      var today\r\n      if (isAppointment === 1) {\r\n        today = this.$route.query.scheduleDate\r\n        console.log(today)\r\n      }else if (isAppointment === 2) {\r\n        today = parseTime(new Date(), '{y}-{m}-{d}')\r\n      }\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/departmentByDoc/' + departmentId, {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            startDate: today,\r\n            endDate: today\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          // 将排班信息按doctorId存入schedules对象\r\n          console.log(response.data)\r\n          response.data.forEach(schedule => {\r\n            this.$set(this.schedules, schedule.doctorId, schedule)\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.error('获取排班信息失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 获取医生列表\r\n    async fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n\r\n      try {\r\n        const response = await this.$request.get('/doctor/selectDoc', {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            departmentId: departmentId\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          this.doctors = response.data\r\n        } else {\r\n          console.error('获取医生列表数据格式错误:', response.data)\r\n          this.$message.error('获取医生列表失败，请稍后重试')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取医生列表失败:', error)\r\n        this.$message.error('获取医生列表失败，请稍后重试')\r\n      }\r\n    },\r\n\r\n    // 判断医生是否可预约\r\n    isAvailable(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return false\r\n\r\n      // 白天可以预约所有医生，晚上只能预约夜班医生\r\n      return this.isDayTime || schedule.shiftType === 'NIGHT'\r\n    },\r\n\r\n    // 按钮文本\r\n    getButtonText(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return '今日无排班'\r\n\r\n      if (!this.isDayTime && schedule.shiftType === 'DAY') {\r\n        return '非夜间时段'\r\n      }\r\n      return '预约挂号'\r\n    },\r\n\r\n    // 班次标签样式\r\n    getShiftTagType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return 'info'\r\n      return schedule.shiftType === 'DAY' ? 'success' : 'warning'\r\n    },\r\n\r\n    // 获取班次类型文本\r\n    getShiftType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return '无排班'\r\n      return schedule.shiftType === 'DAY' ? '白班' : '夜班'\r\n    },\r\n\r\n    // 跳转到挂号页面\r\n    goToRegistration(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      const shiftType = schedule?.shiftType === 'DAY' ? 1 : 2\r\n\r\n        this.$router.push({\r\n          name: 'Registration',\r\n          params: { doctorId: doctor.id },\r\n          query: {\r\n            status: 0,\r\n            shiftType: shiftType\r\n          }\r\n        })\r\n    },\r\n\r\n    // 获取医生职称\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}