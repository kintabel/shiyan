{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Doctor',\n  data() {\n    return {\n      doctors: [],\n      // 医生列表\n      todaySchedules: [],\n      // 今日排班\n      isLoading: true,\n      isAppointment: this.$route.params.isAppointment\n    };\n  },\n  computed: {\n    // 过滤出今日有排班的医生\n    filteredDoctors() {\n      return this.doctors.map(doctor => {\n        const schedule = this.todaySchedules.find(s => s.doctor_id === doctor.id);\n        return {\n          ...doctor,\n          schedule: schedule,\n          hasSchedule: !!schedule\n        };\n      });\n    }\n  },\n  created() {\n    this.fetchTodaySchedules().then(() => {\n      this.fetchDoctors();\n    });\n  },\n  methods: {\n    // 获取今日排班\n    async fetchTodaySchedules() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      const today = parseTime(new Date(), '{y}-{m}-{d}');\n      try {\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\n          params: {\n            hospitalId: hospitalId,\n            startDate: today,\n            endDate: today\n          }\n        });\n        this.todaySchedules = response.data || [];\n      } catch (error) {\n        console.error('获取今日排班失败:', error);\n        this.$message.error('获取排班信息失败');\n      }\n    },\n    fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      this.$request.get('/doctor/selectDoc', {\n        params: {\n          hospitalId: hospitalId,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctors = response.data;\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    },\n    getShiftType(schedule) {\n      if (!schedule) return '无排班';\n      return schedule.shift_type === 'DAY' ? '白班' : schedule.shift_type === 'NIGHT' ? '夜班' : '无排班';\n    },\n    goToRegistration(doctorId) {\n      const isAppointment = this.$route.params.isAppointment;\n      if (isAppointment) {\n        this.$router.push({\n          name: 'AppointmentRegister',\n          params: {\n            doctorId: doctorId\n          },\n          query: {\n            status: 0\n          }\n        });\n      } else {\n        this.$router.push({\n          name: 'Registration',\n          params: {\n            doctorId: doctorId\n          },\n          query: {\n            status: 0\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","doctors","todaySchedules","isLoading","isAppointment","$route","params","computed","filteredDoctors","map","doctor","schedule","find","s","doctor_id","id","hasSchedule","created","fetchTodaySchedules","then","fetchDoctors","methods","hospitalId","departmentId","today","Date","response","$request","get","startDate","endDate","error","console","$message","catch","finally","getDoctorTitle","status","getShiftType","shift_type","goToRegistration","doctorId","$router","push","query"],"sources":["src/views/user/Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <!-- 数据加载中提示 -->\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"filteredDoctors\" stripe>\r\n        <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n        <el-table-column label=\"医生职称\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getDoctorTitle(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getShiftType(scope.row.schedule) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row.id)\"\r\n                type=\"primary\"\r\n                :disabled=\"!scope.row.hasSchedule\"\r\n            >\r\n              {{ scope.row.hasSchedule ? '预约挂号' : '今日无排班' }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [], // 医生列表\r\n      todaySchedules: [], // 今日排班\r\n      isLoading: true,\r\n      isAppointment: this.$route.params.isAppointment,\r\n    };\r\n  },\r\n  computed: {\r\n    // 过滤出今日有排班的医生\r\n    filteredDoctors() {\r\n      return this.doctors.map(doctor => {\r\n        const schedule = this.todaySchedules.find(s => s.doctor_id === doctor.id)\r\n        return {\r\n          ...doctor,\r\n          schedule: schedule,\r\n          hasSchedule: !!schedule\r\n        }\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchTodaySchedules().then(() => {\r\n      this.fetchDoctors()\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取今日排班\r\n    async fetchTodaySchedules() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n      const today = parseTime(new Date(), '{y}-{m}-{d}')\r\n\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            startDate: today,\r\n            endDate: today\r\n          }\r\n        })\r\n        this.todaySchedules = response.data || []\r\n      } catch (error) {\r\n        console.error('获取今日排班失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      }\r\n    },\r\n    fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n\r\n      this.$request.get('/doctor/selectDoc', {\r\n        params: {\r\n          hospitalId: hospitalId,\r\n          departmentId: departmentId\r\n        }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctors = response.data\r\n            } else {\r\n              console.error('获取医生列表数据格式错误:', response.data)\r\n              this.$message.error('获取医生列表失败，请稍后重试')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生列表失败:', error)\r\n            this.$message.error('获取医生列表失败，请稍后重试')\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false\r\n          })\r\n    },\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    },\r\n    getShiftType(schedule) {\r\n      if (!schedule) return '无排班'\r\n      return schedule.shift_type === 'DAY' ? '白班' :\r\n          schedule.shift_type === 'NIGHT' ? '夜班' : '无排班'\r\n    },\r\n    goToRegistration(doctorId) {\r\n      const isAppointment = this.$route.params.isAppointment\r\n      if (isAppointment) {\r\n        this.$router.push({\r\n          name: 'AppointmentRegister',\r\n          params: { doctorId: doctorId },\r\n          query: { status: 0 }\r\n        })\r\n      } else {\r\n        this.$router.push({\r\n          name: 'Registration',\r\n          params: { doctorId: doctorId },\r\n          query: { status: 0 }\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":";AAqCA,SAAAA,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,cAAA;MAAA;MACAC,SAAA;MACAC,aAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAF;IACA;EACA;EACAG,QAAA;IACA;IACAC,gBAAA;MACA,YAAAP,OAAA,CAAAQ,GAAA,CAAAC,MAAA;QACA,MAAAC,QAAA,QAAAT,cAAA,CAAAU,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,SAAA,KAAAJ,MAAA,CAAAK,EAAA;QACA;UACA,GAAAL,MAAA;UACAC,QAAA,EAAAA,QAAA;UACAK,WAAA,IAAAL;QACA;MACA;IACA;EACA;EACAM,QAAA;IACA,KAAAC,mBAAA,GAAAC,IAAA;MACA,KAAAC,YAAA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAH,oBAAA;MACA,MAAAI,UAAA,QAAAjB,MAAA,CAAAC,MAAA,CAAAgB,UAAA;MACA,MAAAC,YAAA,QAAAlB,MAAA,CAAAC,MAAA,CAAAiB,YAAA;MACA,MAAAC,KAAA,GAAA1B,SAAA,KAAA2B,IAAA;MAEA;QACA,MAAAC,QAAA,cAAAC,QAAA,CAAAC,GAAA,+BAAAL,YAAA;UACAjB,MAAA;YACAgB,UAAA,EAAAA,UAAA;YACAO,SAAA,EAAAL,KAAA;YACAM,OAAA,EAAAN;UACA;QACA;QACA,KAAAtB,cAAA,GAAAwB,QAAA,CAAA1B,IAAA;MACA,SAAA+B,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACAX,aAAA;MACA,MAAAE,UAAA,QAAAjB,MAAA,CAAAC,MAAA,CAAAgB,UAAA;MACA,MAAAC,YAAA,QAAAlB,MAAA,CAAAC,MAAA,CAAAiB,YAAA;MAEA,KAAAI,QAAA,CAAAC,GAAA;QACAtB,MAAA;UACAgB,UAAA,EAAAA,UAAA;UACAC,YAAA,EAAAA;QACA;MACA,GACAJ,IAAA,CAAAO,QAAA;QACA,IAAAA,QAAA,CAAA1B,IAAA;UACA,KAAAC,OAAA,GAAAyB,QAAA,CAAA1B,IAAA;QACA;UACAgC,OAAA,CAAAD,KAAA,kBAAAL,QAAA,CAAA1B,IAAA;UACA,KAAAiC,QAAA,CAAAF,KAAA;QACA;MACA,GACAG,KAAA,CAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA,GACAI,OAAA;QACA,KAAAhC,SAAA;MACA;IACA;IACAiC,eAAAC,MAAA;MACA,QAAAA,MAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;MACA;IACA;IACAC,aAAA3B,QAAA;MACA,KAAAA,QAAA;MACA,OAAAA,QAAA,CAAA4B,UAAA,oBACA5B,QAAA,CAAA4B,UAAA;IACA;IACAC,iBAAAC,QAAA;MACA,MAAArC,aAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,aAAA;MACA,IAAAA,aAAA;QACA,KAAAsC,OAAA,CAAAC,IAAA;UACA5C,IAAA;UACAO,MAAA;YAAAmC,QAAA,EAAAA;UAAA;UACAG,KAAA;YAAAP,MAAA;UAAA;QACA;MACA;QACA,KAAAK,OAAA,CAAAC,IAAA;UACA5C,IAAA;UACAO,MAAA;YAAAmC,QAAA,EAAAA;UAAA;UACAG,KAAA;YAAAP,MAAA;UAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}