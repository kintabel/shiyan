{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"registration-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"doctor-info\"\n};\nconst _hoisted_3 = {\n  class: \"current-time\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"time-slot-selection\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"soon-tag\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  class: \"no-slots\"\n};\nconst _hoisted_8 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_alert = _resolveComponent(\"el-alert\");\n  const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_empty = _resolveComponent(\"el-empty\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 医生信息展示 \"), $data.doctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"h2\", null, _toDisplayString($data.doctor.name) + \" - \" + _toDisplayString($options.getDoctorTitle($data.doctor.status)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($data.doctor.introduction), 1 /* TEXT */), _createVNode(_component_el_tag, {\n    type: $data.shiftType === 1 ? 'success' : 'warning'\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($data.shiftType === 1 ? '白班医生' : '夜班医生'), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"type\"]), _createElementVNode(\"p\", _hoisted_3, \"当前时间: \" + _toDisplayString($data.currentTime), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 时间段选择 \"), $data.doctor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"选择预约时间段\", -1 /* HOISTED */)), _createVNode(_component_el_alert, {\n    title: $options.timeRangeHint,\n    type: \"info\",\n    \"show-icon\": \"\",\n    class: \"time-hint\"\n  }, null, 8 /* PROPS */, [\"title\"]), $options.filteredTimeSlots.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode(_component_el_radio_group, {\n    modelValue: $data.selectedTimeSlot,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedTimeSlot = $event)\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredTimeSlots, (slot, index) => {\n      return _openBlock(), _createBlock(_component_el_radio_button, {\n        key: index,\n        label: slot.time\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(slot.time) + \" (\" + _toDisplayString(slot.price) + \"元) \", 1 /* TEXT */), $options.isSoon(slot) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"即将开始\")) : _createCommentVNode(\"v-if\", true)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"label\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $options.submitRegistration,\n    disabled: !$data.selectedTimeSlot,\n    class: \"submit-btn\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" 确认预约 \")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\", \"disabled\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createVNode(_component_el_empty, {\n    description: \"今日已无可预约时间段\"\n  })]))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _cache[3] || (_cache[3] = [_createElementVNode(\"p\", null, \"未获取到医生信息，请稍后重试。\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","$data","doctor","_hoisted_2","_createElementVNode","_toDisplayString","name","$options","getDoctorTitle","status","introduction","_createVNode","_component_el_tag","type","shiftType","_hoisted_3","currentTime","_hoisted_4","_component_el_alert","title","timeRangeHint","filteredTimeSlots","length","_hoisted_5","_component_el_radio_group","selectedTimeSlot","$event","_Fragment","_renderList","slot","index","_createBlock","_component_el_radio_button","key","label","time","price","isSoon","_hoisted_6","_component_el_button","onClick","submitRegistration","disabled","_cache","_hoisted_7","_component_el_empty","description","_hoisted_8"],"sources":["E:\\专业设计项目\\HRS\\HRS-7\\vue\\src\\views\\user\\Registration.vue"],"sourcesContent":["<template>\r\n  <div class=\"registration-page\">\r\n    <!-- 医生信息展示 -->\r\n    <div class=\"doctor-info\" v-if=\"doctor\">\r\n      <h2>{{ doctor.name }} - {{ getDoctorTitle(doctor.status) }}</h2>\r\n      <p>{{ doctor.introduction }}</p>\r\n      <el-tag :type=\"shiftType === 1 ? 'success' : 'warning'\">\r\n        {{ shiftType === 1 ? '白班医生' : '夜班医生' }}\r\n      </el-tag>\r\n      <p class=\"current-time\">当前时间: {{ currentTime }}</p>\r\n    </div>\r\n\r\n    <!-- 时间段选择 -->\r\n    <div class=\"time-slot-selection\" v-if=\"doctor\">\r\n      <h2>选择预约时间段</h2>\r\n\r\n      <el-alert\r\n          :title=\"timeRangeHint\"\r\n          type=\"info\"\r\n          show-icon\r\n          class=\"time-hint\"\r\n      />\r\n\r\n      <div v-if=\"filteredTimeSlots.length > 0\">\r\n        <el-radio-group v-model=\"selectedTimeSlot\">\r\n          <el-radio-button\r\n              v-for=\"(slot, index) in filteredTimeSlots\"\r\n              :key=\"index\"\r\n              :label=\"slot.time\"\r\n          >\r\n            {{ slot.time }} ({{ slot.price }}元)\r\n            <span v-if=\"isSoon(slot)\" class=\"soon-tag\">即将开始</span>\r\n          </el-radio-button>\r\n        </el-radio-group>\r\n\r\n        <el-button\r\n            type=\"primary\"\r\n            @click=\"submitRegistration\"\r\n            :disabled=\"!selectedTimeSlot\"\r\n            class=\"submit-btn\"\r\n        >\r\n          确认预约\r\n        </el-button>\r\n      </div>\r\n\r\n      <div v-else class=\"no-slots\">\r\n        <el-empty description=\"今日已无可预约时间段\"></el-empty>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else>\r\n      <p>未获取到医生信息，请稍后重试。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Registration',\r\n  data() {\r\n    return {\r\n      doctor: null,\r\n      schedule: {},\r\n      shiftType: parseInt(this.$route.query.shiftType) || 1, // 1-白天 2-晚上\r\n      selectedTimeSlot: '',\r\n      availableTimeSlots: [],\r\n      isLoading: true,\r\n      currentTime: parseTime(new Date(), '{h}:{i}:{s}'),\r\n      currentDateTime: new Date()\r\n    }\r\n  },\r\n  computed: {\r\n    // 时间范围提示\r\n    timeRangeHint() {\r\n      return this.shiftType === 1\r\n          ? '白班时间段: 9:00-12:00, 14:00-18:00'\r\n          : '夜班时间段: 18:00-23:00, 0:00-8:00'\r\n    },\r\n\r\n    // 过滤出可预约的时间段（当前时间之后的）\r\n    filteredTimeSlots() {\r\n      return this.availableTimeSlots.filter(slot => {\r\n        const slotTime = this.parseSlotTime(slot.time)\r\n        return slotTime > this.currentDateTime\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    const doctorId = this.$route.params.doctorId\r\n    const doctorName = this.$route.query.doctorName\r\n    const today = parseTime(new Date(), '{y}-{m}-{d}')\r\n    if (doctorId) {\r\n      this.fetchDoctorInfo(doctorId).then(() => {\r\n        this.generateTimeSlots()\r\n      })\r\n    } else if (doctorName) {\r\n      this.fetchDoctorInfoByName(doctorName).then(() => {\r\n      })\r\n      const hospitalName = this.$route.query.hospitalName\r\n      const departmentName = this.$route.query.departmentName\r\n      //查找当前是否复诊的医生是否有排班\r\n      this.fetchDoctorSchedule(doctorName, today, hospitalName, departmentName).then(() => {\r\n        this.shiftType = this.schedule.shiftType === 'DAY' ? 1 : 2\r\n        console.log(this.shiftType)\r\n        this.generateTimeSlots()\r\n      })\r\n    }\r\n\r\n    // 每秒更新当前时间\r\n    this.timeInterval = setInterval(() => {\r\n      this.currentTime = parseTime(new Date(), '{h}:{i}:{s}')\r\n      this.currentDateTime = new Date()\r\n    }, 1000)\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.timeInterval)\r\n  },\r\n  methods: {\r\n    // 生成时间段\r\n    generateTimeSlots() {\r\n      console.log('当前医生的班次:', this.shiftType)\r\n      if (this.shiftType === 1) {\r\n        // 白班时间段\r\n        this.availableTimeSlots = [\r\n          {time: '09:00-10:00', price: this.getPrice(true)},\r\n          {time: '10:00-11:00', price: this.getPrice(true)},\r\n          {time: '11:00-12:00', price: this.getPrice(true)},\r\n          {time: '14:00-15:00', price: this.getPrice(true)},\r\n          {time: '15:00-16:00', price: this.getPrice(true)},\r\n          {time: '16:00-17:00', price: this.getPrice(true)},\r\n          {time: '17:00-18:00', price: this.getPrice(true)}\r\n        ]\r\n      } else {\r\n        // 夜班时间段\r\n        this.availableTimeSlots = [\r\n          {time: '18:00-19:00', price: this.getPrice(false)},\r\n          {time: '19:00-20:00', price: this.getPrice(false)},\r\n          {time: '20:00-21:00', price: this.getPrice(false)},\r\n          {time: '21:00-22:00', price: this.getPrice(false)},\r\n          {time: '22:00-23:00', price: this.getPrice(false)},\r\n          {time: '23:00-00:00', price: this.getPrice(false)},\r\n          {time: '00:00-01:00', price: this.getPrice(false)},\r\n          {time: '01:00-02:00', price: this.getPrice(false)},\r\n          {time: '02:00-03:00', price: this.getPrice(false)},\r\n          {time: '03:00-04:00', price: this.getPrice(false)},\r\n          {time: '04:00-05:00', price: this.getPrice(false)},\r\n          {time: '05:00-06:00', price: this.getPrice(false)},\r\n          {time: '06:00-07:00', price: this.getPrice(false)},\r\n          {time: '07:00-08:00', price: this.getPrice(false)}\r\n        ]\r\n      }\r\n      this.isLoading = false\r\n    },\r\n\r\n    // 解析时间段为Date对象\r\n    parseSlotTime(slotStr) {\r\n      const today = new Date()\r\n      const [startTime] = slotStr.split('-')\r\n      const [hours, minutes] = startTime.split(':').map(Number)\r\n\r\n      const slotDate = new Date(\r\n          today.getFullYear(),\r\n          today.getMonth(),\r\n          today.getDate(),\r\n          hours,\r\n          minutes\r\n      )\r\n\r\n      // 处理跨天情况（如23:00-00:00）\r\n      if (hours >= 0 && hours < 8 && this.shiftType === 2) {\r\n        slotDate.setDate(slotDate.getDate() + 1)\r\n      }\r\n\r\n      return slotDate\r\n    },\r\n\r\n    // 判断时间段是否即将开始（15分钟内）\r\n    isSoon(slot) {\r\n      const slotTime = this.parseSlotTime(slot.time)\r\n      const diff = (slotTime - this.currentDateTime) / (1000 * 60) // 分钟差\r\n      return diff > 0 && diff <= 15\r\n    },\r\n\r\n    // 提交预约\r\n    submitRegistration() {\r\n      if (!this.selectedTimeSlot) {\r\n        this.$message.warning('请选择预约时间段')\r\n        return\r\n      }\r\n\r\n      this.$router.push({\r\n        name: 'SubmitRegistration',\r\n        query: {\r\n          doctorId: this.doctor.id,\r\n          timeSlot: this.selectedTimeSlot,\r\n          price: this.availableTimeSlots.find(s => s.time === this.selectedTimeSlot).price,\r\n          shiftType: this.shiftType,\r\n          status: this.$route.query.status\r\n        }\r\n      })\r\n    },\r\n\r\n    fetchDoctorInfo(doctorId) {\r\n      return this.$request.get('/doctor/selectDoctorById', {\r\n        params: {doctorId}\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data\r\n            } else {\r\n              console.error('获取医生详细信息失败:', response.data)\r\n              this.$message.error('获取医生详细信息失败，请稍后重试')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生详细信息失败:', error)\r\n            this.$message.error('获取医生详细信息失败，请稍后重试')\r\n          })\r\n    },\r\n    fetchDoctorInfoByName(doctorName) {\r\n      return this.$request.get('/doctor/selectDoctorByName', {\r\n        params: {doctorName}\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctor = response.data\r\n            } else {\r\n              console.error('获取医生详细信息失败:', response.data)\r\n              this.$message.error('获取医生详细信息失败，请稍后重试')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生详细信息失败:', error)\r\n            this.$message.error('获取医生详细信息失败，请稍后重试')\r\n          })\r\n    },\r\n\r\n    fetchDoctorSchedule(doctorName, scheduleDate, hospitalName, departmentName) {\r\n      console.log(\"执行了fetchDoctorSchedule\")\r\n     return this.$request.get('/api/schedule/scheduleByDocName/' + doctorName, {\r\n        params: {\r\n          hospitalName: hospitalName,\r\n          departmentName: departmentName,\r\n          scheduleDate: scheduleDate,\r\n        }\r\n      }).then(response => {\r\n        if (response.code == 200) {\r\n          this.schedule = response.data\r\n          console.log(this.schedule.shiftType)\r\n        }\r\n      })\r\n    },\r\n\r\n  getDoctorTitle(status) {\r\n    switch (status) {\r\n      case 1:\r\n        return '医师'\r\n      case 2:\r\n        return '副主治医师'\r\n      case 3:\r\n        return '主治医师'\r\n      case 4:\r\n        return '专家'\r\n      case 5:\r\n        return '急诊'\r\n      default:\r\n        return '未知职称'\r\n    }\r\n  },\r\n\r\n  getPrice(isMorning) {\r\n    if (!this.doctor) return 0\r\n\r\n    switch (this.doctor.status) {\r\n      case 1:\r\n        return isMorning ? 50 : 60\r\n      case 2:\r\n        return isMorning ? 80 : 90\r\n      case 3:\r\n        return isMorning ? 100 : 110\r\n      case 4:\r\n        return isMorning ? 150 : 160\r\n      case 5:\r\n        return isMorning ? 60 : 70\r\n      default:\r\n        return 0\r\n    }\r\n  }\r\n}\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.registration-page {\r\n  padding: 20px;\r\n}\r\n\r\n.doctor-info {\r\n  margin-bottom: 20px;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.current-time {\r\n  color: #666;\r\n  font-size: 14px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.time-hint {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.submit-btn {\r\n  margin-top: 20px;\r\n}\r\n\r\n.no-slots {\r\n  margin-top: 50px;\r\n}\r\n\r\n.soon-tag {\r\n  display: inline-block;\r\n  background-color: #ffba00;\r\n  color: white;\r\n  font-size: 12px;\r\n  padding: 2px 5px;\r\n  border-radius: 3px;\r\n  margin-left: 5px;\r\n}\r\n\r\n.el-radio-button {\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;;EAEvBA,KAAK,EAAC;;;EAMNA,KAAK,EAAC;AAAc;;;EAIpBA,KAAK,EAAC;;;;;;;EAkBuBA,KAAK,EAAC;;;;EAc1BA,KAAK,EAAC;;;;;;;;;;;;uBA5CtBC,mBAAA,CAoDM,OApDNC,UAoDM,GAnDJC,mBAAA,YAAe,EACgBC,KAAA,CAAAC,MAAM,I,cAArCJ,mBAAA,CAOM,OAPNK,UAOM,GANJC,mBAAA,CAAgE,YAAAC,gBAAA,CAAzDJ,KAAA,CAAAC,MAAM,CAACI,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGE,QAAA,CAAAC,cAAc,CAACP,KAAA,CAAAC,MAAM,CAACO,MAAM,mBACvDL,mBAAA,CAAgC,WAAAC,gBAAA,CAA1BJ,KAAA,CAAAC,MAAM,CAACQ,YAAY,kBACzBC,YAAA,CAESC,iBAAA;IAFAC,IAAI,EAAEZ,KAAA,CAAAa,SAAS;;sBACtB,MAAuC,C,kCAApCb,KAAA,CAAAa,SAAS,yC;;;+BAEdV,mBAAA,CAAmD,KAAnDW,UAAmD,EAA3B,QAAM,GAAAV,gBAAA,CAAGJ,KAAA,CAAAe,WAAW,iB,wCAG9ChB,mBAAA,WAAc,EACyBC,KAAA,CAAAC,MAAM,I,cAA7CJ,mBAAA,CAmCM,OAnCNmB,UAmCM,G,0BAlCJb,mBAAA,CAAgB,YAAZ,SAAO,sBAEXO,YAAA,CAKEO,mBAAA;IAJGC,KAAK,EAAEZ,QAAA,CAAAa,aAAa;IACrBP,IAAI,EAAC,MAAM;IACX,WAAS,EAAT,EAAS;IACThB,KAAK,EAAC;sCAGCU,QAAA,CAAAc,iBAAiB,CAACC,MAAM,Q,cAAnCxB,mBAAA,CAoBM,OAAAyB,UAAA,GAnBJZ,YAAA,CASiBa,yBAAA;gBATQvB,KAAA,CAAAwB,gBAAgB;+DAAhBxB,KAAA,CAAAwB,gBAAgB,GAAAC,MAAA;;sBAEnC,MAA0C,E,kBAD9C5B,mBAAA,CAOkB6B,SAAA,QAAAC,WAAA,CANUrB,QAAA,CAAAc,iBAAiB,GAAjCQ,IAAI,EAAEC,KAAK;2BADvBC,YAAA,CAOkBC,0BAAA;QALbC,GAAG,EAAEH,KAAK;QACVI,KAAK,EAAEL,IAAI,CAACM;;0BAEf,MAAe,C,kCAAZN,IAAI,CAACM,IAAI,IAAG,IAAE,GAAA9B,gBAAA,CAAGwB,IAAI,CAACO,KAAK,IAAG,KACjC,iBAAY7B,QAAA,CAAA8B,MAAM,CAACR,IAAI,K,cAAvB/B,mBAAA,CAAsD,QAAtDwC,UAAsD,EAAX,MAAI,K;;;;;;qCAInD3B,YAAA,CAOY4B,oBAAA;IANR1B,IAAI,EAAC,SAAS;IACb2B,OAAK,EAAEjC,QAAA,CAAAkC,kBAAkB;IACzBC,QAAQ,GAAGzC,KAAA,CAAAwB,gBAAgB;IAC5B5B,KAAK,EAAC;;sBACT,MAED8C,MAAA,QAAAA,MAAA,O,iBAFC,QAED,E;;iEAGF7C,mBAAA,CAEM,OAFN8C,UAEM,GADJjC,YAAA,CAA8CkC,mBAAA;IAApCC,WAAW,EAAC;EAAY,G,uBAItChD,mBAAA,CAEM,OAAAiD,UAAA,EAAAJ,MAAA,QAAAA,MAAA,OADJvC,mBAAA,CAAsB,WAAnB,iBAAe,oB"},"metadata":{},"sourceType":"module","externalDependencies":[]}