{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getSchedulesByDepartment, addSchedule, updateSchedule, deleteSchedule } from '@/api/scheduleApi';\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Schedule',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\n      loading: false,\n      hospitalId: null,\n      departments: [],\n      selectedDepartment: null,\n      doctors: [],\n      currentWeek: this.getNextWeekStartDate(),\n      weekDays: [],\n      scheduleData: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      }\n    };\n  },\n  created() {\n    this.fetchDepartments();\n    this.generateWeekDays();\n  },\n  methods: {\n    getNextWeekStartDate() {\n      const today = new Date();\n      const nextMonday = new Date(today);\n      nextMonday.setDate(today.getDate() + ((1 + 7 - today.getDay()) % 7 || 7));\n      return nextMonday;\n    },\n    generateWeekDays() {\n      const startDate = new Date(this.currentWeek);\n      this.weekDays = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(startDate);\n        date.setDate(startDate.getDate() + i);\n        this.weekDays.push({\n          date: parseTime(date, '{y}-{m}-{d}'),\n          label: parseTime(date, '{m}-{d} 周') + ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\n        });\n      }\n    },\n    fetchDepartments() {\n      this.$request.get('/hospital/departmentList', {\n        params: {\n          userId: this.user.id\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.departments = response.data;\n        } else {\n          this.$message.error(response.data.message || '获取科室列表失败');\n        }\n      });\n    },\n    async handleDepartmentClick(data) {\n      this.selectedDepartment = data;\n      await this.fetchDoctors(data.id);\n      await this.fetchSchedules();\n    },\n    fetchDoctors(departmentId) {\n      this.$request.get('/doctor/selectDocByAdminIdAndDepId', {\n        params: {\n          userId: this.user.id,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.code == 200) {\n          this.doctors = response.data;\n          this.prepareScheduleData();\n        } else {\n          this.$message.error(response.data.message || '获取医生列表失败');\n        }\n      });\n    },\n    prepareScheduleData() {\n      this.scheduleData = this.doctors.map(doctor => {\n        const schedules = {};\n        this.weekDays.forEach(day => {\n          schedules[day.date] = null;\n        });\n        return {\n          doctorId: doctor.id,\n          doctorName: doctor.name,\n          schedules: schedules\n        };\n      });\n    },\n    async fetchSchedules() {\n      if (!this.selectedDepartment) return;\n      this.loading = true;\n      this.generateWeekDays();\n      this.prepareScheduleData();\n      try {\n        const startDate = new Date(this.currentWeek);\n        const endDate = new Date(startDate);\n        endDate.setDate(startDate.getDate() + 6);\n        const response = await getSchedulesByDepartment(this.user.id, this.selectedDepartment.id, startDate, endDate);\n\n        // 更新排班数据\n        response.data.forEach(schedule => {\n          const scheduleDate = parseTime(schedule.schedule_date, '{y}-{m}-{d}');\n          const doctorSchedule = this.scheduleData.find(item => item.doctorId === schedule.doctor_id);\n          if (doctorSchedule) {\n            doctorSchedule.schedules[scheduleDate] = schedule.shift_type;\n          }\n        });\n      } catch (error) {\n        console.error('获取排班信息失败:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleShiftChange(doctorId, date, shiftType) {\n      try {\n        // 首先查找是否已有排班记录\n        const existingSchedule = await this.findExistingSchedule(doctorId, date);\n        if (shiftType) {\n          // 有班次选择\n          if (existingSchedule) {\n            // 更新现有排班\n            await updateSchedule({\n              id: existingSchedule.id,\n              shift_type: shiftType\n            });\n          } else {\n            // 新增排班\n            await addSchedule({\n              hospital_id: this.user.id,\n              department_id: this.selectedDepartment.id,\n              doctor_id: doctorId,\n              schedule_date: date,\n              shift_type: shiftType,\n              fatigue_score: 0\n            });\n          }\n        } else {\n          // 选择休息，删除排班记录\n          if (existingSchedule) {\n            await deleteSchedule(existingSchedule.id);\n          }\n        }\n        this.$message.success('排班更新成功');\n      } catch (error) {\n        console.error('更新排班失败:', error);\n        this.$message.error('排班更新失败');\n      }\n    },\n    async findExistingSchedule(doctorId, date) {\n      try {\n        const response = await getSchedulesByDepartment(this.user.id, this.selectedDepartment.id, new Date(date), new Date(date));\n        return response.data.find(item => item.doctor_id === doctorId && parseTime(item.schedule_date, '{y}-{m}-{d}') === date);\n      } catch (error) {\n        console.error('查找排班记录失败:', error);\n        return null;\n      }\n    },\n    showNextWeek() {\n      const nextWeek = new Date(this.currentWeek);\n      nextWeek.setDate(nextWeek.getDate() + 7);\n      this.currentWeek = nextWeek;\n      this.fetchSchedules();\n    }\n  }\n};","map":{"version":3,"names":["getSchedulesByDepartment","addSchedule","updateSchedule","deleteSchedule","parseTime","name","data","user","JSON","parse","localStorage","getItem","loading","hospitalId","departments","selectedDepartment","doctors","currentWeek","getNextWeekStartDate","weekDays","scheduleData","defaultProps","children","label","created","fetchDepartments","generateWeekDays","methods","today","Date","nextMonday","setDate","getDate","getDay","startDate","i","date","push","$request","get","params","userId","id","then","response","code","$message","error","message","handleDepartmentClick","fetchDoctors","fetchSchedules","departmentId","prepareScheduleData","map","doctor","schedules","forEach","day","doctorId","doctorName","endDate","schedule","scheduleDate","schedule_date","doctorSchedule","find","item","doctor_id","shift_type","console","handleShiftChange","shiftType","existingSchedule","findExistingSchedule","hospital_id","department_id","fatigue_score","success","showNextWeek","nextWeek"],"sources":["src/views/hospitalAdmin/Scheduling.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <el-card>\r\n      <div slot=\"header\" class=\"clearfix\">\r\n        <span>医生排班管理</span>\r\n        <el-button\r\n            style=\"float: right; padding: 3px 0\"\r\n            type=\"text\"\r\n            @click=\"showNextWeek\"\r\n        >\r\n          排下一周班次\r\n        </el-button>\r\n      </div>\r\n\r\n      <el-row :gutter=\"20\">\r\n        <el-col :span=\"6\">\r\n          <el-card>\r\n            <div slot=\"header\" class=\"clearfix\">\r\n              <span>科室列表</span>\r\n            </div>\r\n            <el-tree\r\n                :data=\"departments\"\r\n                :props=\"defaultProps\"\r\n                @node-click=\"handleDepartmentClick\"\r\n            ></el-tree>\r\n          </el-card>\r\n        </el-col>\r\n\r\n        <el-col :span=\"18\">\r\n          <el-card>\r\n            <div slot=\"header\" class=\"clearfix\">\r\n              <span>排班表 - {{ selectedDepartment ? selectedDepartment.name : '请选择科室' }}</span>\r\n              <div style=\"float: right\">\r\n                <el-date-picker\r\n                    v-model=\"currentWeek\"\r\n                    type=\"week\"\r\n                    format=\"yyyy 第 WW 周\"\r\n                    placeholder=\"选择周\"\r\n                    @change=\"fetchSchedules\"\r\n                >\r\n                </el-date-picker>\r\n              </div>\r\n            </div>\r\n\r\n            <el-table\r\n                v-loading=\"loading\"\r\n                :data=\"scheduleData\"\r\n                border\r\n                style=\"width: 100%\"\r\n            >\r\n              <el-table-column prop=\"doctorName\" label=\"医生\" width=\"150\" fixed>\r\n                <template slot-scope=\"scope\">\r\n                  {{ scope.row.doctorName }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column\r\n                  v-for=\"day in weekDays\"\r\n                  :key=\"day.date\"\r\n                  :label=\"day.label\"\r\n                  width=\"150\"\r\n              >\r\n                <template slot-scope=\"scope\">\r\n                  <el-select\r\n                      v-model=\"scope.row.schedules[day.date]\"\r\n                      placeholder=\"班次\"\r\n                      size=\"mini\"\r\n                      @change=\"handleShiftChange(scope.row.doctorId, day.date, $event)\"\r\n                  >\r\n                    <el-option label=\"白班\" value=\"DAY\"></el-option>\r\n                    <el-option label=\"夜班\" value=\"NIGHT\"></el-option>\r\n                    <el-option label=\"休息\" :value=\"null\"></el-option>\r\n                  </el-select>\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getSchedulesByDepartment,\r\n  addSchedule,\r\n  updateSchedule,\r\n  deleteSchedule\r\n} from '@/api/scheduleApi'\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Schedule',\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\r\n      loading: false,\r\n      hospitalId: null,\r\n      departments: [],\r\n      selectedDepartment: null,\r\n      doctors: [],\r\n      currentWeek: this.getNextWeekStartDate(),\r\n      weekDays: [],\r\n      scheduleData: [],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'name'\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDepartments()\r\n    this.generateWeekDays()\r\n  },\r\n  methods: {\r\n    getNextWeekStartDate() {\r\n      const today = new Date()\r\n      const nextMonday = new Date(today)\r\n      nextMonday.setDate(today.getDate() + ((1 + 7 - today.getDay()) % 7 || 7))\r\n      return nextMonday\r\n    },\r\n    generateWeekDays() {\r\n      const startDate = new Date(this.currentWeek)\r\n      this.weekDays = []\r\n      for (let i = 0; i < 7; i++) {\r\n        const date = new Date(startDate)\r\n        date.setDate(startDate.getDate() + i)\r\n        this.weekDays.push({\r\n          date: parseTime(date, '{y}-{m}-{d}'),\r\n          label: parseTime(date, '{m}-{d} 周') + ['日', '一', '二', '三', '四', '五', '六'][date.getDay()]\r\n        })\r\n      }\r\n    },\r\n    fetchDepartments() {\r\n      this.$request.get('/hospital/departmentList', {\r\n        params: {\r\n          userId: this.user.id\r\n        }\r\n      }).then(response => {\r\n        if (response.code == 200) {\r\n          this.departments = response.data\r\n        }else {\r\n          this.$message.error(response.data.message || '获取科室列表失败')\r\n        }\r\n      })\r\n    },\r\n\r\n    async handleDepartmentClick(data) {\r\n      this.selectedDepartment = data\r\n      await this.fetchDoctors(data.id)\r\n      await this.fetchSchedules()\r\n    },\r\n\r\n    fetchDoctors(departmentId) {\r\n      this.$request.get('/doctor/selectDocByAdminIdAndDepId', {\r\n        params: {\r\n           userId: this.user.id,\r\n          departmentId: departmentId\r\n        }\r\n      }).then(response => {\r\n        if (response.code == 200) {\r\n          this.doctors = response.data\r\n          this.prepareScheduleData()\r\n        }else {\r\n          this.$message.error(response.data.message || '获取医生列表失败')\r\n        }\r\n      })\r\n    },\r\n\r\n    prepareScheduleData() {\r\n      this.scheduleData = this.doctors.map(doctor => {\r\n        const schedules = {}\r\n        this.weekDays.forEach(day => {\r\n          schedules[day.date] = null\r\n        })\r\n        return {\r\n          doctorId: doctor.id,\r\n          doctorName: doctor.name,\r\n          schedules: schedules\r\n        }\r\n      })\r\n    },\r\n    async fetchSchedules() {\r\n      if (!this.selectedDepartment) return\r\n\r\n      this.loading = true\r\n      this.generateWeekDays()\r\n      this.prepareScheduleData()\r\n\r\n      try {\r\n        const startDate = new Date(this.currentWeek)\r\n        const endDate = new Date(startDate)\r\n        endDate.setDate(startDate.getDate() + 6)\r\n\r\n        const response = await getSchedulesByDepartment(\r\n            this.user.id,\r\n            this.selectedDepartment.id,\r\n            startDate,\r\n            endDate\r\n        )\r\n\r\n        // 更新排班数据\r\n        response.data.forEach(schedule => {\r\n          const scheduleDate = parseTime(schedule.schedule_date, '{y}-{m}-{d}')\r\n          const doctorSchedule = this.scheduleData.find(\r\n              item => item.doctorId === schedule.doctor_id\r\n          )\r\n          if (doctorSchedule) {\r\n            doctorSchedule.schedules[scheduleDate] = schedule.shift_type\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.error('获取排班信息失败:', error)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    async handleShiftChange(doctorId, date, shiftType) {\r\n      try {\r\n        // 首先查找是否已有排班记录\r\n        const existingSchedule = await this.findExistingSchedule(doctorId, date)\r\n\r\n        if (shiftType) {\r\n          // 有班次选择\r\n          if (existingSchedule) {\r\n            // 更新现有排班\r\n            await updateSchedule({\r\n              id: existingSchedule.id,\r\n              shift_type: shiftType\r\n            })\r\n          } else {\r\n            // 新增排班\r\n            await addSchedule({\r\n              hospital_id: this.user.id,\r\n              department_id: this.selectedDepartment.id,\r\n              doctor_id: doctorId,\r\n              schedule_date: date,\r\n              shift_type: shiftType,\r\n              fatigue_score: 0\r\n            })\r\n          }\r\n        } else {\r\n          // 选择休息，删除排班记录\r\n          if (existingSchedule) {\r\n            await deleteSchedule(existingSchedule.id)\r\n          }\r\n        }\r\n\r\n        this.$message.success('排班更新成功')\r\n      } catch (error) {\r\n        console.error('更新排班失败:', error)\r\n        this.$message.error('排班更新失败')\r\n      }\r\n    },\r\n    async findExistingSchedule(doctorId, date) {\r\n      try {\r\n        const response = await getSchedulesByDepartment(\r\n            this.user.id,\r\n            this.selectedDepartment.id,\r\n            new Date(date),\r\n            new Date(date)\r\n        )\r\n        return response.data.find(\r\n            item => item.doctor_id === doctorId &&\r\n                parseTime(item.schedule_date, '{y}-{m}-{d}') === date\r\n        )\r\n      } catch (error) {\r\n        console.error('查找排班记录失败:', error)\r\n        return null\r\n      }\r\n    },\r\n    showNextWeek() {\r\n      const nextWeek = new Date(this.currentWeek)\r\n      nextWeek.setDate(nextWeek.getDate() + 7)\r\n      this.currentWeek = nextWeek\r\n      this.fetchSchedules()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.clearfix:before,\r\n.clearfix:after {\r\n  display: table;\r\n  content: \"\";\r\n}\r\n.clearfix:after {\r\n  clear: both;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}