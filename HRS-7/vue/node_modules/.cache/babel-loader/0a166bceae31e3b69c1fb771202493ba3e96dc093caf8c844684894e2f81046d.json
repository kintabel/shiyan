{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Reservation',\n  data() {\n    return {\n      searchKeyword: '',\n      hospitalList: [],\n      isDialogVisible: false,\n      selectedHospital: {},\n      currentPage: 1,\n      pageSize: 10,\n      totalHospitals: 0,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      isLoading: false\n    };\n  },\n  created() {\n    this.fetchHospitalList(1);\n  },\n  methods: {\n    async fetchHospitalList(pageNumber) {\n      this.currentPage = pageNumber;\n      try {\n        const response = await this.$request.get('/hospital/selectPage', {\n          params: {\n            pageNum: this.currentPage,\n            pageSize: this.pageSize,\n            name: this.searchKeyword\n          }\n        });\n        if (response.data && response.data.list) {\n          this.hospitalList = response.data.list;\n        }\n        if (response.data && response.data.total) {\n          this.totalHospitals = response.data.total;\n        }\n      } catch (error) {\n        console.error('获取医院列表失败:', error);\n        this.$message.error('获取医院列表失败，请稍后重试');\n      }\n    },\n    resetSearch() {\n      this.searchKeyword = '';\n      this.fetchHospitalList(1);\n    },\n    handlePageChange(newPage) {\n      this.fetchHospitalList(newPage);\n    },\n    async showHospitalDetails(row) {\n      this.isLoading = true;\n      this.isDialogVisible = true;\n      try {\n        const response = await this.$request.get('/hospital/selectAllData', {\n          params: {\n            id: row.id\n          }\n        });\n        console.log('接口返回的数据:', response.data);\n        if (response.data && typeof response.data === 'object' && response.data.data && typeof response.data.data === 'object') {\n          const hospitalData = response.data.data;\n          // 将 level 转换为数字类型\n          hospitalData.level = Number(hospitalData.level);\n          if (typeof hospitalData.name === 'string' && typeof hospitalData.address === 'string' && typeof hospitalData.phone === 'string' && typeof hospitalData.level === 'number' && Array.isArray(hospitalData.departments) && typeof hospitalData.introduction === 'string') {\n            this.$nextTick(() => {\n              this.selectedHospital = hospitalData;\n            });\n          } else {\n            console.error('医院详情数据字段类型错误:', hospitalData);\n            this.$message.error('获取医院详情失败，数据格式不正确');\n          }\n        } else {\n          console.error('响应数据格式错误:', response.data);\n          this.$message.error('获取医院详情失败，响应数据格式异常');\n        }\n      } catch (error) {\n        console.error('获取医院详情失败:', error);\n        this.$message.error('获取医院详情失败，请稍后重试');\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","searchKeyword","hospitalList","isDialogVisible","selectedHospital","currentPage","pageSize","totalHospitals","user","JSON","parse","localStorage","getItem","isLoading","created","fetchHospitalList","methods","pageNumber","response","$request","get","params","pageNum","list","total","error","console","$message","resetSearch","handlePageChange","newPage","showHospitalDetails","row","id","log","hospitalData","level","Number","address","phone","Array","isArray","departments","introduction","$nextTick"],"sources":["src/views/manager/Reservation.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 搜索框 -->\r\n    <div class=\"search-container\">\r\n      <el-input v-model=\"searchKeyword\" placeholder=\"请输入医院名称\" @keyup.enter=\"fetchHospitalList(1)\"></el-input>\r\n      <el-button @click=\"fetchHospitalList(1)\">搜索</el-button>\r\n    </div>\r\n\r\n    <!-- 医院列表 -->\r\n    <el-table :data=\"hospitalList\" stripe @row-click=\"showHospitalDetails\">\r\n      <el-table-column prop=\"name\" label=\"医院名称\"></el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n    <el-pagination\r\n        background\r\n        layout=\"prev, pager, next\"\r\n        :current-page=\"currentPage\"\r\n        :page-size=\"pageSize\"\r\n        :total=\"totalHospitals\"\r\n        @current-change=\"handlePageChange\"\r\n    ></el-pagination>\r\n\r\n    <!-- 医院详情模态框 -->\r\n    <el-dialog :visible.sync=\"isDialogVisible\" title=\"医院详情\">\r\n      <template #content>\r\n        <div v-if=\"isLoading\" class=\"loading-text\">加载中，请稍候...</div>\r\n        <div v-else>\r\n          <p v-if=\"selectedHospital.name\"><strong>医院名称:</strong> {{ selectedHospital.name }}</p>\r\n          <p v-if=\"selectedHospital.address\"><strong>医院地址:</strong> {{ selectedHospital.address }}</p>\r\n          <p v-if=\"selectedHospital.phone\"><strong>联系电话:</strong> {{ selectedHospital.phone }}</p>\r\n          <p v-if=\"selectedHospital.level\"><strong>医院等级:</strong> {{ selectedHospital.level }}</p>\r\n          <p v-if=\"selectedHospital.introduction\"><strong>医院简介:</strong> {{ selectedHospital.introduction }}</p>\r\n          <p v-if=\"selectedHospital.departments && selectedHospital.departments.length > 0\"><strong>科室列表:</strong></p>\r\n          <ul v-if=\"selectedHospital.departments\">\r\n            <li v-for=\"(department, index) in selectedHospital.departments\" :key=\"index\">{{ department }}</li>\r\n          </ul>\r\n        </div>\r\n      </template>\r\n      <template #footer>\r\n        <el-button @click=\"isDialogVisible = false\">关闭</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'Reservation',\r\n  data() {\r\n    return {\r\n      searchKeyword: '',\r\n      hospitalList: [],\r\n      isDialogVisible: false,\r\n      selectedHospital: {},\r\n      currentPage: 1,\r\n      pageSize: 10,\r\n      totalHospitals: 0,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      isLoading: false\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchHospitalList(1);\r\n  },\r\n  methods: {\r\n    async fetchHospitalList(pageNumber) {\r\n      this.currentPage = pageNumber;\r\n      try {\r\n        const response = await this.$request.get('/hospital/selectPage', {\r\n          params: {\r\n            pageNum: this.currentPage,\r\n            pageSize: this.pageSize,\r\n            name: this.searchKeyword\r\n          }\r\n        });\r\n        if (response.data && response.data.list) {\r\n          this.hospitalList = response.data.list;\r\n        }\r\n        if (response.data && response.data.total) {\r\n          this.totalHospitals = response.data.total;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取医院列表失败:', error);\r\n        this.$message.error('获取医院列表失败，请稍后重试');\r\n      }\r\n    },\r\n    resetSearch() {\r\n      this.searchKeyword = '';\r\n      this.fetchHospitalList(1);\r\n    },\r\n    handlePageChange(newPage) {\r\n      this.fetchHospitalList(newPage);\r\n    },\r\n    async showHospitalDetails(row) {\r\n      this.isLoading = true;\r\n      this.isDialogVisible = true;\r\n      try {\r\n        const response = await this.$request.get('/hospital/selectAllData', {\r\n          params: { id: row.id }\r\n        });\r\n        console.log('接口返回的数据:', response.data);\r\n\r\n        if (\r\n            response.data &&\r\n            typeof response.data === 'object' &&\r\n            response.data.data &&\r\n            typeof response.data.data === 'object'\r\n        ) {\r\n          const hospitalData = response.data.data;\r\n          // 将 level 转换为数字类型\r\n          hospitalData.level = Number(hospitalData.level);\r\n\r\n          if (\r\n              typeof hospitalData.name === 'string' &&\r\n              typeof hospitalData.address === 'string' &&\r\n              typeof hospitalData.phone === 'string' &&\r\n              typeof hospitalData.level === 'number' &&\r\n              Array.isArray(hospitalData.departments) &&\r\n              typeof hospitalData.introduction === 'string'\r\n          ) {\r\n            this.$nextTick(() => {\r\n              this.selectedHospital = hospitalData;\r\n            });\r\n          } else {\r\n            console.error('医院详情数据字段类型错误:', hospitalData);\r\n            this.$message.error('获取医院详情失败，数据格式不正确');\r\n          }\r\n        } else {\r\n          console.error('响应数据格式错误:', response.data);\r\n          this.$message.error('获取医院详情失败，响应数据格式异常');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取医院详情失败:', error);\r\n        this.$message.error('获取医院详情失败，请稍后重试');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.search-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.loading-text {\r\n  text-align: center;\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":"AA+CA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,YAAA;MACAC,eAAA;MACAC,gBAAA;MACAC,WAAA;MACAC,QAAA;MACAC,cAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACA,MAAAD,kBAAAE,UAAA;MACA,KAAAZ,WAAA,GAAAY,UAAA;MACA;QACA,MAAAC,QAAA,cAAAC,QAAA,CAAAC,GAAA;UACAC,MAAA;YACAC,OAAA,OAAAjB,WAAA;YACAC,QAAA,OAAAA,QAAA;YACAP,IAAA,OAAAE;UACA;QACA;QACA,IAAAiB,QAAA,CAAAlB,IAAA,IAAAkB,QAAA,CAAAlB,IAAA,CAAAuB,IAAA;UACA,KAAArB,YAAA,GAAAgB,QAAA,CAAAlB,IAAA,CAAAuB,IAAA;QACA;QACA,IAAAL,QAAA,CAAAlB,IAAA,IAAAkB,QAAA,CAAAlB,IAAA,CAAAwB,KAAA;UACA,KAAAjB,cAAA,GAAAW,QAAA,CAAAlB,IAAA,CAAAwB,KAAA;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACAG,YAAA;MACA,KAAA3B,aAAA;MACA,KAAAc,iBAAA;IACA;IACAc,iBAAAC,OAAA;MACA,KAAAf,iBAAA,CAAAe,OAAA;IACA;IACA,MAAAC,oBAAAC,GAAA;MACA,KAAAnB,SAAA;MACA,KAAAV,eAAA;MACA;QACA,MAAAe,QAAA,cAAAC,QAAA,CAAAC,GAAA;UACAC,MAAA;YAAAY,EAAA,EAAAD,GAAA,CAAAC;UAAA;QACA;QACAP,OAAA,CAAAQ,GAAA,aAAAhB,QAAA,CAAAlB,IAAA;QAEA,IACAkB,QAAA,CAAAlB,IAAA,IACA,OAAAkB,QAAA,CAAAlB,IAAA,iBACAkB,QAAA,CAAAlB,IAAA,CAAAA,IAAA,IACA,OAAAkB,QAAA,CAAAlB,IAAA,CAAAA,IAAA,eACA;UACA,MAAAmC,YAAA,GAAAjB,QAAA,CAAAlB,IAAA,CAAAA,IAAA;UACA;UACAmC,YAAA,CAAAC,KAAA,GAAAC,MAAA,CAAAF,YAAA,CAAAC,KAAA;UAEA,IACA,OAAAD,YAAA,CAAApC,IAAA,iBACA,OAAAoC,YAAA,CAAAG,OAAA,iBACA,OAAAH,YAAA,CAAAI,KAAA,iBACA,OAAAJ,YAAA,CAAAC,KAAA,iBACAI,KAAA,CAAAC,OAAA,CAAAN,YAAA,CAAAO,WAAA,KACA,OAAAP,YAAA,CAAAQ,YAAA,eACA;YACA,KAAAC,SAAA;cACA,KAAAxC,gBAAA,GAAA+B,YAAA;YACA;UACA;YACAT,OAAA,CAAAD,KAAA,kBAAAU,YAAA;YACA,KAAAR,QAAA,CAAAF,KAAA;UACA;QACA;UACAC,OAAA,CAAAD,KAAA,cAAAP,QAAA,CAAAlB,IAAA;UACA,KAAA2B,QAAA,CAAAF,KAAA;QACA;MACA,SAAAA,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;QACA,KAAAZ,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}