{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { parseTime } from '@/utils';\nexport default {\n  name: 'Doctor',\n  data() {\n    return {\n      doctors: [],\n      todaySchedules: [],\n      isLoading: true,\n      isAppointment: this.$route.params.isAppointment,\n      currentHour: new Date().getHours() // 获取当前小时\n    };\n  },\n\n  computed: {\n    filteredDoctors() {\n      return this.doctors.map(doctor => {\n        const schedule = this.todaySchedules.find(s => s.doctorId === doctor.id);\n        return {\n          ...doctor,\n          schedule: schedule,\n          hasSchedule: !!schedule\n        };\n      });\n    }\n  },\n  created() {\n    this.fetchTodaySchedules().then(() => {\n      this.fetchDoctors();\n    });\n  },\n  methods: {\n    // 获取当前时间段是否可预约\n    isAvailable(doctor) {\n      if (!doctor.hasSchedule) return false;\n      const shiftType = doctor.schedule?.shift_type;\n      // 白天班(9-18点)只能在白天预约，夜班(18-次日9点)只能在晚上预约\n      if (shiftType === 'DAY') {\n        return this.currentHour >= 8 && this.currentHour < 18;\n      } else if (shiftType === 'NIGHT') {\n        return this.currentHour >= 18 || this.currentHour < 8;\n      }\n      return false;\n    },\n    // 按钮文本\n    getButtonText(doctor) {\n      if (!doctor.hasSchedule) return '今日无排班';\n      const shiftType = doctor.schedule?.shift_type;\n      if (shiftType === 'DAY' && (this.currentHour < 8 || this.currentHour >= 18)) {\n        return '非白天时段';\n      } else if (shiftType === 'NIGHT' && this.currentHour >= 8 && this.currentHour < 18) {\n        return '非夜间时段';\n      }\n      return '预约挂号';\n    },\n    // 班次标签样式\n    getShiftTagType(schedule) {\n      if (!schedule) return 'info';\n      return schedule.shift_type === 'DAY' ? 'success' : 'warning';\n    },\n    // 跳转到挂号页面\n    goToRegistration(doctor) {\n      const shiftType = doctor.schedule?.shift_type === 'DAY' ? 1 : 2;\n      if (this.isAppointment) {\n        this.$router.push({\n          name: 'AppointmentRegister',\n          params: {\n            doctorId: doctor.id\n          },\n          query: {\n            status: 0,\n            shiftType: shiftType\n          }\n        });\n      } else {\n        this.$router.push({\n          name: 'Registration',\n          params: {\n            doctorId: doctor.id\n          },\n          query: {\n            status: 0,\n            shiftType: shiftType\n          }\n        });\n      }\n    },\n    // 其他方法保持不变...\n    async fetchTodaySchedules() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      const today = parseTime(new Date(), '{y}-{m}-{d}');\n      try {\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\n          params: {\n            hospitalId: hospitalId,\n            startDate: today,\n            endDate: today\n          }\n        });\n        this.todaySchedules = response.data || [];\n      } catch (error) {\n        console.error('获取今日排班失败:', error);\n        this.$message.error('获取排班信息失败');\n      }\n    },\n    fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId;\n      const departmentId = this.$route.params.departmentId;\n      this.$request.get('/doctor/selectDoc', {\n        params: {\n          hospitalId: hospitalId,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctors = response.data;\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    },\n    getShiftType(schedule) {\n      if (!schedule) return '无排班';\n      return schedule.shift_type === 'DAY' ? '白班' : schedule.shift_type === 'NIGHT' ? '夜班' : '无排班';\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","doctors","todaySchedules","isLoading","isAppointment","$route","params","currentHour","Date","getHours","computed","filteredDoctors","map","doctor","schedule","find","s","doctorId","id","hasSchedule","created","fetchTodaySchedules","then","fetchDoctors","methods","isAvailable","shiftType","shift_type","getButtonText","getShiftTagType","goToRegistration","$router","push","query","status","hospitalId","departmentId","today","response","$request","get","startDate","endDate","error","console","$message","catch","finally","getDoctorTitle","getShiftType"],"sources":["src/views/user/Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"filteredDoctors\" stripe>\r\n        <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n        <el-table-column label=\"医生职称\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getDoctorTitle(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.schedule)\">\r\n              {{ getShiftType(scope.row.schedule) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row)\"\r\n                type=\"primary\"\r\n                :disabled=\"!isAvailable(scope.row)\"\r\n            >\r\n              {{ getButtonText(scope.row) }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [],\r\n      todaySchedules: [],\r\n      isLoading: true,\r\n      isAppointment: this.$route.params.isAppointment,\r\n      currentHour: new Date().getHours() // 获取当前小时\r\n    };\r\n  },\r\n  computed: {\r\n    filteredDoctors() {\r\n      return this.doctors.map(doctor => {\r\n        const schedule = this.todaySchedules.find(s => s.doctorId === doctor.id)\r\n        return {\r\n          ...doctor,\r\n          schedule: schedule,\r\n          hasSchedule: !!schedule\r\n        }\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchTodaySchedules().then(() => {\r\n      this.fetchDoctors()\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取当前时间段是否可预约\r\n    isAvailable(doctor) {\r\n      if (!doctor.hasSchedule) return false\r\n\r\n      const shiftType = doctor.schedule?.shift_type\r\n      // 白天班(9-18点)只能在白天预约，夜班(18-次日9点)只能在晚上预约\r\n      if (shiftType === 'DAY') {\r\n        return this.currentHour >= 8 && this.currentHour < 18\r\n      } else if (shiftType === 'NIGHT') {\r\n        return this.currentHour >= 18 || this.currentHour < 8\r\n      }\r\n      return false\r\n    },\r\n\r\n    // 按钮文本\r\n    getButtonText(doctor) {\r\n      if (!doctor.hasSchedule) return '今日无排班'\r\n\r\n      const shiftType = doctor.schedule?.shift_type\r\n      if (shiftType === 'DAY' && (this.currentHour < 8 || this.currentHour >= 18)) {\r\n        return '非白天时段'\r\n      } else if (shiftType === 'NIGHT' && (this.currentHour >= 8 && this.currentHour < 18)) {\r\n        return '非夜间时段'\r\n      }\r\n      return '预约挂号'\r\n    },\r\n\r\n    // 班次标签样式\r\n    getShiftTagType(schedule) {\r\n      if (!schedule) return 'info'\r\n      return schedule.shift_type === 'DAY' ? 'success' : 'warning'\r\n    },\r\n\r\n    // 跳转到挂号页面\r\n    goToRegistration(doctor) {\r\n      const shiftType = doctor.schedule?.shift_type === 'DAY' ? 1 : 2\r\n\r\n      if (this.isAppointment) {\r\n        this.$router.push({\r\n          name: 'AppointmentRegister',\r\n          params: { doctorId: doctor.id },\r\n          query: {\r\n            status: 0,\r\n            shiftType: shiftType\r\n          }\r\n        })\r\n      } else {\r\n        this.$router.push({\r\n          name: 'Registration',\r\n          params: { doctorId: doctor.id },\r\n          query: {\r\n            status: 0,\r\n            shiftType: shiftType\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n    // 其他方法保持不变...\r\n    async fetchTodaySchedules() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n      const today = parseTime(new Date(), '{y}-{m}-{d}')\r\n\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/department/' + departmentId, {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            startDate: today,\r\n            endDate: today\r\n          }\r\n        })\r\n        this.todaySchedules = response.data || []\r\n      } catch (error) {\r\n        console.error('获取今日排班失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      }\r\n    },\r\n\r\n    fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n\r\n      this.$request.get('/doctor/selectDoc', {\r\n        params: {\r\n          hospitalId: hospitalId,\r\n          departmentId: departmentId\r\n        }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctors = response.data\r\n            } else {\r\n              console.error('获取医生列表数据格式错误:', response.data)\r\n              this.$message.error('获取医生列表失败，请稍后重试')\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生列表失败:', error)\r\n            this.$message.error('获取医生列表失败，请稍后重试')\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false\r\n          })\r\n    },\r\n\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    },\r\n\r\n    getShiftType(schedule) {\r\n      if (!schedule) return '无排班'\r\n      return schedule.shift_type === 'DAY' ? '白班' :\r\n          schedule.shift_type === 'NIGHT' ? '夜班' : '无排班'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 原有样式保持不变 */\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}