{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from '@/utils/request';\nexport default {\n  name: 'DoctorSchedule',\n  data() {\n    return {\n      departmentId: '',\n      departments: [],\n      doctorList: [],\n      scheduleDate: '',\n      listLoading: false,\n      loading: false,\n      saving: false,\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}')\n    };\n  },\n  created() {\n    this.fetchDepartments();\n    // 默认设置为当前周\n    const now = new Date();\n    this.scheduleDate = this.getMonday(now).toISOString().split('T')[0];\n  },\n  methods: {\n    // 获取周一日期\n    getMonday(d) {\n      d = new Date(d);\n      const day = d.getDay();\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is Sunday\n      return new Date(d.setDate(diff));\n    },\n    // 获取科室列表\n    fetchDepartments() {\n      request.get('/hospital/departmentList', {\n        params: {\n          userId: this.user.id\n        }\n      }).then(response => {\n        this.departments = response.data;\n      });\n    },\n    // 获取医生列表\n    fetchDoctors() {\n      if (!this.departmentId) return;\n      this.listLoading = true;\n      request.get('/doctor/list', {\n        params: {\n          userId: this.user.id,\n          departmentId: this.departmentId\n        }\n      }).then(response => {\n        this.doctorList = response.data.map(doctor => ({\n          ...doctor,\n          schedule: Array(7).fill('OFF') // 初始化排班数组\n        }));\n\n        this.fetchSchedule();\n      }).finally(() => {\n        this.listLoading = false;\n      });\n    },\n    // 获取已有排班数据\n    fetchSchedule() {\n      if (!this.scheduleDate || !this.doctorList.length) return;\n      const startDate = this.scheduleDate;\n      const endDate = new Date(new Date(startDate).getTime() + 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      request.get('/doctor/scheduleList', {\n        params: {\n          departmentId: this.departmentId,\n          startDate,\n          endDate\n        }\n      }).then(response => {\n        const schedules = response.data;\n        this.doctorList.forEach(doctor => {\n          // 重置排班\n          doctor.schedule = Array(7).fill('OFF');\n          // 填充已有排班\n          schedules.filter(s => s.doctorId === doctor.id).forEach(schedule => {\n            const dayIndex = (new Date(schedule.workDate).getDay() + 6) % 7; // 转换为0-6的索引\n            doctor.schedule[dayIndex] = schedule.status;\n          });\n        });\n      });\n    },\n    // 自动排班\n    autoSchedule() {\n      this.loading = true;\n      request.post('/doctor/autoSchedule', {\n        departmentId: this.departmentId,\n        startDate: this.scheduleDate\n      }).then(response => {\n        this.$message.success('自动排班成功');\n        this.fetchSchedule();\n      }).catch(() => {\n        this.$message.error('自动排班失败');\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    // 保存排班\n    saveSchedule() {\n      if (!this.scheduleDate || !this.doctorList.length) {\n        this.$message.warning('请选择科室和日期');\n        return;\n      }\n      this.saving = true;\n      const schedules = [];\n      const startDate = new Date(this.scheduleDate);\n      this.doctorList.forEach(doctor => {\n        doctor.schedule.forEach((status, index) => {\n          if (status === 'WORK') {\n            const workDate = new Date(startDate);\n            workDate.setDate(startDate.getDate() + index);\n            schedules.push({\n              doctorId: doctor.id,\n              workDate: workDate.toISOString().split('T')[0],\n              status: 'WORK'\n            });\n          }\n        });\n      });\n      request.post('/doctor/saveSchedule', {\n        schedules\n      }).then(() => {\n        this.$message.success('排班保存成功');\n      }).catch(() => {\n        this.$message.error('排班保存失败');\n      }).finally(() => {\n        this.saving = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","departmentId","departments","doctorList","scheduleDate","listLoading","loading","saving","user","JSON","parse","localStorage","getItem","created","fetchDepartments","now","Date","getMonday","toISOString","split","methods","d","day","getDay","diff","getDate","setDate","get","params","userId","id","then","response","fetchDoctors","map","doctor","schedule","Array","fill","fetchSchedule","finally","length","startDate","endDate","getTime","schedules","forEach","filter","s","doctorId","dayIndex","workDate","status","autoSchedule","post","$message","success","catch","error","saveSchedule","warning","index","push"],"sources":["src/views/hospitalAdmin/Scheduling.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-schedule-container\">\r\n    <div class=\"header\">\r\n      <h2>医生排班管理</h2>\r\n      <el-button type=\"primary\" @click=\"autoSchedule\" :loading=\"loading\">\r\n        自动排班\r\n      </el-button>\r\n      <el-button type=\"success\" @click=\"saveSchedule\" :loading=\"saving\">\r\n        保存排班\r\n      </el-button>\r\n    </div>\r\n\r\n    <div class=\"filter-container\">\r\n      <el-select v-model=\"departmentId\" placeholder=\"请选择科室\" clearable @change=\"fetchDoctors\">\r\n        <el-option\r\n            v-for=\"dept in departments\"\r\n            :key=\"dept.id\"\r\n            :label=\"dept.name\"\r\n            :value=\"dept.id\"\r\n        />\r\n      </el-select>\r\n\r\n      <el-date-picker\r\n          v-model=\"scheduleDate\"\r\n          type=\"week\"\r\n          format=\"yyyy 第 WW 周\"\r\n          value-format=\"yyyy-MM-dd\"\r\n          placeholder=\"选择排班周\"\r\n          @change=\"fetchSchedule\"\r\n      />\r\n    </div>\r\n\r\n    <el-table\r\n        :data=\"doctorList\"\r\n        border\r\n        style=\"width: 100%\"\r\n        v-loading=\"listLoading\"\r\n    >\r\n      <el-table-column prop=\"name\" label=\"医生姓名\" width=\"120\" />\r\n      <el-table-column prop=\"title\" label=\"职称\" width=\"120\" />\r\n      <el-table-column prop=\"departmentName\" label=\"科室\" width=\"150\" />\r\n\r\n      <el-table-column label=\"周一\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[0]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周二\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[1]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周三\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[2]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周四\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[3]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周五\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[4]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周六\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[5]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"周日\">\r\n        <template #default=\"{row}\">\r\n          <el-switch\r\n              v-model=\"row.schedule[6]\"\r\n              active-text=\"上班\"\r\n              inactive-text=\"休息\"\r\n              :active-value=\"'WORK'\"\r\n              :inactive-value=\"'OFF'\"\r\n          />\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from '@/utils/request'\r\n\r\nexport default {\r\n  name: 'DoctorSchedule',\r\n  data() {\r\n    return {\r\n      departmentId: '',\r\n      departments: [],\r\n      doctorList: [],\r\n      scheduleDate: '',\r\n      listLoading: false,\r\n      loading: false,\r\n      saving: false,\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDepartments()\r\n    // 默认设置为当前周\r\n    const now = new Date()\r\n    this.scheduleDate = this.getMonday(now).toISOString().split('T')[0]\r\n  },\r\n  methods: {\r\n    // 获取周一日期\r\n    getMonday(d) {\r\n      d = new Date(d)\r\n      const day = d.getDay()\r\n      const diff = d.getDate() - day + (day === 0 ? -6 : 1) // adjust when day is Sunday\r\n      return new Date(d.setDate(diff))\r\n    },\r\n\r\n    // 获取科室列表\r\n    fetchDepartments() {\r\n      request.get('/hospital/departmentList',{\r\n        params:{\r\n          userId:this.user.id\r\n        }\r\n      }).then(response => {\r\n        this.departments = response.data\r\n      })\r\n    },\r\n\r\n    // 获取医生列表\r\n    fetchDoctors() {\r\n      if (!this.departmentId) return\r\n\r\n      this.listLoading = true\r\n      request.get('/doctor/list', {\r\n        params: {\r\n          userId:this.user.id,\r\n          departmentId: this.departmentId\r\n        }\r\n      }).then(response => {\r\n        this.doctorList = response.data.map(doctor => ({\r\n          ...doctor,\r\n          schedule: Array(7).fill('OFF') // 初始化排班数组\r\n        }))\r\n        this.fetchSchedule()\r\n      }).finally(() => {\r\n        this.listLoading = false\r\n      })\r\n    },\r\n\r\n    // 获取已有排班数据\r\n    fetchSchedule() {\r\n      if (!this.scheduleDate || !this.doctorList.length) return\r\n\r\n      const startDate = this.scheduleDate\r\n      const endDate = new Date(new Date(startDate).getTime() + 6 * 24 * 60 * 60 * 1000)\r\n          .toISOString().split('T')[0]\r\n\r\n      request.get('/doctor/scheduleList', {\r\n        params: {\r\n          departmentId: this.departmentId,\r\n          startDate,\r\n          endDate\r\n        }\r\n      }).then(response => {\r\n        const schedules = response.data\r\n        this.doctorList.forEach(doctor => {\r\n          // 重置排班\r\n          doctor.schedule = Array(7).fill('OFF')\r\n          // 填充已有排班\r\n          schedules.filter(s => s.doctorId === doctor.id).forEach(schedule => {\r\n            const dayIndex = (new Date(schedule.workDate).getDay() + 6) % 7 // 转换为0-6的索引\r\n            doctor.schedule[dayIndex] = schedule.status\r\n          })\r\n        })\r\n      })\r\n    },\r\n\r\n    // 自动排班\r\n    autoSchedule() {\r\n      this.loading = true\r\n      request.post('/doctor/autoSchedule', {\r\n        departmentId: this.departmentId,\r\n        startDate: this.scheduleDate\r\n      }).then(response => {\r\n        this.$message.success('自动排班成功')\r\n        this.fetchSchedule()\r\n      }).catch(() => {\r\n        this.$message.error('自动排班失败')\r\n      }).finally(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n\r\n    // 保存排班\r\n    saveSchedule() {\r\n      if (!this.scheduleDate || !this.doctorList.length) {\r\n        this.$message.warning('请选择科室和日期')\r\n        return\r\n      }\r\n\r\n      this.saving = true\r\n      const schedules = []\r\n      const startDate = new Date(this.scheduleDate)\r\n\r\n      this.doctorList.forEach(doctor => {\r\n        doctor.schedule.forEach((status, index) => {\r\n          if (status === 'WORK') {\r\n            const workDate = new Date(startDate)\r\n            workDate.setDate(startDate.getDate() + index)\r\n\r\n            schedules.push({\r\n              doctorId: doctor.id,\r\n              workDate: workDate.toISOString().split('T')[0],\r\n              status: 'WORK'\r\n            })\r\n          }\r\n        })\r\n      })\r\n\r\n      request.post('/doctor/saveSchedule', {\r\n        schedules\r\n      }).then(() => {\r\n        this.$message.success('排班保存成功')\r\n      }).catch(() => {\r\n        this.$message.error('排班保存失败')\r\n      }).finally(() => {\r\n        this.saving = false\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-schedule-container {\r\n  padding: 20px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-container > * {\r\n  margin-right: 10px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}