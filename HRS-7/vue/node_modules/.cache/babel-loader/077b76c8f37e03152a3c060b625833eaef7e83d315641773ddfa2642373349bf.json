{"ast":null,"code":"export default {\n  name: 'Doctor',\n  data() {\n    return {\n      doctors: [],\n      // 医生列表\n      isLoading: true\n    };\n  },\n  created() {\n    this.fetchDoctors();\n  },\n  methods: {\n    fetchDoctors() {\n      const hospitalId = this.$route.params.hospitalId; // 获取医院 ID\n      const departmentId = this.$route.params.departmentId; // 获取科室 ID\n      console.log('hospitalId:', hospitalId);\n      console.log('departmentId:', departmentId);\n\n      // 调用 doctor/selectdoc 接口\n      this.$request.get('/doctor/selectDoc', {\n        params: {\n          hospitalId: hospitalId,\n          departmentId: departmentId\n        }\n      }).then(response => {\n        if (response.data) {\n          this.doctors = response.data; // 假设接口返回的数据是医生列表\n        } else {\n          console.error('获取医生列表数据格式错误:', response.data);\n          this.$message.error('获取医生列表失败，请稍后重试');\n        }\n      }).catch(error => {\n        console.error('获取医生列表失败:', error);\n        this.$message.error('获取医生列表失败，请稍后重试');\n      }).finally(() => {\n        this.isLoading = false;\n      });\n    },\n    getDoctorTitle(status) {\n      switch (status) {\n        case 1:\n          return '医师';\n        case 2:\n          return '副主治医师';\n        case 3:\n          return '主治医师';\n        case 4:\n          return '专家';\n        case 5:\n          return '急诊';\n        default:\n          return '未知职称';\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","doctors","isLoading","created","fetchDoctors","methods","hospitalId","$route","params","departmentId","console","log","$request","get","then","response","error","$message","catch","finally","getDoctorTitle","status"],"sources":["src/views/manager/Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page\">\r\n    <h1>医生列表</h1>\r\n    <div v-if=\"isLoading\" class=\"loading-text\">加载中，请稍候...</div>\r\n    <div v-else>\r\n      <ul>\r\n        <li v-for=\"(doctor, index) in doctors\" :key=\"index\">\r\n          {{ doctor.name }} - {{ getDoctorTitle(doctor.status) }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [], // 医生列表\r\n      isLoading: true\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchDoctors();\r\n  },\r\n  methods: {\r\n    fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId; // 获取医院 ID\r\n      const departmentId = this.$route.params.departmentId; // 获取科室 ID\r\n      console.log('hospitalId:', hospitalId);\r\n      console.log('departmentId:', departmentId);\r\n\r\n      // 调用 doctor/selectdoc 接口\r\n      this.$request.get('/doctor/selectDoc', {\r\n        params: {\r\n          hospitalId: hospitalId,\r\n          departmentId: departmentId\r\n        }\r\n      })\r\n          .then(response => {\r\n            if (response.data) {\r\n              this.doctors = response.data; // 假设接口返回的数据是医生列表\r\n            } else {\r\n              console.error('获取医生列表数据格式错误:', response.data);\r\n              this.$message.error('获取医生列表失败，请稍后重试');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('获取医生列表失败:', error);\r\n            this.$message.error('获取医生列表失败，请稍后重试');\r\n          })\r\n          .finally(() => {\r\n            this.isLoading = false;\r\n          });\r\n    },\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1:\r\n          return '医师';\r\n        case 2:\r\n          return '副主治医师';\r\n        case 3:\r\n          return '主治医师';\r\n        case 4:\r\n          return '专家';\r\n        case 5:\r\n          return '急诊';\r\n        default:\r\n          return '未知职称';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-text {\r\n  text-align: center;\r\n  font-size: 16px;\r\n  color: #666;\r\n}\r\n</style>"],"mappings":"AAeA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACAD,aAAA;MACA,MAAAE,UAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,UAAA;MACA,MAAAG,YAAA,QAAAF,MAAA,CAAAC,MAAA,CAAAC,YAAA;MACAC,OAAA,CAAAC,GAAA,gBAAAL,UAAA;MACAI,OAAA,CAAAC,GAAA,kBAAAF,YAAA;;MAEA;MACA,KAAAG,QAAA,CAAAC,GAAA;QACAL,MAAA;UACAF,UAAA,EAAAA,UAAA;UACAG,YAAA,EAAAA;QACA;MACA,GACAK,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAf,IAAA;UACA,KAAAC,OAAA,GAAAc,QAAA,CAAAf,IAAA;QACA;UACAU,OAAA,CAAAM,KAAA,kBAAAD,QAAA,CAAAf,IAAA;UACA,KAAAiB,QAAA,CAAAD,KAAA;QACA;MACA,GACAE,KAAA,CAAAF,KAAA;QACAN,OAAA,CAAAM,KAAA,cAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA,GACAG,OAAA;QACA,KAAAjB,SAAA;MACA;IACA;IACAkB,eAAAC,MAAA;MACA,QAAAA,MAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}