{"ast":null,"code":"import { parseTime } from '@/utils';\nexport default {\n  name: 'HospitalReport',\n  data() {\n    return {\n      report: null,\n      isLoading: true,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      reportId: this.$route.query.id,\n      keyToLabel: {\n        reportType: '报告类型',\n        userName: '患者姓名',\n        patientGender: '患者性别',\n        patientAge: '患者年龄',\n        patientHeight: '患者身高',\n        patientWeight: '患者体重',\n        doctorName: '主治医师',\n        hospitalName: '医院',\n        departmentName: '科室',\n        bloodPressure: '血压',\n        heartRate: '心率',\n        completeBloodCount: '血常规',\n        urinalysis: '尿常规',\n        contagiousDisease: '传染病史',\n        informationId: '其他信息'\n      }\n    };\n  },\n  async created() {\n    const reportId = this.$route.query.id;\n    await this.fetchHospitalizationReport(reportId);\n  },\n  methods: {\n    transformData(data) {\n      return Object.entries(data).filter(([key]) => key !== 'id').map(([key, value]) => ({\n        label: this.keyToLabel[key] || key,\n        value\n      }));\n    },\n    async fetchHospitalizationReport(reportId) {\n      try {\n        const response = await this.$request.get(`/user/selectReport/${reportId}`);\n        if (response.data) {\n          this.report = response.data;\n          console.log('报告单:', this.report);\n        } else {\n          this.handleError('获取报告单详细信息失败', response.data);\n        }\n      } catch (error) {\n        this.handleError('获取报告单详细信息失败', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    handleError(message, error) {\n      console.error(message, error);\n      this.$message.error(message);\n    }\n  }\n};","map":{"version":3,"names":["parseTime","name","data","report","isLoading","user","JSON","parse","localStorage","getItem","reportId","$route","query","id","keyToLabel","reportType","userName","patientGender","patientAge","patientHeight","patientWeight","doctorName","hospitalName","departmentName","bloodPressure","heartRate","completeBloodCount","urinalysis","contagiousDisease","informationId","created","fetchHospitalizationReport","methods","transformData","Object","entries","filter","key","map","value","label","response","$request","get","console","log","handleError","error","message","$message"],"sources":["E:\\专业设计项目\\HRS\\HRS-7\\vue\\src\\views\\user\\hospitalReport.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"transformData(report)\" style=\"width: 100%;\">\r\n        <el-table-column>\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.label }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column>\r\n          <template slot-scope=\"scope\">\r\n            <span>{{ scope.row.value }}</span>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'HospitalReport',\r\n  data() {\r\n    return {\r\n      report: null,\r\n      isLoading: true,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      reportId: this.$route.query.id,\r\n      keyToLabel: {\r\n        reportType: '报告类型',\r\n        userName: '患者姓名',\r\n        patientGender: '患者性别',\r\n        patientAge: '患者年龄',\r\n        patientHeight: '患者身高',\r\n        patientWeight: '患者体重',\r\n        doctorName: '主治医师',\r\n        hospitalName: '医院',\r\n        departmentName: '科室',\r\n        bloodPressure: '血压',\r\n        heartRate: '心率',\r\n        completeBloodCount: '血常规',\r\n        urinalysis: '尿常规',\r\n        contagiousDisease: '传染病史',\r\n        informationId: '其他信息'\r\n      }\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    const reportId = this.$route.query.id;\r\n    await this.fetchHospitalizationReport(reportId);\r\n  },\r\n  methods: {\r\n    transformData(data) {\r\n      return Object.entries(data)\r\n          .filter(([key]) => key!== 'id')\r\n          .map(([key, value]) => ({\r\n            label: this.keyToLabel[key] || key,\r\n            value\r\n          }));\r\n    },\r\n    async fetchHospitalizationReport(reportId) {\r\n      try {\r\n        const response = await this.$request.get(`/user/selectReport/${reportId}`);\r\n        if (response.data) {\r\n          this.report = response.data;\r\n          console.log('报告单:', this.report);\r\n        } else {\r\n          this.handleError('获取报告单详细信息失败', response.data);\r\n        }\r\n      } catch (error) {\r\n        this.handleError('获取报告单详细信息失败', error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n\r\n    handleError(message, error) {\r\n      console.error(message, error);\r\n      this.$message.error(message);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n\r\n.el-table {\r\n  border: 1px solid #e4e7ed;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.el-table__header-wrapper {\r\n  display: none;\r\n}\r\n\r\n.el-table__row--striped {\r\n  background-color: #f9fafc;\r\n}\r\n\r\n.el-table__cell {\r\n  border-right: 1px solid #e4e7ed;\r\n  border-bottom: 1px solid #e4e7ed;\r\n  padding: 10px;\r\n}\r\n\r\n.el-table__cell:last-child {\r\n  border-right: none;\r\n}\r\n\r\n.el-table__row:last-child .el-table__cell {\r\n  border-bottom: none;\r\n}\r\n</style>"],"mappings":"AAwBA,SAASA,SAAQ,QAAS,SAAQ;AAElC,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAI;MACfC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,KAAK,IAAI,CAAC;MACzDC,QAAQ,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,EAAE;MAC9BC,UAAU,EAAE;QACVC,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAE,MAAM;QAChBC,aAAa,EAAE,MAAM;QACrBC,UAAU,EAAE,MAAM;QAClBC,aAAa,EAAE,MAAM;QACrBC,aAAa,EAAE,MAAM;QACrBC,UAAU,EAAE,MAAM;QAClBC,YAAY,EAAE,IAAI;QAClBC,cAAc,EAAE,IAAI;QACpBC,aAAa,EAAE,IAAI;QACnBC,SAAS,EAAE,IAAI;QACfC,kBAAkB,EAAE,KAAK;QACzBC,UAAU,EAAE,KAAK;QACjBC,iBAAiB,EAAE,MAAM;QACzBC,aAAa,EAAE;MACjB;IACF;EACF,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAMpB,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,EAAE;IACrC,MAAM,IAAI,CAACkB,0BAA0B,CAACrB,QAAQ,CAAC;EACjD,CAAC;EACDsB,OAAO,EAAE;IACPC,aAAaA,CAAC/B,IAAI,EAAE;MAClB,OAAOgC,MAAM,CAACC,OAAO,CAACjC,IAAI,EACrBkC,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,KAAKA,GAAG,KAAI,IAAI,EAC7BC,GAAG,CAAC,CAAC,CAACD,GAAG,EAAEE,KAAK,CAAC,MAAM;QACtBC,KAAK,EAAE,IAAI,CAAC1B,UAAU,CAACuB,GAAG,KAAKA,GAAG;QAClCE;MACF,CAAC,CAAC,CAAC;IACT,CAAC;IACD,MAAMR,0BAA0BA,CAACrB,QAAQ,EAAE;MACzC,IAAI;QACF,MAAM+B,QAAO,GAAI,MAAM,IAAI,CAACC,QAAQ,CAACC,GAAG,CAAE,sBAAqBjC,QAAS,EAAC,CAAC;QAC1E,IAAI+B,QAAQ,CAACvC,IAAI,EAAE;UACjB,IAAI,CAACC,MAAK,GAAIsC,QAAQ,CAACvC,IAAI;UAC3B0C,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC1C,MAAM,CAAC;QAClC,OAAO;UACL,IAAI,CAAC2C,WAAW,CAAC,aAAa,EAAEL,QAAQ,CAACvC,IAAI,CAAC;QAChD;MACF,EAAE,OAAO6C,KAAK,EAAE;QACd,IAAI,CAACD,WAAW,CAAC,aAAa,EAAEC,KAAK,CAAC;MACxC,UAAU;QACR,IAAI,CAAC3C,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IAED0C,WAAWA,CAACE,OAAO,EAAED,KAAK,EAAE;MAC1BH,OAAO,CAACG,KAAK,CAACC,OAAO,EAAED,KAAK,CAAC;MAC7B,IAAI,CAACE,QAAQ,CAACF,KAAK,CAACC,OAAO,CAAC;IAC9B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}