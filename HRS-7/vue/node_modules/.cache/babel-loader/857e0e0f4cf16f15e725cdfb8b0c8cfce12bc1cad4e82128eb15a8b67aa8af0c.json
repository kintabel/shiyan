{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  class: \"doctor-page-table\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading-container\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = {\n  \"slot-scope\": \"scope\"\n};\nconst _hoisted_5 = {\n  \"slot-scope\": \"scope\"\n};\nconst _hoisted_6 = {\n  \"slot-scope\": \"scope\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_spinner = _resolveComponent(\"el-spinner\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_el_spinner), _cache[1] || (_cache[1] = _createElementVNode(\"span\", null, \"正在加载数据...\", -1 /* HOISTED */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_el_table, {\n    data: $data.doctors,\n    stripe: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table_column, {\n      prop: \"name\",\n      label: \"医生姓名\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"医生职称\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"template\", _hoisted_4, [_createTextVNode(_toDisplayString($options.getDoctorTitle(_ctx.scope.row.status)), 1 /* TEXT */)])]),\n\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      label: \"班次\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"template\", _hoisted_5, [_createVNode(_component_el_tag, {\n        type: $options.getShiftTagType(_ctx.scope.row.id)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($options.getShiftType(_ctx.scope.row.id)), 1 /* TEXT */)]),\n\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"type\"])])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      label: \"操作\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"template\", _hoisted_6, [_createVNode(_component_el_button, {\n        onClick: _cache[0] || (_cache[0] = $event => $options.goToRegistration(_ctx.scope.row)),\n        type: \"primary\",\n        disabled: !$options.isAvailable(_ctx.scope.row)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($options.getButtonText(_ctx.scope.row)), 1 /* TEXT */)]),\n\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"disabled\"])])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"])]))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$data","isLoading","_hoisted_2","_createVNode","_component_el_spinner","_createElementVNode","_hoisted_3","_component_el_table","data","doctors","stripe","_component_el_table_column","prop","label","_hoisted_4","$options","getDoctorTitle","_ctx","scope","row","status","_hoisted_5","_component_el_tag","type","getShiftTagType","id","getShiftType","_hoisted_6","_component_el_button","onClick","_cache","$event","goToRegistration","disabled","isAvailable","getButtonText"],"sources":["E:\\专业设计项目\\HRS\\HRS-7\\vue\\src\\views\\user\\Doctor.vue"],"sourcesContent":["<template>\r\n  <div class=\"doctor-page-table\">\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <el-spinner />\r\n      <span>正在加载数据...</span>\r\n    </div>\r\n    <div v-else>\r\n      <el-table :data=\"doctors\" stripe>\r\n        <el-table-column prop=\"name\" label=\"医生姓名\"></el-table-column>\r\n        <el-table-column label=\"医生职称\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getDoctorTitle(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"班次\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getShiftTagType(scope.row.id)\">\r\n              {{ getShiftType(scope.row.id) }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                @click=\"goToRegistration(scope.row)\"\r\n                type=\"primary\"\r\n                :disabled=\"!isAvailable(scope.row)\"\r\n            >\r\n              {{ getButtonText(scope.row) }}\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { parseTime } from '@/utils'\r\n\r\nexport default {\r\n  name: 'Doctor',\r\n  data() {\r\n    return {\r\n      doctors: [],\r\n      schedules: {}, // 存储医生排班信息 {doctorId: schedule}\r\n      isLoading: true,\r\n      currentHour: new Date().getHours(),\r\n      isAppointment: this.$route.params.isAppointment\r\n    }\r\n  },\r\n  computed: {\r\n    isDayTime() {\r\n      return this.currentHour >= 8 && this.currentHour < 18\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDoctors().then(() => {\r\n      const isAppointment = this.$route.params.isAppointment\r\n      if (isAppointment) {\r\n        this.fetchAllSchedules(1)\r\n      }else{\r\n        this.fetchAllSchedules(2)\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    // 获取单个医生的排班信息\r\n    getDoctorSchedule(doctorId) {\r\n      return this.schedules[doctorId] || null\r\n      console.log(this.schedules)\r\n    },\r\n\r\n    // 获取所有医生的排班信息\r\n    async fetchAllSchedules(isAppointment) {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n      var today\r\n      if (isAppointment === 1) {\r\n        today = this.$route.query.scheduleDate\r\n        console.log(today)\r\n      }else if (isAppointment === 2) {\r\n        today = parseTime(new Date(), '{y}-{m}-{d}')\r\n      }\r\n      try {\r\n        const response = await this.$request.get('/api/schedule/departmentByDoc/' + departmentId, {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            startDate: today,\r\n            endDate: today\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          // 将排班信息按doctorId存入schedules对象\r\n          console.log(response.data)\r\n          response.data.forEach(schedule => {\r\n            this.$set(this.schedules, schedule.doctorId, schedule)\r\n          })\r\n        }\r\n      } catch (error) {\r\n        console.error('获取排班信息失败:', error)\r\n        this.$message.error('获取排班信息失败')\r\n      } finally {\r\n        this.isLoading = false\r\n      }\r\n    },\r\n\r\n    // 获取医生列表\r\n    async fetchDoctors() {\r\n      const hospitalId = this.$route.params.hospitalId\r\n      const departmentId = this.$route.params.departmentId\r\n\r\n      try {\r\n        const response = await this.$request.get('/doctor/selectDoc', {\r\n          params: {\r\n            hospitalId: hospitalId,\r\n            departmentId: departmentId\r\n          }\r\n        })\r\n\r\n        if (response.data) {\r\n          this.doctors = response.data\r\n        } else {\r\n          console.error('获取医生列表数据格式错误:', response.data)\r\n          this.$message.error('获取医生列表失败，请稍后重试')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取医生列表失败:', error)\r\n        this.$message.error('获取医生列表失败，请稍后重试')\r\n      }\r\n    },\r\n\r\n    // 判断医生是否可预约\r\n    isAvailable(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return false\r\n\r\n      // 白天可以预约所有医生，晚上只能预约夜班医生\r\n      return this.isDayTime || schedule.shiftType === 'NIGHT'\r\n    },\r\n\r\n    // 按钮文本\r\n    getButtonText(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      if (!schedule) return '今日无排班'\r\n\r\n      if (!this.isDayTime && schedule.shiftType === 'DAY') {\r\n        return '非夜间时段'\r\n      }\r\n      return '预约挂号'\r\n    },\r\n\r\n    // 班次标签样式\r\n    getShiftTagType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return 'info'\r\n      return schedule.shiftType === 'DAY' ? 'success' : 'warning'\r\n    },\r\n\r\n    // 获取班次类型文本\r\n    getShiftType(doctorId) {\r\n      const schedule = this.getDoctorSchedule(doctorId)\r\n      if (!schedule) return '无排班'\r\n      return schedule.shiftType === 'DAY' ? '白班' : '夜班'\r\n    },\r\n\r\n    // 跳转到挂号页面\r\n    goToRegistration(doctor) {\r\n      const schedule = this.getDoctorSchedule(doctor.id)\r\n      const shiftType = schedule?.shiftType === 'DAY' ? 1 : 2\r\n\r\n        this.$router.push({\r\n          name: 'Registration',\r\n          params: { doctorId: doctor.id },\r\n          query: {\r\n            status: 0,\r\n            shiftType: shiftType\r\n          }\r\n        })\r\n    },\r\n\r\n    // 获取医生职称\r\n    getDoctorTitle(status) {\r\n      switch (status) {\r\n        case 1: return '医师'\r\n        case 2: return '副主治医师'\r\n        case 3: return '主治医师'\r\n        case 4: return '专家'\r\n        case 5: return '急诊'\r\n        default: return '未知职称'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.doctor-page-table {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 50px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;;EACNA,KAAK,EAAC;;;;;;EAQZ,YAAU,EAAC;AAAO;;EAKlB,YAAU,EAAC;AAAO;;EAOlB,YAAU,EAAC;AAAO;;;;;;;uBArBpCC,mBAAA,CAiCM,OAjCNC,UAiCM,GAhCOC,KAAA,CAAAC,SAAS,I,cAApBH,mBAAA,CAGM,OAHNI,UAGM,GAFJC,YAAA,CAAcC,qBAAA,G,0BACdC,mBAAA,CAAsB,cAAhB,WAAS,qB,oBAEjBP,mBAAA,CA2BM,OAAAQ,UAAA,GA1BJH,YAAA,CAyBWI,mBAAA;IAzBAC,IAAI,EAAER,KAAA,CAAAS,OAAO;IAAEC,MAAM,EAAN;;sBACxB,MAA4D,CAA5DP,YAAA,CAA4DQ,0BAAA;MAA3CC,IAAI,EAAC,MAAM;MAACC,KAAK,EAAC;QACnCV,YAAA,CAIkBQ,0BAAA;MAJDE,KAAK,EAAC;IAAM;wBAC3B,MAEW,CAFXR,mBAAA,CAEW,YAFXS,UAEW,G,kCADNC,QAAA,CAAAC,cAAc,CAACC,IAAA,CAAAC,KAAK,CAACC,GAAG,CAACC,MAAM,kB;;;QAGtCjB,YAAA,CAMkBQ,0BAAA;MANDE,KAAK,EAAC;IAAI;wBACzB,MAIW,CAJXR,mBAAA,CAIW,YAJXgB,UAIW,GAHTlB,YAAA,CAESmB,iBAAA;QAFAC,IAAI,EAAER,QAAA,CAAAS,eAAe,CAACP,IAAA,CAAAC,KAAK,CAACC,GAAG,CAACM,EAAE;;0BACzC,MAAgC,C,kCAA7BV,QAAA,CAAAW,YAAY,CAACT,IAAA,CAAAC,KAAK,CAACC,GAAG,CAACM,EAAE,kB;;;;;QAIlCtB,YAAA,CAUkBQ,0BAAA;MAVDE,KAAK,EAAC;IAAI;wBACzB,MAQW,CARXR,mBAAA,CAQW,YARXsB,UAQW,GAPTxB,YAAA,CAMYyB,oBAAA;QALPC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEhB,QAAA,CAAAiB,gBAAgB,CAACf,IAAA,CAAAC,KAAK,CAACC,GAAG;QAClCI,IAAI,EAAC,SAAS;QACbU,QAAQ,GAAGlB,QAAA,CAAAmB,WAAW,CAACjB,IAAA,CAAAC,KAAK,CAACC,GAAG;;0BAEnC,MAA8B,C,kCAA3BJ,QAAA,CAAAoB,aAAa,CAAClB,IAAA,CAAAC,KAAK,CAACC,GAAG,kB"},"metadata":{},"sourceType":"module","externalDependencies":[]}